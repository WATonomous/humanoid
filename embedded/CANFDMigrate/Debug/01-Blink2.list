
01-Blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b424  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b604  0800b604  0000c604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b744  0800b744  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b744  0800b744  0000c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b74c  0800b74c  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b74c  0800b74c  0000c74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b750  0800b750  0000c750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b754  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d8c  200001e0  0800b934  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f6c  0800b934  0000df6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeef  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004425  00000000  00000000  000280ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8a  00000000  00000000  0002d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa63  00000000  00000000  0002e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e32  00000000  00000000  000593c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbce4  00000000  00000000  000731f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016eedb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  0016ef20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001749fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b5ec 	.word	0x0800b5ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800b5ec 	.word	0x0800b5ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_FDCAN2_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_FDCAN2_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800060a:	2201      	movs	r2, #1
 800060c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000616:	2201      	movs	r2, #1
 8000618:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800061c:	2201      	movs	r2, #1
 800061e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 7;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000622:	2207      	movs	r2, #7
 8000624:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 40;
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000628:	2228      	movs	r2, #40	@ 0x28
 800062a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 7;
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800062e:	2207      	movs	r2, #7
 8000630:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 2;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000634:	2202      	movs	r2, #2
 8000636:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800063a:	2205      	movs	r2, #5
 800063c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 18;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000640:	2212      	movs	r2, #18
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 5;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000646:	2205      	movs	r2, #5
 8000648:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000652:	2200      	movs	r2, #0
 8000654:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 8000658:	2200      	movs	r2, #0
 800065a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_FDCAN2_Init+0x84>)
 800065e:	f000 ff13 	bl	8001488 <HAL_FDCAN_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000668:	f000 fb10 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001fc 	.word	0x200001fc
 8000674:	40006800 	.word	0x40006800

08000678 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 800067e:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <MX_FDCAN3_Init+0x88>)
 8000680:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 8000696:	2201      	movs	r2, #1
 8000698:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 800069c:	2200      	movs	r2, #0
 800069e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = ENABLE;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 7;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006ae:	2207      	movs	r2, #7
 80006b0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 40;
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006b4:	2228      	movs	r2, #40	@ 0x28
 80006b6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 7;
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006ba:	2207      	movs	r2, #7
 80006bc:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 5;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006c6:	2205      	movs	r2, #5
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 18;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006cc:	2212      	movs	r2, #18
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 5;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006d2:	2205      	movs	r2, #5
 80006d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006d8:	2200      	movs	r2, #0
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006de:	2200      	movs	r2, #0
 80006e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_FDCAN3_Init+0x84>)
 80006ea:	f000 fecd 	bl	8001488 <HAL_FDCAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 80006f4:	f000 faca 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000260 	.word	0x20000260
 8000700:	40006c00 	.word	0x40006c00

08000704 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0a0      	sub	sp, #128	@ 0x80
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	2254      	movs	r2, #84	@ 0x54
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f00a f94a 	bl	800a9be <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <HAL_FDCAN_MspInit+0x190>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d152      	bne.n	80007da <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800073a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800073e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fa99 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000750:	f000 fa9c 	bl	8000c8c <Error_Handler>
    }

    /* FDCAN2 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000754:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a4f      	ldr	r2, [pc, #316]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 800075c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800075e:	4b4e      	ldr	r3, [pc, #312]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d10b      	bne.n	800077e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000766:	4b4d      	ldr	r3, [pc, #308]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076a:	4a4c      	ldr	r2, [pc, #304]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 800076c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000770:	6593      	str	r3, [r2, #88]	@ 0x58
 8000772:	4b4a      	ldr	r3, [pc, #296]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b47      	ldr	r3, [pc, #284]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a46      	ldr	r2, [pc, #280]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b44      	ldr	r3, [pc, #272]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000796:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800079a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80007a8:	2309      	movs	r3, #9
 80007aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007b0:	4619      	mov	r1, r3
 80007b2:	483b      	ldr	r0, [pc, #236]	@ (80008a0 <HAL_FDCAN_MspInit+0x19c>)
 80007b4:	f001 fd84 	bl	80022c0 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2056      	movs	r0, #86	@ 0x56
 80007be:	f000 fe2e 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80007c2:	2056      	movs	r0, #86	@ 0x56
 80007c4:	f000 fe45 	bl	8001452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2057      	movs	r0, #87	@ 0x57
 80007ce:	f000 fe26 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80007d2:	2057      	movs	r0, #87	@ 0x57
 80007d4:	f000 fe3d 	bl	8001452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 80007d8:	e057      	b.n	800088a <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN3)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a31      	ldr	r2, [pc, #196]	@ (80008a4 <HAL_FDCAN_MspInit+0x1a0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d152      	bne.n	800088a <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80007ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fa41 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_FDCAN_MspInit+0x100>
      Error_Handler();
 8000800:	f000 fa44 	bl	8000c8c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a23      	ldr	r2, [pc, #140]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 800080c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <HAL_FDCAN_MspInit+0x194>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10b      	bne.n	800082e <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	4a20      	ldr	r2, [pc, #128]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 800081c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000820:	6593      	str	r3, [r2, #88]	@ 0x58
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a1a      	ldr	r2, [pc, #104]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <HAL_FDCAN_MspInit+0x198>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000846:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800084a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000858:	230b      	movs	r3, #11
 800085a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f001 fd2b 	bl	80022c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2058      	movs	r0, #88	@ 0x58
 8000870:	f000 fdd5 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000874:	2058      	movs	r0, #88	@ 0x58
 8000876:	f000 fdec 	bl	8001452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2059      	movs	r0, #89	@ 0x59
 8000880:	f000 fdcd 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000884:	2059      	movs	r0, #89	@ 0x59
 8000886:	f000 fde4 	bl	8001452 <HAL_NVIC_EnableIRQ>
}
 800088a:	bf00      	nop
 800088c:	3780      	adds	r7, #128	@ 0x80
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40006800 	.word	0x40006800
 8000898:	200002c4 	.word	0x200002c4
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	40006c00 	.word	0x40006c00

080008a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a22      	ldr	r2, [pc, #136]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a16      	ldr	r2, [pc, #88]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_GPIO_Init+0xa4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_GPIO_Init+0xa4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <MX_GPIO_Init+0xa4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_GPIO_Init+0xa4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2140      	movs	r1, #64	@ 0x40
 8000922:	480b      	ldr	r0, [pc, #44]	@ (8000950 <MX_GPIO_Init+0xa8>)
 8000924:	f001 fe4e 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000928:	2340      	movs	r3, #64	@ 0x40
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_GPIO_Init+0xa8>)
 8000940:	f001 fcbe 	bl	80022c0 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48000800 	.word	0x48000800

08000954 <check_can_bus>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
static void check_can_bus(FDCAN_HandleTypeDef *hfdcan)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  FDCAN_ProtocolStatusTypeDef protocolStatus = {};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	222c      	movs	r2, #44	@ 0x2c
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f00a f82a 	bl	800a9be <memset>

  HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f001 f8c7 	bl	8001b04 <HAL_FDCAN_GetProtocolStatus>
  if (protocolStatus.BusOff) {
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d007      	beq.n	800098c <check_can_bus+0x38>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	699a      	ldr	r2, [r3, #24]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 0201 	bic.w	r2, r2, #1
 800098a:	619a      	str	r2, [r3, #24]
  }
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	@ 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  if (hfdcan == &hfdcan2) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_FDCAN_ErrorStatusCallback+0x2c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d107      	bne.n	80009b6 <HAL_FDCAN_ErrorStatusCallback+0x22>
    if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <HAL_FDCAN_ErrorStatusCallback+0x22>
      check_can_bus(hfdcan);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffcf 	bl	8000954 <check_can_bus>
    }
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001fc 	.word	0x200001fc

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	b08f      	sub	sp, #60	@ 0x3c
 80009c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fbba 	bl	8001142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8c7 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff ff69 	bl	80008a8 <MX_GPIO_Init>
  MX_RTC_Init();
 80009d6:	f000 f95f 	bl	8000c98 <MX_RTC_Init>
  MX_FDCAN2_Init();
 80009da:	f7ff fe07 	bl	80005ec <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 80009de:	f7ff fe4b 	bl	8000678 <MX_FDCAN3_Init>
  MX_USART2_UART_Init();
 80009e2:	f000 fae1 	bl	8000fa8 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80009e6:	f009 f9c7 	bl	8009d78 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.Identifier = 0x123; // Standard ID
 80009ea:	4b54      	ldr	r3, [pc, #336]	@ (8000b3c <main+0x178>)
 80009ec:	f240 1223 	movw	r2, #291	@ 0x123
 80009f0:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80009f2:	4b52      	ldr	r3, [pc, #328]	@ (8000b3c <main+0x178>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80009f8:	4b50      	ldr	r3, [pc, #320]	@ (8000b3c <main+0x178>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <main+0x178>)
 8000a00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a04:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a06:	4b4d      	ldr	r3, [pc, #308]	@ (8000b3c <main+0x178>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <main+0x178>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000a12:	4b4a      	ldr	r3, [pc, #296]	@ (8000b3c <main+0x178>)
 8000a14:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a18:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a1a:	4b48      	ldr	r3, [pc, #288]	@ (8000b3c <main+0x178>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000a20:	4b46      	ldr	r3, [pc, #280]	@ (8000b3c <main+0x178>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  TxData_C2_To_C3[0]=0b10101010;
 8000a26:	4b46      	ldr	r3, [pc, #280]	@ (8000b40 <main+0x17c>)
 8000a28:	22aa      	movs	r2, #170	@ 0xaa
 8000a2a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=1;i<64;i++){
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a32:	e00e      	b.n	8000a52 <main+0x8e>
	  TxData_C2_To_C3[i]=2*i+2;
 8000a34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	b2d1      	uxtb	r1, r2
 8000a44:	4a3e      	ldr	r2, [pc, #248]	@ (8000b40 <main+0x17c>)
 8000a46:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=1;i<64;i++){
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a56:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a58:	d9ec      	bls.n	8000a34 <main+0x70>
  }
//
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b44 <main+0x180>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000a60:	4b38      	ldr	r3, [pc, #224]	@ (8000b44 <main+0x180>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a66:	4b37      	ldr	r3, [pc, #220]	@ (8000b44 <main+0x180>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a6c:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <main+0x180>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x123;
 8000a72:	4b34      	ldr	r3, [pc, #208]	@ (8000b44 <main+0x180>)
 8000a74:	f240 1223 	movw	r2, #291	@ 0x123
 8000a78:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x123;
 8000a7a:	4b32      	ldr	r3, [pc, #200]	@ (8000b44 <main+0x180>)
 8000a7c:	f240 1223 	movw	r2, #291	@ 0x123
 8000a80:	615a      	str	r2, [r3, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK
 8000a82:	4930      	ldr	r1, [pc, #192]	@ (8000b44 <main+0x180>)
 8000a84:	4830      	ldr	r0, [pc, #192]	@ (8000b48 <main+0x184>)
 8000a86:	f000 fe59 	bl	800173c <HAL_FDCAN_ConfigFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d106      	bne.n	8000a9e <main+0xda>
		  || HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK) {
 8000a90:	492c      	ldr	r1, [pc, #176]	@ (8000b44 <main+0x180>)
 8000a92:	482e      	ldr	r0, [pc, #184]	@ (8000b4c <main+0x188>)
 8000a94:	f000 fe52 	bl	800173c <HAL_FDCAN_ConfigFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <main+0xde>
	  Error_Handler();
 8000a9e:	f000 f8f5 	bl	8000c8c <Error_Handler>
  }

  HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan2, 38, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2126      	movs	r1, #38	@ 0x26
 8000aa6:	4828      	ldr	r0, [pc, #160]	@ (8000b48 <main+0x184>)
 8000aa8:	f000 fea2 	bl	80017f0 <HAL_FDCAN_ConfigTxDelayCompensation>
  HAL_FDCAN_EnableTxDelayCompensation(&hfdcan2);
 8000aac:	4826      	ldr	r0, [pc, #152]	@ (8000b48 <main+0x184>)
 8000aae:	f000 fec1 	bl	8001834 <HAL_FDCAN_EnableTxDelayCompensation>


  HAL_FDCAN_ActivateNotification(
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4926      	ldr	r1, [pc, #152]	@ (8000b50 <main+0x18c>)
 8000ab6:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <main+0x184>)
 8000ab8:	f001 f8a8 	bl	8001c0c <HAL_FDCAN_ActivateNotification>
      FDCAN_IT_ERROR_WARNING |          // error warning limit reached
      FDCAN_IT_BUS_OFF |                // bus-off state
      FDCAN_IT_ARB_PROTOCOL_ERROR,          // protocol error detected
      0
  );
  HAL_FDCAN_ActivateNotification(
 8000abc:	2200      	movs	r2, #0
 8000abe:	4924      	ldr	r1, [pc, #144]	@ (8000b50 <main+0x18c>)
 8000ac0:	4822      	ldr	r0, [pc, #136]	@ (8000b4c <main+0x188>)
 8000ac2:	f001 f8a3 	bl	8001c0c <HAL_FDCAN_ActivateNotification>
      FDCAN_IT_BUS_OFF |                // bus-off state
      FDCAN_IT_ARB_PROTOCOL_ERROR,          // protocol error detected
      0
  );

  HAL_FDCAN_Start(&hfdcan2);
 8000ac6:	4820      	ldr	r0, [pc, #128]	@ (8000b48 <main+0x184>)
 8000ac8:	f000 fed5 	bl	8001876 <HAL_FDCAN_Start>
  HAL_FDCAN_Start(&hfdcan3);
 8000acc:	481f      	ldr	r0, [pc, #124]	@ (8000b4c <main+0x188>)
 8000ace:	f000 fed2 	bl	8001876 <HAL_FDCAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ad2:	2140      	movs	r1, #64	@ 0x40
 8000ad4:	481f      	ldr	r0, [pc, #124]	@ (8000b54 <main+0x190>)
 8000ad6:	f001 fd8d 	bl	80025f4 <HAL_GPIO_TogglePin>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData_C2_To_C3) != HAL_OK) {
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <main+0x17c>)
 8000adc:	4917      	ldr	r1, [pc, #92]	@ (8000b3c <main+0x178>)
 8000ade:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <main+0x184>)
 8000ae0:	f000 fef1 	bl	80018c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d020      	beq.n	8000b2c <main+0x168>
		  Error_Handler();
 8000aea:	f000 f8cf 	bl	8000c8c <Error_Handler>
	}


	while (HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, FDCAN_TX_BUFFER0)) {
 8000aee:	e01d      	b.n	8000b2c <main+0x168>
		HAL_Delay(100);
 8000af0:	2064      	movs	r0, #100	@ 0x64
 8000af2:	f000 fb97 	bl	8001224 <HAL_Delay>
	    FDCAN_ProtocolStatusTypeDef status;
	    HAL_FDCAN_GetProtocolStatus(&hfdcan2, &status);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <main+0x184>)
 8000afc:	f001 f802 	bl	8001b04 <HAL_FDCAN_GetProtocolStatus>
	    printf("Hello from USB CDC! Tick: %lu\r\n", HAL_GetTick());
 8000b00:	f000 fb84 	bl	800120c <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <main+0x194>)
 8000b0a:	f009 ff03 	bl	800a914 <iprintf>
	          printf("BusOff: %d, Activity: %d, LastErrorCode: %d, RX FIFO Fill: %lu\n",
 8000b0e:	697c      	ldr	r4, [r7, #20]
 8000b10:	68bd      	ldr	r5, [r7, #8]
 8000b12:	683e      	ldr	r6, [r7, #0]
 8000b14:	2140      	movs	r1, #64	@ 0x40
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <main+0x184>)
 8000b18:	f001 f85a 	bl	8001bd0 <HAL_FDCAN_GetRxFifoFillLevel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4633      	mov	r3, r6
 8000b22:	462a      	mov	r2, r5
 8000b24:	4621      	mov	r1, r4
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <main+0x198>)
 8000b28:	f009 fef4 	bl	800a914 <iprintf>
	while (HAL_FDCAN_IsTxBufferMessagePending(&hfdcan2, FDCAN_TX_BUFFER0)) {
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <main+0x184>)
 8000b30:	f001 f838 	bl	8001ba4 <HAL_FDCAN_IsTxBufferMessagePending>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1da      	bne.n	8000af0 <main+0x12c>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b3a:	e7ca      	b.n	8000ad2 <main+0x10e>
 8000b3c:	200002e0 	.word	0x200002e0
 8000b40:	2000032c 	.word	0x2000032c
 8000b44:	200002c8 	.word	0x200002c8
 8000b48:	200001fc 	.word	0x200001fc
 8000b4c:	20000260 	.word	0x20000260
 8000b50:	002c0081 	.word	0x002c0081
 8000b54:	48000800 	.word	0x48000800
 8000b58:	0800b604 	.word	0x0800b604
 8000b5c:	0800b624 	.word	0x0800b624

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	@ 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	2238      	movs	r2, #56	@ 0x38
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f009 ff25 	bl	800a9be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b86:	f003 fa91 	bl	80040ac <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8a:	f003 fa7f 	bl	800408c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <SystemClock_Config+0xac>)
 8000b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b94:	4a1d      	ldr	r2, [pc, #116]	@ (8000c0c <SystemClock_Config+0xac>)
 8000b96:	f023 0318 	bic.w	r3, r3, #24
 8000b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fb21 	bl	8004214 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 f858 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2303      	movs	r3, #3
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fe25 	bl	8004844 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c00:	f000 f844 	bl	8000c8c <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3750      	adds	r7, #80	@ 0x50
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_FDCAN_TxBufferCompleteCallback>:
/* USER CODE BEGIN 4 */



void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	 if(hfdcan == &hfdcan2) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <HAL_FDCAN_TxBufferCompleteCallback+0x24>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d102      	bne.n	8000c28 <HAL_FDCAN_TxBufferCompleteCallback+0x18>
	    txDone = 1;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_FDCAN_TxBufferCompleteCallback+0x28>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
	 }
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	200001fc 	.word	0x200001fc
 8000c38:	20000374 	.word	0x20000374

08000c3c <_write>:

int _write(int file, char *ptr, int len) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f009 f952 	bl	8009ef4 <CDC_Transmit_FS>
    return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_C3);
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_FDCAN_RxFifo0Callback+0x24>)
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8000c6a:	2140      	movs	r1, #64	@ 0x40
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fe6f 	bl	8001950 <HAL_FDCAN_GetRxMessage>
    //     digitalWrite(PC2, 1);
    // }
    // else{
    //     digitalWrite(PC2, 0);
    // }
    printf("HIHI I HEAR YOU!");
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000c74:	f009 fe4e 	bl	800a914 <iprintf>

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000036c 	.word	0x2000036c
 8000c84:	20000304 	.word	0x20000304
 8000c88:	0800b664 	.word	0x0800b664

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <MX_RTC_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000caa:	227f      	movs	r2, #127	@ 0x7f
 8000cac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cb0:	22ff      	movs	r2, #255	@ 0xff
 8000cb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ccc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_RTC_Init+0x50>)
 8000cd6:	f004 fa1f 	bl	8005118 <HAL_RTC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f7ff ffd4 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000378 	.word	0x20000378
 8000cec:	40002800 	.word	0x40002800

08000cf0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b098      	sub	sp, #96	@ 0x60
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2254      	movs	r2, #84	@ 0x54
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fe5c 	bl	800a9be <memset>
  if(rtcHandle->Instance==RTC)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <HAL_RTC_MspInit+0x70>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d123      	bne.n	8000d58 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000d14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 ffab 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d2c:	f7ff ffae 	bl	8000c8c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_RTC_MspInit+0x74>)
 8000d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d36:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <HAL_RTC_MspInit+0x74>)
 8000d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_RTC_MspInit+0x74>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_RTC_MspInit+0x74>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_RTC_MspInit+0x74>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3760      	adds	r7, #96	@ 0x60
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40002800 	.word	0x40002800
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d9e:	f003 fa29 	bl	80041f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f9ef 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <USB_LP_IRQHandler+0x10>)
 8000e16:	f001 fd0e 	bl	8002836 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000190c 	.word	0x2000190c

08000e24 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <FDCAN2_IT0_IRQHandler+0x10>)
 8000e2a:	f000 ffd5 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001fc 	.word	0x200001fc

08000e38 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <FDCAN2_IT1_IRQHandler+0x10>)
 8000e3e:	f000 ffcb 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001fc 	.word	0x200001fc

08000e4c <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <FDCAN3_IT0_IRQHandler+0x10>)
 8000e52:	f000 ffc1 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000260 	.word	0x20000260

08000e60 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <FDCAN3_IT1_IRQHandler+0x10>)
 8000e66:	f000 ffb7 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000260 	.word	0x20000260

08000e74 <_read>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <_sbrk>:
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
 8000f48:	f009 fd88 	bl	800aa5c <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20020000 	.word	0x20020000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200003a0 	.word	0x200003a0
 8000f80:	20001f70 	.word	0x20001f70

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fac:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <MX_USART2_UART_Init+0x94>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff0:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8000ff2:	f004 f9a5 	bl	8005340 <HAL_UART_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ffc:	f7ff fe46 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8001004:	f004 fed6 	bl	8005db4 <HAL_UARTEx_SetTxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800100e:	f7ff fe3d 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8001016:	f004 ff0b 	bl	8005e30 <HAL_UARTEx_SetRxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001020:	f7ff fe34 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_USART2_UART_Init+0x90>)
 8001026:	f004 fe8c 	bl	8005d42 <HAL_UARTEx_DisableFifoMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001030:	f7ff fe2c 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200003a4 	.word	0x200003a4
 800103c:	40004400 	.word	0x40004400

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09e      	sub	sp, #120	@ 0x78
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2254      	movs	r2, #84	@ 0x54
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f009 fcac 	bl	800a9be <memset>
  if(uartHandle->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1f      	ldr	r2, [pc, #124]	@ (80010e8 <HAL_UART_MspInit+0xa8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d136      	bne.n	80010de <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fdfd 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fe00 	bl	8000c8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_UART_MspInit+0xac>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <HAL_UART_MspInit+0xac>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001096:	6593      	str	r3, [r2, #88]	@ 0x58
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0xac>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0xac>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <HAL_UART_MspInit+0xac>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_UART_MspInit+0xac>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010bc:	230c      	movs	r3, #12
 80010be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010cc:	2307      	movs	r3, #7
 80010ce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010da:	f001 f8f1 	bl	80022c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010de:	bf00      	nop
 80010e0:	3778      	adds	r7, #120	@ 0x78
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40021000 	.word	0x40021000

080010f0 <Reset_Handler>:
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <LoopForever+0x2>)
 80010f2:	4685      	mov	sp, r0
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <LoopForever+0x6>)
 80010f6:	490e      	ldr	r1, [pc, #56]	@ (8001130 <LoopForever+0xa>)
 80010f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <LoopForever+0xe>)
 80010fa:	2300      	movs	r3, #0
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:
 80010fe:	58d4      	ldr	r4, [r2, r3]
 8001100:	50c4      	str	r4, [r0, r3]
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:
 8001104:	18c4      	adds	r4, r0, r3
 8001106:	428c      	cmp	r4, r1
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
 800110a:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <LoopForever+0x12>)
 800110c:	4c0b      	ldr	r4, [pc, #44]	@ (800113c <LoopForever+0x16>)
 800110e:	2300      	movs	r3, #0
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:
 8001116:	42a2      	cmp	r2, r4
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>
 800111a:	f7ff ff33 	bl	8000f84 <SystemInit>
 800111e:	f009 fca3 	bl	800aa68 <__libc_init_array>
 8001122:	f7ff fc4f 	bl	80009c4 <main>

08001126 <LoopForever>:
 8001126:	e7fe      	b.n	8001126 <LoopForever>
 8001128:	20020000 	.word	0x20020000
 800112c:	20000000 	.word	0x20000000
 8001130:	200001e0 	.word	0x200001e0
 8001134:	0800b754 	.word	0x0800b754
 8001138:	200001e0 	.word	0x200001e0
 800113c:	20001f6c 	.word	0x20001f6c

08001140 <ADC1_2_IRQHandler>:
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>

08001142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f95b 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f80e 	bl	8001174 <HAL_InitTick>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001164:	f7ff fe00 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	79fb      	ldrb	r3, [r7, #7]

}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <HAL_InitTick+0x68>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d022      	beq.n	80011ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_InitTick+0x6c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_InitTick+0x68>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001194:	fbb1 f3f3 	udiv	r3, r1, r3
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f966 	bl	800146e <HAL_SYSTICK_Config>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10f      	bne.n	80011c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d809      	bhi.n	80011c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	2200      	movs	r2, #0
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b6:	f000 f932 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_InitTick+0x70>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e004      	b.n	80011d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e001      	b.n	80011d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a03      	ldr	r2, [pc, #12]	@ (8001204 <HAL_IncTick+0x1c>)
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000434 	.word	0x20000434
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000434 	.word	0x20000434

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800123c:	d004      	beq.n	8001248 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_Delay+0x40>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001248:	bf00      	nop
 800124a:	f7ff ffdf 	bl	800120c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	429a      	cmp	r2, r3
 8001258:	d8f7      	bhi.n	800124a <HAL_Delay+0x26>
  {
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000008 	.word	0x20000008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff40 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa4 	bl	80013c4 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e147      	b.n	800172a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff f928 	bl	8000704 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff fea2 	bl	800120c <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014ca:	e012      	b.n	80014f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014cc:	f7ff fe9e 	bl	800120c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	d90b      	bls.n	80014f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e11b      	b.n	800172a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d0e5      	beq.n	80014cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fe7c 	bl	800120c <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001516:	e012      	b.n	800153e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001518:	f7ff fe78 	bl	800120c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d90b      	bls.n	800153e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0f5      	b.n	800172a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0e5      	beq.n	8001518 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0202 	orr.w	r2, r2, #2
 800155a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a74      	ldr	r2, [pc, #464]	@ (8001734 <HAL_FDCAN_Init+0x2ac>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d103      	bne.n	800156e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001566:	4a74      	ldr	r2, [pc, #464]	@ (8001738 <HAL_FDCAN_Init+0x2b0>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7c1b      	ldrb	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e007      	b.n	8001598 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001596:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c5b      	ldrb	r3, [r3, #17]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	e007      	b.n	80015c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80015c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7c9b      	ldrb	r3, [r3, #18]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015d8:	619a      	str	r2, [r3, #24]
 80015da:	e007      	b.n	80015ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001610:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0210 	bic.w	r2, r2, #16
 8001620:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0204 	orr.w	r2, r2, #4
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	e02c      	b.n	8001696 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d028      	beq.n	8001696 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d01c      	beq.n	8001686 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800165a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0210 	orr.w	r2, r2, #16
 800166a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d110      	bne.n	8001696 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	e007      	b.n	8001696 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	3b01      	subs	r3, #1
 800169c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80016ca:	d115      	bne.n	80016f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d6:	3b01      	subs	r3, #1
 80016d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	3b01      	subs	r3, #1
 80016e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fcee 	bl	80020f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40006400 	.word	0x40006400
 8001738:	40006500 	.word	0x40006500

0800173c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800174c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d002      	beq.n	800175a <HAL_FDCAN_ConfigFilter+0x1e>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d13d      	bne.n	80017d6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800176e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001776:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e01d      	b.n	80017d2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	075a      	lsls	r2, r3, #29
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	079a      	lsls	r2, r3, #30
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3304      	adds	r3, #4
 80017ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e006      	b.n	80017e4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0219      	lsls	r1, r3, #8
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	430a      	orrs	r2, r1
 8001814:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e006      	b.n	8001828 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	f043 0204 	orr.w	r2, r3, #4
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
  }
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d109      	bne.n	800185c <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001856:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e006      	b.n	800186a <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001860:	f043 0204 	orr.w	r2, r3, #4
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d110      	bne.n	80018ac <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e006      	b.n	80018ba <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d12c      	bne.n	8001938 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e023      	b.n	8001946 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fc57 	bl	80021c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e006      	b.n	8001946 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193c:	f043 0208 	orr.w	r2, r3, #8
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001950:	b480      	push	{r7}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001964:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001966:	7efb      	ldrb	r3, [r7, #27]
 8001968:	2b02      	cmp	r3, #2
 800196a:	f040 80bc 	bne.w	8001ae6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b40      	cmp	r3, #64	@ 0x40
 8001972:	d121      	bne.n	80019b8 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001988:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0af      	b.n	8001af4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b6:	e020      	b.n	80019fa <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e08d      	b.n	8001af4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0c9b      	lsrs	r3, r3, #18
 8001a14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e005      	b.n	8001a2a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	3304      	adds	r3, #4
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0e1b      	lsrs	r3, r3, #24
 8001a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0fda      	lsrs	r2, r3, #31
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3304      	adds	r3, #4
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	e00a      	b.n	8001ab4 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d3eb      	bcc.n	8001a9e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b40      	cmp	r3, #64	@ 0x40
 8001aca:	d105      	bne.n	8001ad8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001ad6:	e004      	b.n	8001ae2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f043 0208 	orr.w	r2, r3, #8
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	372c      	adds	r7, #44	@ 0x2c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	0800b6d8 	.word	0x0800b6d8

08001b04 <HAL_FDCAN_GetProtocolStatus>:
  *         the configuration information for the specified FDCAN.
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(FDCAN_HandleTypeDef *hfdcan, FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0207 	and.w	r2, r3, #7
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 0207 	and.w	r2, r3, #7
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0218 	and.w	r2, r3, #24
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	09db      	lsrs	r3, r3, #7
 8001b52:	f003 0201 	and.w	r2, r3, #1
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	0adb      	lsrs	r3, r3, #11
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	0b1b      	lsrs	r3, r3, #12
 8001b6a:	f003 0201 	and.w	r2, r3, #1
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	0b5b      	lsrs	r3, r3, #13
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	0b9b      	lsrs	r3, r3, #14
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex list
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(TxBufferIndex));

  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b40      	cmp	r3, #64	@ 0x40
 8001bde:	d107      	bne.n	8001bf0 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e006      	b.n	8001bfe <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c1e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <HAL_FDCAN_ActivateNotification+0x22>
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	f040 80c8 	bne.w	8001dbe <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03b      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d031      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d027      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01d      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d13b      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d131      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d127      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11d      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0202 	orr.w	r2, r2, #2
 8001d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e006      	b.n	8001dcc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df4:	4013      	ands	r3, r2
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	6a3a      	ldr	r2, [r7, #32]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e1a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001e32:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e46:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e4a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2240      	movs	r2, #64	@ 0x40
 8001e7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f923 	bl	80020c8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d014      	beq.n	8001ec8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ea6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ec0:	6939      	ldr	r1, [r7, #16]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8e1 	bl	800208a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8b6 	bl	800204a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001eec:	6a39      	ldr	r1, [r7, #32]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe feb4 	bl	8000c5c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f02:	69f9      	ldr	r1, [r7, #28]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8ab 	bl	8002060 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8a0 	bl	8002076 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01a      	beq.n	8001f7a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d013      	beq.n	8001f7a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f5a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fe4b 	bl	8000c10 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00e      	beq.n	8001fa6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f9e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f87d 	bl	80020a0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f871 	bl	80020b4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d011      	beq.n	8002004 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ff6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002012:	6979      	ldr	r1, [r7, #20]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7fe fcbd 	bl	8000994 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f84d 	bl	80020dc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80020fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2f      	ldr	r2, [pc, #188]	@ (80021c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d103      	bne.n	800210e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800210c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2c      	ldr	r2, [pc, #176]	@ (80021c4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800211e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800212e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	041a      	lsls	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002154:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215c:	061a      	lsls	r2, r3, #24
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e005      	b.n	80021a2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3304      	adds	r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3f3      	bcc.n	8002196 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	4000a400 	.word	0x4000a400
 80021c0:	40006800 	.word	0x40006800
 80021c4:	40006c00 	.word	0x40006c00

080021c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80021e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e00a      	b.n	800220a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80021fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002202:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002208:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002214:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800221a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002220:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3304      	adds	r3, #4
 8002246:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3304      	adds	r3, #4
 8002252:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e020      	b.n	800229c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3303      	adds	r3, #3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3302      	adds	r3, #2
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	440b      	add	r3, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002272:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	440b      	add	r3, r1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002280:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	440a      	add	r2, r1
 8002288:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800228a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	3304      	adds	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3304      	adds	r3, #4
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	4a06      	ldr	r2, [pc, #24]	@ (80022bc <FDCAN_CopyMessageToRAM+0xf4>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	461a      	mov	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d3d5      	bcc.n	800225a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	3724      	adds	r7, #36	@ 0x24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	0800b6d8 	.word	0x0800b6d8

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ce:	e15a      	b.n	8002586 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 814c 	beq.w	8002580 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d017      	beq.n	800239e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d123      	bne.n	80023f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a6 	beq.w	8002580 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002434:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_GPIO_Init+0x2e4>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002438:	4a5a      	ldr	r2, [pc, #360]	@ (80025a4 <HAL_GPIO_Init+0x2e4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002440:	4b58      	ldr	r3, [pc, #352]	@ (80025a4 <HAL_GPIO_Init+0x2e4>)
 8002442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244c:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <HAL_GPIO_Init+0x2e8>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002476:	d01f      	beq.n	80024b8 <HAL_GPIO_Init+0x1f8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_GPIO_Init+0x2ec>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d019      	beq.n	80024b4 <HAL_GPIO_Init+0x1f4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4b      	ldr	r2, [pc, #300]	@ (80025b0 <HAL_GPIO_Init+0x2f0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1f0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <HAL_GPIO_Init+0x2f4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a49      	ldr	r2, [pc, #292]	@ (80025b8 <HAL_GPIO_Init+0x2f8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a48      	ldr	r2, [pc, #288]	@ (80025bc <HAL_GPIO_Init+0x2fc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1e4>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e00a      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024a4:	2306      	movs	r3, #6
 80024a6:	e008      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x1fa>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ca:	4937      	ldr	r1, [pc, #220]	@ (80025a8 <HAL_GPIO_Init+0x2e8>)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d8:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fc:	4a30      	ldr	r2, [pc, #192]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002526:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800252c:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002550:	4a1b      	ldr	r2, [pc, #108]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800257a:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <HAL_GPIO_Init+0x300>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f ae9d 	bne.w	80022d0 <HAL_GPIO_Init+0x10>
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	48000c00 	.word	0x48000c00
 80025b8:	48001000 	.word	0x48001000
 80025bc:	48001400 	.word	0x48001400
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43d9      	mvns	r1, r3
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	400b      	ands	r3, r1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	b08b      	sub	sp, #44	@ 0x2c
 800262c:	af06      	add	r7, sp, #24
 800262e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0d7      	b.n	80027ea <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f007 fd98 	bl	800a184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fc88 	bl	8005f76 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e04c      	b.n	8002706 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	3301      	adds	r3, #1
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	b298      	uxth	r0, r3
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3336      	adds	r3, #54	@ 0x36
 80026aa:	4602      	mov	r2, r0
 80026ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3303      	adds	r3, #3
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	3338      	adds	r3, #56	@ 0x38
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	333c      	adds	r3, #60	@ 0x3c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3340      	adds	r3, #64	@ 0x40
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3ad      	bcc.n	800266c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e044      	b.n	80027a0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	3301      	adds	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d3b5      	bcc.n	8002716 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	687e      	ldr	r6, [r7, #4]
 80027b2:	466d      	mov	r5, sp
 80027b4:	f106 0410 	add.w	r4, r6, #16
 80027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	602b      	str	r3, [r5, #0]
 80027c0:	1d33      	adds	r3, r6, #4
 80027c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c4:	6838      	ldr	r0, [r7, #0]
 80027c6:	f003 fbf1 	bl	8005fac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f001 fc28 	bl	8004038 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_PCD_Start+0x16>
 8002804:	2302      	movs	r3, #2
 8002806:	e012      	b.n	800282e <HAL_PCD_Start+0x3c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fb97 	bl	8005f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f005 fdb0 	bl	8008384 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f005 fdb5 	bl	80083b2 <USB_ReadInterrupts>
 8002848:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fb26 	bl	8002ea6 <PCD_EP_ISR_Handler>

    return;
 800285a:	e110      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002878:	b292      	uxth	r2, r2
 800287a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f007 fd11 	bl	800a2a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002884:	2100      	movs	r1, #0
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8fc 	bl	8002a84 <HAL_PCD_SetAddress>

    return;
 800288c:	e0f7      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028aa:	b292      	uxth	r2, r2
 80028ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028b0:	e0e5      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00c      	beq.n	80028d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ce:	b292      	uxth	r2, r2
 80028d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028d4:	e0d3      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d034      	beq.n	800294a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0204 	bic.w	r2, r2, #4
 80028f2:	b292      	uxth	r2, r2
 80028f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	b292      	uxth	r2, r2
 800290c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002922:	2100      	movs	r1, #0
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f007 feb3 	bl	800a690 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f007 fcf4 	bl	800a318 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002938:	b29a      	uxth	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002942:	b292      	uxth	r2, r2
 8002944:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002948:	e099      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002950:	2b00      	cmp	r3, #0
 8002952:	d027      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0208 	orr.w	r2, r2, #8
 8002966:	b292      	uxth	r2, r2
 8002968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0204 	orr.w	r2, r2, #4
 8002996:	b292      	uxth	r2, r2
 8002998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f007 fca1 	bl	800a2e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029a2:	e06c      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d040      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c0:	b292      	uxth	r2, r2
 80029c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d12b      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0204 	orr.w	r2, r2, #4
 80029e2:	b292      	uxth	r2, r2
 80029e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	b292      	uxth	r2, r2
 80029fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f007 fe35 	bl	800a690 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002a26:	e02a      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f007 fc5b 	bl	800a2e4 <HAL_PCD_SuspendCallback>
    return;
 8002a2e:	e026      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00f      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f007 fc19 	bl	800a28a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a58:	e011      	b.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a7c:	bf00      	nop
  }
}
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_PCD_SetAddress+0x1a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e013      	b.n	8002ac6 <HAL_PCD_SetAddress+0x42>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 fc50 	bl	800835c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	4611      	mov	r1, r2
 8002ada:	461a      	mov	r2, r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	70fb      	strb	r3, [r7, #3]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	803b      	strh	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da0e      	bge.n	8002b12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
 8002b10:	e00e      	b.n	8002b30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 0207 	and.w	r2, r3, #7
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b3c:	883a      	ldrh	r2, [r7, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	78ba      	ldrb	r2, [r7, #2]
 8002b46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b5a:	78bb      	ldrb	r3, [r7, #2]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_Open+0xa6>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_Open+0xc4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fa34 	bl	8005ff0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002b90:	7afb      	ldrb	r3, [r7, #11]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da0e      	bge.n	8002bcc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	705a      	strb	r2, [r3, #1]
 8002bca:	e00e      	b.n	8002bea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 0207 	and.w	r2, r3, #7
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_EP_Close+0x6a>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e00e      	b.n	8002c22 <HAL_PCD_EP_Close+0x88>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fd80 	bl	8006718 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	460b      	mov	r3, r1
 8002c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f003 0207 	and.w	r2, r3, #7
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c76:	7afb      	ldrb	r3, [r7, #11]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6979      	ldr	r1, [r7, #20]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 ff33 	bl	8006af2 <USB_EPStartXfer>
 8002c8c:	e005      	b.n	8002c9a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6979      	ldr	r1, [r7, #20]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 ff2c 	bl	8006af2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0207 	and.w	r2, r3, #7
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d20:	7afb      	ldrb	r3, [r7, #11]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6979      	ldr	r1, [r7, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fed8 	bl	8006af2 <USB_EPStartXfer>
 8002d42:	e005      	b.n	8002d50 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6979      	ldr	r1, [r7, #20]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 fed1 	bl	8006af2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 0207 	and.w	r2, r3, #7
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d901      	bls.n	8002d78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e03e      	b.n	8002df6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da0e      	bge.n	8002d9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	705a      	strb	r2, [r3, #1]
 8002d9c:	e00c      	b.n	8002db8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_EP_SetStall+0x7e>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e00e      	b.n	8002df6 <HAL_PCD_EP_SetStall+0x9c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 f9b9 	bl	800815e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d901      	bls.n	8002e1c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e040      	b.n	8002e9e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da0e      	bge.n	8002e42 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
 8002e40:	e00e      	b.n	8002e60 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 0207 	and.w	r2, r3, #7
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_PCD_EP_ClrStall+0x82>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e00e      	b.n	8002e9e <HAL_PCD_EP_ClrStall+0xa0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f005 f9b6 	bl	8008200 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b096      	sub	sp, #88	@ 0x58
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002eae:	e39b      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ebc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

    if (epindex == 0U)
 8002eca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 815d 	bne.w	800318e <PCD_EP_ISR_Handler+0x2e8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d14f      	bne.n	8002f80 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef0:	81fb      	strh	r3, [r7, #14]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3328      	adds	r3, #40	@ 0x28
 8002f08:	64fb      	str	r3, [r7, #76]	@ 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f3e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f40:	2100      	movs	r1, #0
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f007 f987 	bl	800a256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8349 	beq.w	80035e8 <PCD_EP_ISR_Handler+0x742>
 8002f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8344 	bne.w	80035e8 <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f7e:	e333      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d032      	beq.n	8003004 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f005 fa3b 	bl	8008454 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002fea:	4013      	ands	r3, r2
 8002fec:	823b      	strh	r3, [r7, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	8a3a      	ldrh	r2, [r7, #16]
 8002ff4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ff8:	b292      	uxth	r2, r2
 8002ffa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f007 f8fd 	bl	800a1fc <HAL_PCD_SetupStageCallback>
 8003002:	e2f1      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003004:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8003008:	2b00      	cmp	r3, #0
 800300a:	f280 82ed 	bge.w	80035e8 <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29a      	uxth	r2, r3
 8003016:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800301a:	4013      	ands	r3, r2
 800301c:	83fb      	strh	r3, [r7, #30]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	8bfa      	ldrh	r2, [r7, #30]
 8003024:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003028:	b292      	uxth	r2, r2
 800302a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	4413      	add	r3, r2
 8003046:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003052:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d019      	beq.n	8003090 <PCD_EP_ISR_Handler+0x1ea>
 800305c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800306a:	6959      	ldr	r1, [r3, #20]
 800306c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800306e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003072:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003074:	b29b      	uxth	r3, r3
 8003076:	f005 f9ed 	bl	8008454 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800307a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	441a      	add	r2, r3
 8003084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003086:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003088:	2100      	movs	r1, #0
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f007 f8c8 	bl	800a220 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 82a3 	bne.w	80035e8 <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80030c8:	d918      	bls.n	80030fc <PCD_EP_ISR_Handler+0x256>
 80030ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <PCD_EP_ISR_Handler+0x23e>
 80030de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e0:	3b01      	subs	r3, #1
 80030e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	e029      	b.n	8003150 <PCD_EP_ISR_Handler+0x2aa>
 80030fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d112      	bne.n	800312a <PCD_EP_ISR_Handler+0x284>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800310e:	b29a      	uxth	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	801a      	strh	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003122:	b29a      	uxth	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e012      	b.n	8003150 <PCD_EP_ISR_Handler+0x2aa>
 800312a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	647b      	str	r3, [r7, #68]	@ 0x44
 8003132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <PCD_EP_ISR_Handler+0x29e>
 800313e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003140:	3301      	adds	r3, #1
 8003142:	647b      	str	r3, [r7, #68]	@ 0x44
 8003144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003146:	b29b      	uxth	r3, r3
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	b29a      	uxth	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800315c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003160:	827b      	strh	r3, [r7, #18]
 8003162:	8a7b      	ldrh	r3, [r7, #18]
 8003164:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003168:	827b      	strh	r3, [r7, #18]
 800316a:	8a7b      	ldrh	r3, [r7, #18]
 800316c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003170:	827b      	strh	r3, [r7, #18]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	8a7b      	ldrh	r3, [r7, #18]
 8003178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800317c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003188:	b29b      	uxth	r3, r3
 800318a:	8013      	strh	r3, [r2, #0]
 800318c:	e22c      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f280 80f6 	bge.w	8003398 <PCD_EP_ISR_Handler+0x4f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031c2:	4013      	ands	r3, r2
 80031c4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80031da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031de:	b292      	uxth	r2, r2
 80031e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fa:	7b1b      	ldrb	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d123      	bne.n	8003248 <PCD_EP_ISR_Handler+0x3a2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	4413      	add	r3, r2
 800321a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003224:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

          if (count != 0U)
 8003228:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 808e 	beq.w	800334e <PCD_EP_ISR_Handler+0x4a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003238:	6959      	ldr	r1, [r3, #20]
 800323a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800323c:	88da      	ldrh	r2, [r3, #6]
 800323e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003242:	f005 f907 	bl	8008454 <USB_ReadPMA>
 8003246:	e082      	b.n	800334e <PCD_EP_ISR_Handler+0x4a8>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800324a:	78db      	ldrb	r3, [r3, #3]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d10a      	bne.n	8003266 <PCD_EP_ISR_Handler+0x3c0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003250:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003254:	461a      	mov	r2, r3
 8003256:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9d3 	bl	8003604 <HAL_PCD_EP_DB_Receive>
 800325e:	4603      	mov	r3, r0
 8003260:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003264:	e073      	b.n	800334e <PCD_EP_ISR_Handler+0x4a8>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800327c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003280:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800329a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d022      	beq.n	800330a <PCD_EP_ISR_Handler+0x464>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 80032ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02c      	beq.n	800334e <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fa:	6959      	ldr	r1, [r3, #20]
 80032fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fe:	891a      	ldrh	r2, [r3, #8]
 8003300:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003304:	f005 f8a6 	bl	8008454 <USB_ReadPMA>
 8003308:	e021      	b.n	800334e <PCD_EP_ISR_Handler+0x4a8>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	4413      	add	r3, r2
 8003324:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 8003332:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003344:	895a      	ldrh	r2, [r3, #10]
 8003346:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800334a:	f005 f883 	bl	8008454 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800334e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003356:	441a      	add	r2, r3
 8003358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800335c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003364:	441a      	add	r2, r3
 8003366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003368:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800336a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <PCD_EP_ISR_Handler+0x4d8>
 8003372:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	429a      	cmp	r2, r3
 800337c:	d206      	bcs.n	800338c <PCD_EP_ISR_Handler+0x4e6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800337e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f006 ff4b 	bl	800a220 <HAL_PCD_DataOutStageCallback>
 800338a:	e005      	b.n	8003398 <PCD_EP_ISR_Handler+0x4f2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fbad 	bl	8006af2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003398:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800339c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8121 	beq.w	80035e8 <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 80033a6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80033ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80033f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033f8:	78db      	ldrb	r3, [r3, #3]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f000 80a2 	beq.w	8003544 <PCD_EP_ISR_Handler+0x69e>
        {
          ep->xfer_len = 0U;
 8003400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003402:	2200      	movs	r2, #0
 8003404:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003408:	7b1b      	ldrb	r3, [r3, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8093 	beq.w	8003536 <PCD_EP_ISR_Handler+0x690>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003410:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d046      	beq.n	80034aa <PCD_EP_ISR_Handler+0x604>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800341c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d126      	bne.n	8003472 <PCD_EP_ISR_Handler+0x5cc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	4413      	add	r3, r2
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
 800343c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	00da      	lsls	r2, r3, #3
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	4413      	add	r3, r2
 8003446:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003456:	b29a      	uxth	r2, r3
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346a:	b29a      	uxth	r2, r3
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e061      	b.n	8003536 <PCD_EP_ISR_Handler+0x690>
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d15d      	bne.n	8003536 <PCD_EP_ISR_Handler+0x690>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348e:	4413      	add	r3, r2
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00da      	lsls	r2, r3, #3
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349a:	4413      	add	r3, r2
 800349c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	2200      	movs	r2, #0
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	e045      	b.n	8003536 <PCD_EP_ISR_Handler+0x690>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d126      	bne.n	8003506 <PCD_EP_ISR_Handler+0x660>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	4413      	add	r3, r2
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	00da      	lsls	r2, r3, #3
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	4413      	add	r3, r2
 80034da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034de:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	801a      	strh	r2, [r3, #0]
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	e017      	b.n	8003536 <PCD_EP_ISR_Handler+0x690>
 8003506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d113      	bne.n	8003536 <PCD_EP_ISR_Handler+0x690>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	4413      	add	r3, r2
 800351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	00da      	lsls	r2, r3, #3
 8003526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003528:	4413      	add	r3, r2
 800352a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800352e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f006 fe8a 	bl	800a256 <HAL_PCD_DataInStageCallback>
 8003542:	e051      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003544:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d144      	bne.n	80035da <PCD_EP_ISR_Handler+0x734>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	4413      	add	r3, r2
 800356a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003574:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003580:	429a      	cmp	r2, r3
 8003582:	d907      	bls.n	8003594 <PCD_EP_ISR_Handler+0x6ee>
            {
              ep->xfer_len -= TxPctSize;
 8003584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800358c:	1ad2      	subs	r2, r2, r3
 800358e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003590:	619a      	str	r2, [r3, #24]
 8003592:	e002      	b.n	800359a <PCD_EP_ISR_Handler+0x6f4>
            }
            else
            {
              ep->xfer_len = 0U;
 8003594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800359a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <PCD_EP_ISR_Handler+0x70a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f006 fe54 	bl	800a256 <HAL_PCD_DataInStageCallback>
 80035ae:	e01b      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80035b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035b8:	441a      	add	r2, r3
 80035ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035bc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80035be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80035c6:	441a      	add	r2, r3
 80035c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 fa8d 	bl	8006af2 <USB_EPStartXfer>
 80035d8:	e006      	b.n	80035e8 <PCD_EP_ISR_Handler+0x742>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80035de:	461a      	mov	r2, r3
 80035e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f917 	bl	8003816 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f6ff ac5b 	blt.w	8002eb0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3758      	adds	r7, #88	@ 0x58
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d07c      	beq.n	8003716 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4413      	add	r3, r2
 8003636:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003640:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	8b7b      	ldrh	r3, [r7, #26]
 8003648:	429a      	cmp	r2, r3
 800364a:	d306      	bcc.n	800365a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	8b7b      	ldrh	r3, [r7, #26]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	619a      	str	r2, [r3, #24]
 8003658:	e002      	b.n	8003660 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d123      	bne.n	80036b0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	833b      	strh	r3, [r7, #24]
 8003684:	8b3b      	ldrh	r3, [r7, #24]
 8003686:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800368a:	833b      	strh	r3, [r7, #24]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	8b3b      	ldrh	r3, [r7, #24]
 800369c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01f      	beq.n	80036fa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d4:	82fb      	strh	r3, [r7, #22]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	8afb      	ldrh	r3, [r7, #22]
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8085 	beq.w	800380c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6959      	ldr	r1, [r3, #20]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	891a      	ldrh	r2, [r3, #8]
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	f004 fea0 	bl	8008454 <USB_ReadPMA>
 8003714:	e07a      	b.n	800380c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	429a      	cmp	r2, r3
 8003744:	d306      	bcc.n	8003754 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	8b7b      	ldrh	r3, [r7, #26]
 800374c:	1ad2      	subs	r2, r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
 8003752:	e002      	b.n	800375a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d123      	bne.n	80037aa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377c:	83fb      	strh	r3, [r7, #30]
 800377e:	8bfb      	ldrh	r3, [r7, #30]
 8003780:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003784:	83fb      	strh	r3, [r7, #30]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	8bfb      	ldrh	r3, [r7, #30]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11f      	bne.n	80037f4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	83bb      	strh	r3, [r7, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	8bbb      	ldrh	r3, [r7, #28]
 80037e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f4:	8b7b      	ldrh	r3, [r7, #26]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6959      	ldr	r1, [r3, #20]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	895a      	ldrh	r2, [r3, #10]
 8003806:	8b7b      	ldrh	r3, [r7, #26]
 8003808:	f004 fe24 	bl	8008454 <USB_ReadPMA>
    }
  }

  return count;
 800380c:	8b7b      	ldrh	r3, [r7, #26]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b0a2      	sub	sp, #136	@ 0x88
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 81c5 	beq.w	8003bba <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4413      	add	r3, r2
 800384a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003854:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len > TxPctSize)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003860:	429a      	cmp	r2, r3
 8003862:	d907      	bls.n	8003874 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e002      	b.n	800387a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 80b9 	bne.w	80039f6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d126      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0xc4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	4413      	add	r3, r2
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	00da      	lsls	r2, r3, #3
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	4413      	add	r3, r2
 80038ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e01a      	b.n	8003910 <HAL_PCD_EP_DB_Transmit+0xfa>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d116      	bne.n	8003910 <HAL_PCD_EP_DB_Transmit+0xfa>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	4413      	add	r3, r2
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	00da      	lsls	r2, r3, #3
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	4413      	add	r3, r2
 8003904:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	2200      	movs	r2, #0
 800390e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d126      	bne.n	800396c <HAL_PCD_EP_DB_Transmit+0x156>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00da      	lsls	r2, r3, #3
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003950:	b29a      	uxth	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003964:	b29a      	uxth	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	e017      	b.n	800399c <HAL_PCD_EP_DB_Transmit+0x186>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d113      	bne.n	800399c <HAL_PCD_EP_DB_Transmit+0x186>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	4413      	add	r3, r2
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	00da      	lsls	r2, r3, #3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	4413      	add	r3, r2
 8003990:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2200      	movs	r2, #0
 800399a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f006 fc57 	bl	800a256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 82d2 	beq.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	827b      	strh	r3, [r7, #18]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	8a7b      	ldrh	r3, [r7, #18]
 80039e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	8013      	strh	r3, [r2, #0]
 80039f4:	e2b0      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a1a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	441a      	add	r2, r3
 8003a2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 8284 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a58:	441a      	add	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a66:	441a      	add	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d309      	bcc.n	8003a8c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a84:	1ad2      	subs	r2, r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	621a      	str	r2, [r3, #32]
 8003a8a:	e015      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003a94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a98:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003aa2:	e009      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d155      	bne.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x356>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	4413      	add	r3, r2
 8003ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	00da      	lsls	r2, r3, #3
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8003aec:	d916      	bls.n	8003b1c <HAL_PCD_EP_DB_Transmit+0x306>
 8003aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b00:	3b01      	subs	r3, #1
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e043      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d112      	bne.n	8003b48 <HAL_PCD_EP_DB_Transmit+0x332>
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	e02d      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_PCD_EP_DB_Transmit+0x348>
 8003b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	e01b      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d117      	bne.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	4413      	add	r3, r2
 8003b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	00da      	lsls	r2, r3, #3
 8003b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	891a      	ldrh	r2, [r3, #8]
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f004 fc0d 	bl	80083d2 <USB_WritePMA>
 8003bb8:	e1ce      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d307      	bcc.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	e002      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 80c4 	bne.w	8003d96 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d126      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c2a:	4413      	add	r3, r2
 8003c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	00da      	lsls	r2, r3, #3
 8003c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c36:	4413      	add	r3, r2
 8003c38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	e01a      	b.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x484>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d116      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x484>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c80:	4413      	add	r3, r2
 8003c82:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00da      	lsls	r2, r3, #3
 8003c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c96:	2200      	movs	r2, #0
 8003c98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d12f      	bne.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	00da      	lsls	r2, r3, #3
 8003ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e017      	b.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x522>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d113      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x522>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d1e:	4413      	add	r3, r2
 8003d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	00da      	lsls	r2, r3, #3
 8003d28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f006 fa89 	bl	800a256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8104 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8013      	strh	r3, [r2, #0]
 8003d94:	e0e0      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d121      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 80b4 	bne.w	8003f58 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003df8:	441a      	add	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e06:	441a      	add	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d309      	bcc.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	621a      	str	r2, [r3, #32]
 8003e2a:	e015      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e38:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e42:	e009      	b.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d155      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e7a:	4413      	add	r3, r2
 8003e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	00da      	lsls	r2, r3, #3
 8003e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e92:	d916      	bls.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_PCD_EP_DB_Transmit+0x694>
 8003ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	029b      	lsls	r3, r3, #10
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e040      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d112      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e02a      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f00:	3301      	adds	r3, #1
 8003f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e018      	b.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d114      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f28:	4413      	add	r3, r2
 8003f2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00da      	lsls	r2, r3, #3
 8003f32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6959      	ldr	r1, [r3, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	895a      	ldrh	r2, [r3, #10]
 8003f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f004 fa3d 	bl	80083d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f72:	823b      	strh	r3, [r7, #16]
 8003f74:	8a3b      	ldrh	r3, [r7, #16]
 8003f76:	f083 0310 	eor.w	r3, r3, #16
 8003f7a:	823b      	strh	r3, [r7, #16]
 8003f7c:	8a3b      	ldrh	r3, [r7, #16]
 8003f7e:	f083 0320 	eor.w	r3, r3, #32
 8003f82:	823b      	strh	r3, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	8a3b      	ldrh	r3, [r7, #16]
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3788      	adds	r7, #136	@ 0x88
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e009      	b.n	8003ffc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	b29a      	uxth	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	80da      	strh	r2, [r3, #6]
 8004010:	e00b      	b.n	800402a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2201      	movs	r2, #1
 8004016:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	b29a      	uxth	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	b29a      	uxth	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800405c:	b29b      	uxth	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004070:	b29b      	uxth	r3, r3
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40007000 	.word	0x40007000

080040ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d141      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ba:	4b4b      	ldr	r3, [pc, #300]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d131      	bne.n	800412c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c8:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ce:	4a46      	ldr	r2, [pc, #280]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d8:	4b43      	ldr	r3, [pc, #268]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e0:	4a41      	ldr	r2, [pc, #260]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040e8:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2232      	movs	r2, #50	@ 0x32
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	4a3f      	ldr	r2, [pc, #252]	@ (80041f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	0c9b      	lsrs	r3, r3, #18
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fe:	e002      	b.n	8004106 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004112:	d102      	bne.n	800411a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f2      	bne.n	8004100 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800411a:	4b33      	ldr	r3, [pc, #204]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004126:	d158      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e057      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800412c:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800413c:	e04d      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004144:	d141      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004146:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004152:	d131      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004154:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800416c:	4a1e      	ldr	r2, [pc, #120]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004174:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2232      	movs	r2, #50	@ 0x32
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0c9b      	lsrs	r3, r3, #18
 8004186:	3301      	adds	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	e002      	b.n	8004192 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	d102      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f2      	bne.n	800418c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d112      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e011      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041c8:	e007      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40007000 	.word	0x40007000
 80041ec:	20000000 	.word	0x20000000
 80041f0:	431bde83 	.word	0x431bde83

080041f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a04      	ldr	r2, [pc, #16]	@ (8004210 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004202:	6093      	str	r3, [r2, #8]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e306      	b.n	8004834 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d075      	beq.n	800431e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	4b97      	ldr	r3, [pc, #604]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	4b94      	ldr	r3, [pc, #592]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x3e>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d002      	beq.n	8004258 <HAL_RCC_OscConfig+0x44>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d10b      	bne.n	8004270 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	4b8d      	ldr	r3, [pc, #564]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05b      	beq.n	800431c <HAL_RCC_OscConfig+0x108>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d157      	bne.n	800431c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e2e1      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d106      	bne.n	8004288 <HAL_RCC_OscConfig+0x74>
 800427a:	4b85      	ldr	r3, [pc, #532]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a84      	ldr	r2, [pc, #528]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e01d      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7f      	ldr	r3, [pc, #508]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7e      	ldr	r2, [pc, #504]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b7c      	ldr	r3, [pc, #496]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 80042ac:	4b78      	ldr	r3, [pc, #480]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a77      	ldr	r2, [pc, #476]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	4b75      	ldr	r3, [pc, #468]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a74      	ldr	r2, [pc, #464]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fc ff9e 	bl	800120c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fc ff9a 	bl	800120c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	@ 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e2a6      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0xc0>
 80042f2:	e014      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fc ff8a 	bl	800120c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fc ff86 	bl	800120c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e292      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430e:	4b60      	ldr	r3, [pc, #384]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0xe8>
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d075      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b59      	ldr	r3, [pc, #356]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4b56      	ldr	r3, [pc, #344]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d102      	bne.n	800434a <HAL_RCC_OscConfig+0x136>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d002      	beq.n	8004350 <HAL_RCC_OscConfig+0x13c>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11f      	bne.n	8004390 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004350:	4b4f      	ldr	r3, [pc, #316]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_OscConfig+0x154>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e265      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	4946      	ldr	r1, [pc, #280]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800437c:	4b45      	ldr	r3, [pc, #276]	@ (8004494 <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc fef7 	bl	8001174 <HAL_InitTick>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d043      	beq.n	8004414 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e251      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b3d      	ldr	r3, [pc, #244]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3c      	ldr	r2, [pc, #240]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fc ff32 	bl	800120c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fc ff2e 	bl	800120c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e23a      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043be:	4b34      	ldr	r3, [pc, #208]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	492d      	ldr	r1, [pc, #180]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 80043de:	e01a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fc ff0e 	bl	800120c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fc ff0a 	bl	800120c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e216      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004406:	4b22      	ldr	r3, [pc, #136]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1e0>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d041      	beq.n	80044a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01c      	beq.n	8004464 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b19      	ldr	r3, [pc, #100]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004430:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fc fee7 	bl	800120c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fc fee3 	bl	800120c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1ef      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ef      	beq.n	8004442 <HAL_RCC_OscConfig+0x22e>
 8004462:	e020      	b.n	80044a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <HAL_RCC_OscConfig+0x27c>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fc feca 	bl	800120c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800447a:	e00d      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fc fec6 	bl	800120c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d906      	bls.n	8004498 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1d2      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004498:	4b8c      	ldr	r3, [pc, #560]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ea      	bne.n	800447c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a6 	beq.w	8004600 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044b8:	4b84      	ldr	r3, [pc, #528]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2b4>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x2b6>
 80044c8:	2300      	movs	r3, #0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b7f      	ldr	r3, [pc, #508]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	4a7e      	ldr	r2, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044da:	4b7c      	ldr	r3, [pc, #496]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e6:	2301      	movs	r3, #1
 80044e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ea:	4b79      	ldr	r3, [pc, #484]	@ (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f6:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	@ (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004502:	f7fc fe83 	bl	800120c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fc fe7f 	bl	800120c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e18b      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451c:	4b6c      	ldr	r3, [pc, #432]	@ (80046d0 <HAL_RCC_OscConfig+0x4bc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <HAL_RCC_OscConfig+0x32e>
 8004530:	4b66      	ldr	r3, [pc, #408]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	4a65      	ldr	r2, [pc, #404]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004540:	e024      	b.n	800458c <HAL_RCC_OscConfig+0x378>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d110      	bne.n	800456c <HAL_RCC_OscConfig+0x358>
 800454a:	4b60      	ldr	r3, [pc, #384]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004550:	4a5e      	ldr	r2, [pc, #376]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f043 0304 	orr.w	r3, r3, #4
 8004556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800455a:	4b5c      	ldr	r3, [pc, #368]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004560:	4a5a      	ldr	r2, [pc, #360]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800456a:	e00f      	b.n	800458c <HAL_RCC_OscConfig+0x378>
 800456c:	4b57      	ldr	r3, [pc, #348]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	4a56      	ldr	r2, [pc, #344]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800457c:	4b53      	ldr	r3, [pc, #332]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	4a52      	ldr	r2, [pc, #328]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d016      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fc fe3a 	bl	800120c <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fc fe36 	bl	800120c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e140      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b2:	4b46      	ldr	r3, [pc, #280]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ed      	beq.n	800459c <HAL_RCC_OscConfig+0x388>
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fc fe23 	bl	800120c <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fc fe1f 	bl	800120c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e129      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e0:	4b3a      	ldr	r3, [pc, #232]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1ed      	bne.n	80045ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b35      	ldr	r3, [pc, #212]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d03c      	beq.n	8004686 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01c      	beq.n	800464e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004614:	4b2d      	ldr	r3, [pc, #180]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800461a:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fc fdf2 	bl	800120c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800462c:	f7fc fdee 	bl	800120c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0fa      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800463e:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <HAL_RCC_OscConfig+0x418>
 800464c:	e01b      	b.n	8004686 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464e:	4b1f      	ldr	r3, [pc, #124]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004654:	4a1d      	ldr	r2, [pc, #116]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fc fdd5 	bl	800120c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004666:	f7fc fdd1 	bl	800120c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0dd      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004678:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 800467a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ef      	bne.n	8004666 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80d1 	beq.w	8004832 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004690:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b0c      	cmp	r3, #12
 800469a:	f000 808b 	beq.w	80047b4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d15e      	bne.n	8004764 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a08      	ldr	r2, [pc, #32]	@ (80046cc <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fc fdab 	bl	800120c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b8:	e00c      	b.n	80046d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fc fda7 	bl	800120c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d905      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0b3      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	4b59      	ldr	r3, [pc, #356]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ec      	bne.n	80046ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e0:	4b56      	ldr	r3, [pc, #344]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	4b56      	ldr	r3, [pc, #344]	@ (8004840 <HAL_RCC_OscConfig+0x62c>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6a11      	ldr	r1, [r2, #32]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046f0:	3a01      	subs	r2, #1
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	4311      	orrs	r1, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046fa:	0212      	lsls	r2, r2, #8
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004702:	0852      	lsrs	r2, r2, #1
 8004704:	3a01      	subs	r2, #1
 8004706:	0552      	lsls	r2, r2, #21
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0652      	lsls	r2, r2, #25
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800471a:	06d2      	lsls	r2, r2, #27
 800471c:	430a      	orrs	r2, r1
 800471e:	4947      	ldr	r1, [pc, #284]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004720:	4313      	orrs	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004724:	4b45      	ldr	r3, [pc, #276]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a44      	ldr	r2, [pc, #272]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800472e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004730:	4b42      	ldr	r3, [pc, #264]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a41      	ldr	r2, [pc, #260]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fc fd66 	bl	800120c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fc fd62 	bl	800120c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e06e      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b39      	ldr	r3, [pc, #228]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x530>
 8004762:	e066      	b.n	8004832 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4b35      	ldr	r3, [pc, #212]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a34      	ldr	r2, [pc, #208]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004770:	4b32      	ldr	r3, [pc, #200]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a31      	ldr	r2, [pc, #196]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800477c:	4b2f      	ldr	r3, [pc, #188]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a2e      	ldr	r2, [pc, #184]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 8004782:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fc fd3e 	bl	800120c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fc fd3a 	bl	800120c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e046      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a6:	4b25      	ldr	r3, [pc, #148]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x580>
 80047b2:	e03e      	b.n	8004832 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e039      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047c0:	4b1e      	ldr	r3, [pc, #120]	@ (800483c <HAL_RCC_OscConfig+0x628>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 0203 	and.w	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d12c      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	3b01      	subs	r3, #1
 80047e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d123      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d11b      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d113      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d109      	bne.n	800482e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	019f800c 	.word	0x019f800c

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e11e      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b91      	ldr	r3, [pc, #580]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d910      	bls.n	800488c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b8e      	ldr	r3, [pc, #568]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 020f 	bic.w	r2, r3, #15
 8004872:	498c      	ldr	r1, [pc, #560]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b8a      	ldr	r3, [pc, #552]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e106      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d073      	beq.n	8004980 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d129      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a0:	4b81      	ldr	r3, [pc, #516]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0f4      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048b0:	f000 f99e 	bl	8004bf0 <RCC_GetSysClockFreqFromPLLSource>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4a7c      	ldr	r2, [pc, #496]	@ (8004aac <HAL_RCC_ClockConfig+0x268>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d93f      	bls.n	800493e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048be:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d033      	beq.n	800493e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d12f      	bne.n	800493e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048de:	4b72      	ldr	r3, [pc, #456]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048e6:	4a70      	ldr	r2, [pc, #448]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e024      	b.n	800493e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d107      	bne.n	800490c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048fc:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0c6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	4b66      	ldr	r3, [pc, #408]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0be      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800491c:	f000 f8ce 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a61      	ldr	r2, [pc, #388]	@ (8004aac <HAL_RCC_ClockConfig+0x268>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d909      	bls.n	800493e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800492a:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004932:	4a5d      	ldr	r2, [pc, #372]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004938:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b5a      	ldr	r3, [pc, #360]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4957      	ldr	r1, [pc, #348]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004950:	f7fc fc5c 	bl	800120c <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fc58 	bl	800120c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e095      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d023      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004998:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a42      	ldr	r2, [pc, #264]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 800499e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049b0:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049b8:	4a3b      	ldr	r2, [pc, #236]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b39      	ldr	r3, [pc, #228]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4936      	ldr	r1, [pc, #216]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b80      	cmp	r3, #128	@ 0x80
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049da:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4a32      	ldr	r2, [pc, #200]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 80049e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e6:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d21d      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f4:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 020f 	bic.w	r2, r3, #15
 80049fc:	4929      	ldr	r1, [pc, #164]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a04:	f7fc fc02 	bl	800120c <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fc fbfe 	bl	800120c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e03b      	b.n	8004a9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	@ (8004aa4 <HAL_RCC_ClockConfig+0x260>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1ed      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4917      	ldr	r1, [pc, #92]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5a:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	490f      	ldr	r1, [pc, #60]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6e:	f000 f825 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <HAL_RCC_ClockConfig+0x264>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	490c      	ldr	r1, [pc, #48]	@ (8004ab0 <HAL_RCC_ClockConfig+0x26c>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <HAL_RCC_ClockConfig+0x270>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <HAL_RCC_ClockConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fb6e 	bl	8001174 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	04c4b400 	.word	0x04c4b400
 8004ab0:	0800b6c0 	.word	0x0800b6c0
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ace:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e047      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ad4:	4b27      	ldr	r3, [pc, #156]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ae0:	4b26      	ldr	r3, [pc, #152]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e03e      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ae6:	4b23      	ldr	r3, [pc, #140]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d136      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004af2:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	3301      	adds	r3, #1
 8004b08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b10:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1a:	68d2      	ldr	r2, [r2, #12]
 8004b1c:	0a12      	lsrs	r2, r2, #8
 8004b1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	617b      	str	r3, [r7, #20]
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b2a:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	0a12      	lsrs	r2, r2, #8
 8004b38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]
      break;
 8004b42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0e5b      	lsrs	r3, r3, #25
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e001      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b64:	693b      	ldr	r3, [r7, #16]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	007a1200 	.word	0x007a1200

08004b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b84:	4b03      	ldr	r3, [pc, #12]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000000 	.word	0x20000000

08004b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b9c:	f7ff fff0 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4904      	ldr	r1, [pc, #16]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	0800b6d0 	.word	0x0800b6d0

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bc8:	f7ff ffda 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4904      	ldr	r1, [pc, #16]	@ (8004bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800b6d0 	.word	0x0800b6d0

08004bf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d10c      	bne.n	8004c2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c14:	4a17      	ldr	r2, [pc, #92]	@ (8004c74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	4a14      	ldr	r2, [pc, #80]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c1e:	68d2      	ldr	r2, [r2, #12]
 8004c20:	0a12      	lsrs	r2, r2, #8
 8004c22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	617b      	str	r3, [r7, #20]
    break;
 8004c2c:	e00c      	b.n	8004c48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	4a0e      	ldr	r2, [pc, #56]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	0a12      	lsrs	r2, r2, #8
 8004c3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    break;
 8004c46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	0e5b      	lsrs	r3, r3, #25
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c62:	687b      	ldr	r3, [r7, #4]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40021000 	.word	0x40021000
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	00f42400 	.word	0x00f42400

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c84:	2300      	movs	r3, #0
 8004c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8098 	beq.w	8004dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	4b40      	ldr	r3, [pc, #256]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	4a3f      	ldr	r2, [pc, #252]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a39      	ldr	r2, [pc, #228]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cd2:	f7fc fa9b 	bl	800120c <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cd8:	e009      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fc fa97 	bl	800120c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d902      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	74fb      	strb	r3, [r7, #19]
        break;
 8004cec:	e005      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cee:	4b30      	ldr	r3, [pc, #192]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ef      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d159      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d00:	4b2a      	ldr	r3, [pc, #168]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01e      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d019      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d1c:	4b23      	ldr	r3, [pc, #140]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	4b20      	ldr	r3, [pc, #128]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d38:	4b1c      	ldr	r3, [pc, #112]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d48:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fa57 	bl	800120c <HAL_GetTick>
 8004d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d60:	e00b      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fc fa53 	bl	800120c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d902      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	74fb      	strb	r3, [r7, #19]
            break;
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ec      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	4903      	ldr	r1, [pc, #12]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004da4:	e008      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	74bb      	strb	r3, [r7, #18]
 8004daa:	e005      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db8:	7c7b      	ldrb	r3, [r7, #17]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbe:	4ba7      	ldr	r3, [pc, #668]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc2:	4aa6      	ldr	r2, [pc, #664]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	f023 0203 	bic.w	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	499d      	ldr	r1, [pc, #628]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df8:	4b98      	ldr	r3, [pc, #608]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfe:	f023 020c 	bic.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4995      	ldr	r1, [pc, #596]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e1a:	4b90      	ldr	r3, [pc, #576]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	498c      	ldr	r1, [pc, #560]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e3c:	4b87      	ldr	r3, [pc, #540]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	4984      	ldr	r1, [pc, #528]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	497b      	ldr	r1, [pc, #492]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e80:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	4973      	ldr	r1, [pc, #460]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	496a      	ldr	r1, [pc, #424]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ec4:	4b65      	ldr	r3, [pc, #404]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4962      	ldr	r1, [pc, #392]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	4959      	ldr	r1, [pc, #356]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f08:	4b54      	ldr	r3, [pc, #336]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	4951      	ldr	r1, [pc, #324]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	4948      	ldr	r1, [pc, #288]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f4c:	4b43      	ldr	r3, [pc, #268]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	4940      	ldr	r1, [pc, #256]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a3a      	ldr	r2, [pc, #232]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f84:	4b35      	ldr	r3, [pc, #212]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	4932      	ldr	r1, [pc, #200]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d015      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fbc:	4b27      	ldr	r3, [pc, #156]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	4924      	ldr	r1, [pc, #144]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d015      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff4:	4b19      	ldr	r3, [pc, #100]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	4916      	ldr	r1, [pc, #88]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005012:	d105      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	4b11      	ldr	r3, [pc, #68]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a10      	ldr	r2, [pc, #64]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800501e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d019      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800502c:	4b0b      	ldr	r3, [pc, #44]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005032:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	4908      	ldr	r1, [pc, #32]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800504a:	d109      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800504c:	4b03      	ldr	r3, [pc, #12]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a02      	ldr	r2, [pc, #8]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005056:	60d3      	str	r3, [r2, #12]
 8005058:	e002      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800506c:	4b29      	ldr	r3, [pc, #164]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	4926      	ldr	r1, [pc, #152]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800508c:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005096:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b2:	4918      	ldr	r1, [pc, #96]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c4:	4b13      	ldr	r3, [pc, #76]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	490a      	ldr	r1, [pc, #40]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050fa:	d105      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a04      	ldr	r2, [pc, #16]	@ (8005114 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005106:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005108:	7cbb      	ldrb	r3, [r7, #18]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40021000 	.word	0x40021000

08005118 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d066      	beq.n	80051f8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fdd6 	bl	8000cf0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	22ca      	movs	r2, #202	@ 0xca
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2253      	movs	r2, #83	@ 0x53
 800515a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f876 	bl	800524e <RTC_EnterInitMode>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d13a      	bne.n	80051e2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800517a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800517e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6999      	ldr	r1, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68d9      	ldr	r1, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	041a      	lsls	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f882 	bl	80052ba <RTC_ExitInitMode>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ff      	movs	r2, #255	@ 0xff
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0220 	bic.w	r2, r2, #32
 8005218:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800521a:	f7fb fff7 	bl	800120c <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005220:	e009      	b.n	8005236 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005222:	f7fb fff3 	bl	800120c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005230:	d901      	bls.n	8005236 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e007      	b.n	8005246 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ee      	beq.n	8005222 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d123      	bne.n	80052b0 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005276:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005278:	f7fb ffc8 	bl	800120c <HAL_GetTick>
 800527c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800527e:	e00d      	b.n	800529c <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005280:	f7fb ffc4 	bl	800120c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800528e:	d905      	bls.n	800529c <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2203      	movs	r2, #3
 8005298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <RTC_EnterInitMode+0x62>
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d1e7      	bne.n	8005280 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff8c 	bl	8005202 <HAL_RTC_WaitForSynchro>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d022      	beq.n	8005336 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2203      	movs	r2, #3
 80052f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e01b      	b.n	8005336 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0220 	bic.w	r2, r2, #32
 800530c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff77 	bl	8005202 <HAL_RTC_WaitForSynchro>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e042      	b.n	80053d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fe6b 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2224      	movs	r2, #36	@ 0x24
 800536e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f82c 	bl	80053e0 <UART_SetConfig>
 8005388:	4603      	mov	r3, r0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e022      	b.n	80053d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb1c 	bl	80059d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fba3 	bl	8005b1c <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e4:	b08c      	sub	sp, #48	@ 0x30
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4313      	orrs	r3, r2
 8005406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4baa      	ldr	r3, [pc, #680]	@ (80056b8 <UART_SetConfig+0x2d8>)
 8005410:	4013      	ands	r3, r2
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005418:	430b      	orrs	r3, r1
 800541a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a9f      	ldr	r2, [pc, #636]	@ (80056bc <UART_SetConfig+0x2dc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005448:	4313      	orrs	r3, r2
 800544a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005456:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005460:	430b      	orrs	r3, r1
 8005462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	f023 010f 	bic.w	r1, r3, #15
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a90      	ldr	r2, [pc, #576]	@ (80056c0 <UART_SetConfig+0x2e0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d125      	bne.n	80054d0 <UART_SetConfig+0xf0>
 8005484:	4b8f      	ldr	r3, [pc, #572]	@ (80056c4 <UART_SetConfig+0x2e4>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d81a      	bhi.n	80054c8 <UART_SetConfig+0xe8>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <UART_SetConfig+0xb8>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054b9 	.word	0x080054b9
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054c1 	.word	0x080054c1
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ae:	e116      	b.n	80056de <UART_SetConfig+0x2fe>
 80054b0:	2302      	movs	r3, #2
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b6:	e112      	b.n	80056de <UART_SetConfig+0x2fe>
 80054b8:	2304      	movs	r3, #4
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054be:	e10e      	b.n	80056de <UART_SetConfig+0x2fe>
 80054c0:	2308      	movs	r3, #8
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	e10a      	b.n	80056de <UART_SetConfig+0x2fe>
 80054c8:	2310      	movs	r3, #16
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e106      	b.n	80056de <UART_SetConfig+0x2fe>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7c      	ldr	r2, [pc, #496]	@ (80056c8 <UART_SetConfig+0x2e8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d138      	bne.n	800554c <UART_SetConfig+0x16c>
 80054da:	4b7a      	ldr	r3, [pc, #488]	@ (80056c4 <UART_SetConfig+0x2e4>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d82d      	bhi.n	8005544 <UART_SetConfig+0x164>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x110>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005545 	.word	0x08005545
 80054f8:	08005545 	.word	0x08005545
 80054fc:	08005545 	.word	0x08005545
 8005500:	08005535 	.word	0x08005535
 8005504:	08005545 	.word	0x08005545
 8005508:	08005545 	.word	0x08005545
 800550c:	08005545 	.word	0x08005545
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005545 	.word	0x08005545
 8005518:	08005545 	.word	0x08005545
 800551c:	08005545 	.word	0x08005545
 8005520:	0800553d 	.word	0x0800553d
 8005524:	2300      	movs	r3, #0
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e0d8      	b.n	80056de <UART_SetConfig+0x2fe>
 800552c:	2302      	movs	r3, #2
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e0d4      	b.n	80056de <UART_SetConfig+0x2fe>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e0d0      	b.n	80056de <UART_SetConfig+0x2fe>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e0cc      	b.n	80056de <UART_SetConfig+0x2fe>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e0c8      	b.n	80056de <UART_SetConfig+0x2fe>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5e      	ldr	r2, [pc, #376]	@ (80056cc <UART_SetConfig+0x2ec>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d125      	bne.n	80055a2 <UART_SetConfig+0x1c2>
 8005556:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <UART_SetConfig+0x2e4>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005560:	2b30      	cmp	r3, #48	@ 0x30
 8005562:	d016      	beq.n	8005592 <UART_SetConfig+0x1b2>
 8005564:	2b30      	cmp	r3, #48	@ 0x30
 8005566:	d818      	bhi.n	800559a <UART_SetConfig+0x1ba>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d00a      	beq.n	8005582 <UART_SetConfig+0x1a2>
 800556c:	2b20      	cmp	r3, #32
 800556e:	d814      	bhi.n	800559a <UART_SetConfig+0x1ba>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <UART_SetConfig+0x19a>
 8005574:	2b10      	cmp	r3, #16
 8005576:	d008      	beq.n	800558a <UART_SetConfig+0x1aa>
 8005578:	e00f      	b.n	800559a <UART_SetConfig+0x1ba>
 800557a:	2300      	movs	r3, #0
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005580:	e0ad      	b.n	80056de <UART_SetConfig+0x2fe>
 8005582:	2302      	movs	r3, #2
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005588:	e0a9      	b.n	80056de <UART_SetConfig+0x2fe>
 800558a:	2304      	movs	r3, #4
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005590:	e0a5      	b.n	80056de <UART_SetConfig+0x2fe>
 8005592:	2308      	movs	r3, #8
 8005594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005598:	e0a1      	b.n	80056de <UART_SetConfig+0x2fe>
 800559a:	2310      	movs	r3, #16
 800559c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a0:	e09d      	b.n	80056de <UART_SetConfig+0x2fe>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a4a      	ldr	r2, [pc, #296]	@ (80056d0 <UART_SetConfig+0x2f0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d125      	bne.n	80055f8 <UART_SetConfig+0x218>
 80055ac:	4b45      	ldr	r3, [pc, #276]	@ (80056c4 <UART_SetConfig+0x2e4>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055b8:	d016      	beq.n	80055e8 <UART_SetConfig+0x208>
 80055ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80055bc:	d818      	bhi.n	80055f0 <UART_SetConfig+0x210>
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d00a      	beq.n	80055d8 <UART_SetConfig+0x1f8>
 80055c2:	2b80      	cmp	r3, #128	@ 0x80
 80055c4:	d814      	bhi.n	80055f0 <UART_SetConfig+0x210>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <UART_SetConfig+0x1f0>
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d008      	beq.n	80055e0 <UART_SetConfig+0x200>
 80055ce:	e00f      	b.n	80055f0 <UART_SetConfig+0x210>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e082      	b.n	80056de <UART_SetConfig+0x2fe>
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e07e      	b.n	80056de <UART_SetConfig+0x2fe>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e07a      	b.n	80056de <UART_SetConfig+0x2fe>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e076      	b.n	80056de <UART_SetConfig+0x2fe>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e072      	b.n	80056de <UART_SetConfig+0x2fe>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a35      	ldr	r2, [pc, #212]	@ (80056d4 <UART_SetConfig+0x2f4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d12a      	bne.n	8005658 <UART_SetConfig+0x278>
 8005602:	4b30      	ldr	r3, [pc, #192]	@ (80056c4 <UART_SetConfig+0x2e4>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005610:	d01a      	beq.n	8005648 <UART_SetConfig+0x268>
 8005612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005616:	d81b      	bhi.n	8005650 <UART_SetConfig+0x270>
 8005618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561c:	d00c      	beq.n	8005638 <UART_SetConfig+0x258>
 800561e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005622:	d815      	bhi.n	8005650 <UART_SetConfig+0x270>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <UART_SetConfig+0x250>
 8005628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562c:	d008      	beq.n	8005640 <UART_SetConfig+0x260>
 800562e:	e00f      	b.n	8005650 <UART_SetConfig+0x270>
 8005630:	2300      	movs	r3, #0
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e052      	b.n	80056de <UART_SetConfig+0x2fe>
 8005638:	2302      	movs	r3, #2
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e04e      	b.n	80056de <UART_SetConfig+0x2fe>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005646:	e04a      	b.n	80056de <UART_SetConfig+0x2fe>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e046      	b.n	80056de <UART_SetConfig+0x2fe>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e042      	b.n	80056de <UART_SetConfig+0x2fe>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <UART_SetConfig+0x2dc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d13a      	bne.n	80056d8 <UART_SetConfig+0x2f8>
 8005662:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <UART_SetConfig+0x2e4>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005668:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800566c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005670:	d01a      	beq.n	80056a8 <UART_SetConfig+0x2c8>
 8005672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0x2d0>
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567c:	d00c      	beq.n	8005698 <UART_SetConfig+0x2b8>
 800567e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005682:	d815      	bhi.n	80056b0 <UART_SetConfig+0x2d0>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <UART_SetConfig+0x2b0>
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568c:	d008      	beq.n	80056a0 <UART_SetConfig+0x2c0>
 800568e:	e00f      	b.n	80056b0 <UART_SetConfig+0x2d0>
 8005690:	2300      	movs	r3, #0
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e022      	b.n	80056de <UART_SetConfig+0x2fe>
 8005698:	2302      	movs	r3, #2
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569e:	e01e      	b.n	80056de <UART_SetConfig+0x2fe>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a6:	e01a      	b.n	80056de <UART_SetConfig+0x2fe>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ae:	e016      	b.n	80056de <UART_SetConfig+0x2fe>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b6:	e012      	b.n	80056de <UART_SetConfig+0x2fe>
 80056b8:	cfff69f3 	.word	0xcfff69f3
 80056bc:	40008000 	.word	0x40008000
 80056c0:	40013800 	.word	0x40013800
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004800 	.word	0x40004800
 80056d0:	40004c00 	.word	0x40004c00
 80056d4:	40005000 	.word	0x40005000
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4aae      	ldr	r2, [pc, #696]	@ (800599c <UART_SetConfig+0x5bc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	f040 8097 	bne.w	8005818 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d823      	bhi.n	800573a <UART_SetConfig+0x35a>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <UART_SetConfig+0x318>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	0800573b 	.word	0x0800573b
 8005700:	08005725 	.word	0x08005725
 8005704:	0800573b 	.word	0x0800573b
 8005708:	0800572b 	.word	0x0800572b
 800570c:	0800573b 	.word	0x0800573b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800573b 	.word	0x0800573b
 8005718:	08005733 	.word	0x08005733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800571c:	f7ff fa3c 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8005720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005722:	e010      	b.n	8005746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005724:	4b9e      	ldr	r3, [pc, #632]	@ (80059a0 <UART_SetConfig+0x5c0>)
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572a:	f7ff f9c7 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800572e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005730:	e009      	b.n	8005746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005738:	e005      	b.n	8005746 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8130 	beq.w	80059ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	4a94      	ldr	r2, [pc, #592]	@ (80059a4 <UART_SetConfig+0x5c4>)
 8005754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005758:	461a      	mov	r2, r3
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005760:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	429a      	cmp	r2, r3
 8005770:	d305      	bcc.n	800577e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	429a      	cmp	r2, r3
 800577c:	d903      	bls.n	8005786 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005784:	e113      	b.n	80059ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2200      	movs	r2, #0
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	60fa      	str	r2, [r7, #12]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	4a84      	ldr	r2, [pc, #528]	@ (80059a4 <UART_SetConfig+0x5c4>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	b29b      	uxth	r3, r3
 800579a:	2200      	movs	r2, #0
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057a8:	f7fa fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	020b      	lsls	r3, r1, #8
 80057be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057c2:	0202      	lsls	r2, r0, #8
 80057c4:	6979      	ldr	r1, [r7, #20]
 80057c6:	6849      	ldr	r1, [r1, #4]
 80057c8:	0849      	lsrs	r1, r1, #1
 80057ca:	2000      	movs	r0, #0
 80057cc:	460c      	mov	r4, r1
 80057ce:	4605      	mov	r5, r0
 80057d0:	eb12 0804 	adds.w	r8, r2, r4
 80057d4:	eb43 0905 	adc.w	r9, r3, r5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	469a      	mov	sl, r3
 80057e0:	4693      	mov	fp, r2
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fa fd69 	bl	80002c0 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4613      	mov	r3, r2
 80057f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057fc:	d308      	bcc.n	8005810 <UART_SetConfig+0x430>
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005804:	d204      	bcs.n	8005810 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	e0ce      	b.n	80059ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005816:	e0ca      	b.n	80059ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005820:	d166      	bne.n	80058f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005826:	2b08      	cmp	r3, #8
 8005828:	d827      	bhi.n	800587a <UART_SetConfig+0x49a>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <UART_SetConfig+0x450>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005855 	.word	0x08005855
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005865 	.word	0x08005865
 800583c:	0800587b 	.word	0x0800587b
 8005840:	0800586b 	.word	0x0800586b
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
 8005850:	08005873 	.word	0x08005873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7ff f9a0 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8005858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800585a:	e014      	b.n	8005886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7ff f9b2 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8005860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005862:	e010      	b.n	8005886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005864:	4b4e      	ldr	r3, [pc, #312]	@ (80059a0 <UART_SetConfig+0x5c0>)
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005868:	e00d      	b.n	8005886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586a:	f7ff f927 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800586e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005870:	e009      	b.n	8005886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005878:	e005      	b.n	8005886 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8090 	beq.w	80059ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	4a44      	ldr	r2, [pc, #272]	@ (80059a4 <UART_SetConfig+0x5c4>)
 8005894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005898:	461a      	mov	r2, r3
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	441a      	add	r2, r3
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d916      	bls.n	80058e8 <UART_SetConfig+0x508>
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c0:	d212      	bcs.n	80058e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f023 030f 	bic.w	r3, r3, #15
 80058ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	8bfb      	ldrh	r3, [r7, #30]
 80058da:	4313      	orrs	r3, r2
 80058dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	8bfa      	ldrh	r2, [r7, #30]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e062      	b.n	80059ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058ee:	e05e      	b.n	80059ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d828      	bhi.n	800594a <UART_SetConfig+0x56a>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <UART_SetConfig+0x520>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005925 	.word	0x08005925
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005935 	.word	0x08005935
 800590c:	0800594b 	.word	0x0800594b
 8005910:	0800593b 	.word	0x0800593b
 8005914:	0800594b 	.word	0x0800594b
 8005918:	0800594b 	.word	0x0800594b
 800591c:	0800594b 	.word	0x0800594b
 8005920:	08005943 	.word	0x08005943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005924:	f7ff f938 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800592a:	e014      	b.n	8005956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800592c:	f7ff f94a 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005934:	4b1a      	ldr	r3, [pc, #104]	@ (80059a0 <UART_SetConfig+0x5c0>)
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005938:	e00d      	b.n	8005956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593a:	f7ff f8bf 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005948:	e005      	b.n	8005956 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005954:	bf00      	nop
    }

    if (pclk != 0U)
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d028      	beq.n	80059ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	4a10      	ldr	r2, [pc, #64]	@ (80059a4 <UART_SetConfig+0x5c4>)
 8005962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005966:	461a      	mov	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	fbb3 f2f2 	udiv	r2, r3, r2
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d910      	bls.n	80059a8 <UART_SetConfig+0x5c8>
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d20c      	bcs.n	80059a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b29a      	uxth	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e009      	b.n	80059ae <UART_SetConfig+0x5ce>
 800599a:	bf00      	nop
 800599c:	40008000 	.word	0x40008000
 80059a0:	00f42400 	.word	0x00f42400
 80059a4:	0800b6e8 	.word	0x0800b6e8
      }
      else
      {
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80059ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3730      	adds	r7, #48	@ 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01a      	beq.n	8005aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad6:	d10a      	bne.n	8005aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b2c:	f7fb fb6e 	bl	800120c <HAL_GetTick>
 8005b30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d10e      	bne.n	8005b5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f82f 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e025      	b.n	8005baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d10e      	bne.n	8005b8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f819 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e00f      	b.n	8005baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b09c      	sub	sp, #112	@ 0x70
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	e0a9      	b.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bca:	f000 80a5 	beq.w	8005d18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fb fb1d 	bl	800120c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d140      	bne.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c04:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e6      	bne.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c36:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e069      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d051      	beq.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c82:	d149      	bne.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ce0:	623a      	str	r2, [r7, #32]
 8005ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e010      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69da      	ldr	r2, [r3, #28]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4013      	ands	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	f43f af46 	beq.w	8005bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3770      	adds	r7, #112	@ 0x70
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e027      	b.n	8005da8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2224      	movs	r2, #36	@ 0x24
 8005d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e02d      	b.n	8005e28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f84f 	bl	8005eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e02d      	b.n	8005ea4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	@ 0x24
 8005e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f811 	bl	8005eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ecc:	e031      	b.n	8005f32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0e5b      	lsrs	r3, r3, #25
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	0f5b      	lsrs	r3, r3, #29
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	7b3a      	ldrb	r2, [r7, #12]
 8005efa:	4911      	ldr	r1, [pc, #68]	@ (8005f40 <UARTEx_SetNbDataToProcess+0x94>)
 8005efc:	5c8a      	ldrb	r2, [r1, r2]
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f02:	7b3a      	ldrb	r2, [r7, #12]
 8005f04:	490f      	ldr	r1, [pc, #60]	@ (8005f44 <UARTEx_SetNbDataToProcess+0x98>)
 8005f06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	7b7a      	ldrb	r2, [r7, #13]
 8005f18:	4909      	ldr	r1, [pc, #36]	@ (8005f40 <UARTEx_SetNbDataToProcess+0x94>)
 8005f1a:	5c8a      	ldrb	r2, [r1, r2]
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f20:	7b7a      	ldrb	r2, [r7, #13]
 8005f22:	4908      	ldr	r1, [pc, #32]	@ (8005f44 <UARTEx_SetNbDataToProcess+0x98>)
 8005f24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f32:	bf00      	nop
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	0800b700 	.word	0x0800b700
 8005f44:	0800b708 	.word	0x0800b708

08005f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f58:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f7e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4013      	ands	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fac:	b084      	sub	sp, #16
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	f107 0014 	add.w	r0, r7, #20
 8005fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	b004      	add	sp, #16
 8005fec:	4770      	bx	lr
	...

08005ff0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b09d      	sub	sp, #116	@ 0x74
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d81f      	bhi.n	8006062 <USB_ActivateEndpoint+0x72>
 8006022:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <USB_ActivateEndpoint+0x38>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006039 	.word	0x08006039
 800602c:	08006055 	.word	0x08006055
 8006030:	0800606b 	.word	0x0800606b
 8006034:	08006047 	.word	0x08006047
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006038:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800603c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006040:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006044:	e012      	b.n	800606c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006046:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800604a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800604e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006052:	e00b      	b.n	800606c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006054:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800605c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006060:	e004      	b.n	800606c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006068:	e000      	b.n	800606c <USB_ActivateEndpoint+0x7c>
      break;
 800606a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	b21b      	sxth	r3, r3
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a6:	b21a      	sxth	r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	4313      	orrs	r3, r2
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	7b1b      	ldrb	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8149 	bne.w	8006374 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 8084 	beq.w	80061f4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	4413      	add	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	00da      	lsls	r2, r3, #3
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	88db      	ldrh	r3, [r3, #6]
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	b29b      	uxth	r3, r3
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	827b      	strh	r3, [r7, #18]
 800612e:	8a7b      	ldrh	r3, [r7, #18]
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <USB_ActivateEndpoint+0x180>
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	823b      	strh	r3, [r7, #16]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	8a3b      	ldrh	r3, [r7, #16]
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006168:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	78db      	ldrb	r3, [r3, #3]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d020      	beq.n	80061ba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618e:	81bb      	strh	r3, [r7, #12]
 8006190:	89bb      	ldrh	r3, [r7, #12]
 8006192:	f083 0320 	eor.w	r3, r3, #32
 8006196:	81bb      	strh	r3, [r7, #12]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	89bb      	ldrh	r3, [r7, #12]
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]
 80061b8:	e2a6      	b.n	8006708 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d0:	81fb      	strh	r3, [r7, #14]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	89fb      	ldrh	r3, [r7, #14]
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]
 80061f2:	e289      	b.n	8006708 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	4413      	add	r3, r2
 8006206:	633b      	str	r3, [r7, #48]	@ 0x30
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	00da      	lsls	r2, r3, #3
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	4413      	add	r3, r2
 8006212:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	88db      	ldrh	r3, [r3, #6]
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	b29b      	uxth	r3, r3
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006226:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	4413      	add	r3, r2
 800623a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	00da      	lsls	r2, r3, #3
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	4413      	add	r3, r2
 8006246:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b3e      	cmp	r3, #62	@ 0x3e
 8006252:	d918      	bls.n	8006286 <USB_ActivateEndpoint+0x296>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <USB_ActivateEndpoint+0x27e>
 8006268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800626a:	3b01      	subs	r3, #1
 800626c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800626e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e029      	b.n	80062da <USB_ActivateEndpoint+0x2ea>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d112      	bne.n	80062b4 <USB_ActivateEndpoint+0x2c4>
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006298:	b29a      	uxth	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e012      	b.n	80062da <USB_ActivateEndpoint+0x2ea>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <USB_ActivateEndpoint+0x2de>
 80062c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ca:	3301      	adds	r3, #1
 80062cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01b      	beq.n	800632a <USB_ActivateEndpoint+0x33a>
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006308:	843b      	strh	r3, [r7, #32]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	441a      	add	r2, r3
 8006314:	8c3b      	ldrh	r3, [r7, #32]
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800633c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006340:	83fb      	strh	r3, [r7, #30]
 8006342:	8bfb      	ldrh	r3, [r7, #30]
 8006344:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006348:	83fb      	strh	r3, [r7, #30]
 800634a:	8bfb      	ldrh	r3, [r7, #30]
 800634c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006350:	83fb      	strh	r3, [r7, #30]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	8bfb      	ldrh	r3, [r7, #30]
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800636a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]
 8006372:	e1c9      	b.n	8006708 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	78db      	ldrb	r3, [r3, #3]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d11e      	bne.n	80063ba <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800638e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006392:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80063a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	8013      	strh	r3, [r2, #0]
 80063b8:	e01d      	b.n	80063f6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80063e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006406:	4413      	add	r3, r2
 8006408:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006412:	4413      	add	r3, r2
 8006414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	891b      	ldrh	r3, [r3, #8]
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29b      	uxth	r3, r3
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	657b      	str	r3, [r7, #84]	@ 0x54
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643a:	4413      	add	r3, r2
 800643c:	657b      	str	r3, [r7, #84]	@ 0x54
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	00da      	lsls	r2, r3, #3
 8006444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006446:	4413      	add	r3, r2
 8006448:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800644c:	653b      	str	r3, [r7, #80]	@ 0x50
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	895b      	ldrh	r3, [r3, #10]
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	b29b      	uxth	r3, r3
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800645c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 8093 	bne.w	800658e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006478:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800647c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <USB_ActivateEndpoint+0x4cc>
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80064ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <USB_ActivateEndpoint+0x51c>
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	441a      	add	r2, r3
 80064f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006504:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006508:	b29b      	uxth	r3, r3
 800650a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006524:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006526:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800652a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800652c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800652e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006532:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800656a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
 800658c:	e0bc      	b.n	8006708 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800659e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80065a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01d      	beq.n	80065e6 <USB_ActivateEndpoint+0x5f6>
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80065f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01d      	beq.n	800663e <USB_ActivateEndpoint+0x64e>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	441a      	add	r2, r3
 8006626:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006636:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	78db      	ldrb	r3, [r3, #3]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d024      	beq.n	8006690 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800665c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006660:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006664:	f083 0320 	eor.w	r3, r3, #32
 8006668:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
 800668e:	e01d      	b.n	80066cc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006708:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800670c:	4618      	mov	r0, r3
 800670e:	3774      	adds	r7, #116	@ 0x74
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006718:	b480      	push	{r7}
 800671a:	b08d      	sub	sp, #52	@ 0x34
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	7b1b      	ldrb	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f040 808e 	bne.w	8006848 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d044      	beq.n	80067be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	81bb      	strh	r3, [r7, #12]
 8006742:	89bb      	ldrh	r3, [r7, #12]
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <USB_DeactivateEndpoint+0x6c>
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	817b      	strh	r3, [r7, #10]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800677c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006780:	b29b      	uxth	r3, r3
 8006782:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679a:	813b      	strh	r3, [r7, #8]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	893b      	ldrh	r3, [r7, #8]
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]
 80067bc:	e192      	b.n	8006ae4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	827b      	strh	r3, [r7, #18]
 80067cc:	8a7b      	ldrh	r3, [r7, #18]
 80067ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <USB_DeactivateEndpoint+0xf6>
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ec:	823b      	strh	r3, [r7, #16]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	8a3b      	ldrh	r3, [r7, #16]
 80067fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006824:	81fb      	strh	r3, [r7, #14]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800683a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800683e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006842:	b29b      	uxth	r3, r3
 8006844:	8013      	strh	r3, [r2, #0]
 8006846:	e14d      	b.n	8006ae4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 80a5 	bne.w	800699c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	843b      	strh	r3, [r7, #32]
 8006860:	8c3b      	ldrh	r3, [r7, #32]
 8006862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_DeactivateEndpoint+0x18a>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	83fb      	strh	r3, [r7, #30]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8bfb      	ldrh	r3, [r7, #30]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	83bb      	strh	r3, [r7, #28]
 80068b0:	8bbb      	ldrh	r3, [r7, #28]
 80068b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01b      	beq.n	80068f2 <USB_DeactivateEndpoint+0x1da>
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d0:	837b      	strh	r3, [r7, #26]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	441a      	add	r2, r3
 80068dc:	8b7b      	ldrh	r3, [r7, #26]
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006908:	833b      	strh	r3, [r7, #24]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	8b3b      	ldrh	r3, [r7, #24]
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800693c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006940:	82fb      	strh	r3, [r7, #22]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	8afb      	ldrh	r3, [r7, #22]
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006978:	82bb      	strh	r3, [r7, #20]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	8abb      	ldrh	r3, [r7, #20]
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
 800699a:	e0a3      	b.n	8006ae4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80069aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <USB_DeactivateEndpoint+0x2d4>
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80069fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <USB_DeactivateEndpoint+0x324>
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	441a      	add	r2, r3
 8006a26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a52:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	441a      	add	r2, r3
 8006a5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3734      	adds	r7, #52	@ 0x34
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b0c2      	sub	sp, #264	@ 0x108
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b00:	6018      	str	r0, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 867b 	bne.w	8007814 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d908      	bls.n	8006b4c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b4a:	e007      	b.n	8006b5c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	7b1b      	ldrb	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d13a      	bne.n	8006be2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6959      	ldr	r1, [r3, #20]
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	88da      	ldrh	r2, [r3, #6]
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	f001 fc1d 	bl	80083d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00da      	lsls	r2, r3, #3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	f000 bde3 	b.w	80077a8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	f040 843a 	bne.w	8007468 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a1a      	ldr	r2, [r3, #32]
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	f240 83b7 	bls.w	8007380 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a1a      	ldr	r2, [r3, #32]
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 81b3 	beq.w	800701a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d16d      	bne.n	8006dac <USB_EPStartXfer+0x2ba>
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	4413      	add	r3, r2
 8006cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00da      	lsls	r2, r3, #3
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d12:	d91c      	bls.n	8006d4e <USB_EPStartXfer+0x25c>
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <USB_EPStartXfer+0x242>
 8006d2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e053      	b.n	8006df6 <USB_EPStartXfer+0x304>
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d112      	bne.n	8006d7c <USB_EPStartXfer+0x28a>
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e03c      	b.n	8006df6 <USB_EPStartXfer+0x304>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <USB_EPStartXfer+0x2aa>
 8006d92:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d96:	3301      	adds	r3, #1
 8006d98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e024      	b.n	8006df6 <USB_EPStartXfer+0x304>
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11c      	bne.n	8006df6 <USB_EPStartXfer+0x304>
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	4413      	add	r3, r2
 8006dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00da      	lsls	r2, r3, #3
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	f001 fad4 	bl	80083d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d90f      	bls.n	8006e84 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	1ad2      	subs	r2, r2, r3
 8006e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	621a      	str	r2, [r3, #32]
 8006e82:	e00e      	b.n	8006ea2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d16d      	bne.n	8006f8e <USB_EPStartXfer+0x49c>
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	00da      	lsls	r2, r3, #3
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ef4:	d91c      	bls.n	8006f30 <USB_EPStartXfer+0x43e>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USB_EPStartXfer+0x424>
 8006f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	e059      	b.n	8006fe4 <USB_EPStartXfer+0x4f2>
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d112      	bne.n	8006f5e <USB_EPStartXfer+0x46c>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e042      	b.n	8006fe4 <USB_EPStartXfer+0x4f2>
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <USB_EPStartXfer+0x48c>
 8006f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e02a      	b.n	8006fe4 <USB_EPStartXfer+0x4f2>
 8006f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d122      	bne.n	8006fe4 <USB_EPStartXfer+0x4f2>
 8006f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	623b      	str	r3, [r7, #32]
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	623b      	str	r3, [r7, #32]
 8006fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	00da      	lsls	r2, r3, #3
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	891b      	ldrh	r3, [r3, #8]
 8006ff0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6959      	ldr	r1, [r3, #20]
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	b29b      	uxth	r3, r3
 8007006:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800700a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800700e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	f001 f9dd 	bl	80083d2 <USB_WritePMA>
 8007018:	e3c6      	b.n	80077a8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d16d      	bne.n	8007106 <USB_EPStartXfer+0x614>
 800702a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007044:	b29b      	uxth	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800704a:	4413      	add	r3, r2
 800704c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00da      	lsls	r2, r3, #3
 800705c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705e:	4413      	add	r3, r2
 8007060:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706a:	2b3e      	cmp	r3, #62	@ 0x3e
 800706c:	d91c      	bls.n	80070a8 <USB_EPStartXfer+0x5b6>
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <USB_EPStartXfer+0x59c>
 8007084:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007088:	3b01      	subs	r3, #1
 800708a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800708e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29b      	uxth	r3, r3
 8007098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e059      	b.n	800715c <USB_EPStartXfer+0x66a>
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d112      	bne.n	80070d6 <USB_EPStartXfer+0x5e4>
 80070b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e042      	b.n	800715c <USB_EPStartXfer+0x66a>
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <USB_EPStartXfer+0x604>
 80070ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070f0:	3301      	adds	r3, #1
 80070f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	029b      	lsls	r3, r3, #10
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e02a      	b.n	800715c <USB_EPStartXfer+0x66a>
 8007106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d122      	bne.n	800715c <USB_EPStartXfer+0x66a>
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	653b      	str	r3, [r7, #80]	@ 0x50
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007136:	4413      	add	r3, r2
 8007138:	653b      	str	r3, [r7, #80]	@ 0x50
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714a:	4413      	add	r3, r2
 800714c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	b29a      	uxth	r2, r3
 8007158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	891b      	ldrh	r3, [r3, #8]
 8007168:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007182:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007186:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	f001 f921 	bl	80083d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695a      	ldr	r2, [r3, #20]
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	441a      	add	r2, r3
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d90f      	bls.n	80071ea <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80071ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6a1a      	ldr	r2, [r3, #32]
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	621a      	str	r2, [r3, #32]
 80071e8:	e00e      	b.n	8007208 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80071ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2200      	movs	r2, #0
 8007206:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	643b      	str	r3, [r7, #64]	@ 0x40
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d16d      	bne.n	8007300 <USB_EPStartXfer+0x80e>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007244:	4413      	add	r3, r2
 8007246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	00da      	lsls	r2, r3, #3
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	4413      	add	r3, r2
 800725a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800725e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	2b3e      	cmp	r3, #62	@ 0x3e
 8007266:	d91c      	bls.n	80072a2 <USB_EPStartXfer+0x7b0>
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	095b      	lsrs	r3, r3, #5
 800726e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <USB_EPStartXfer+0x796>
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007282:	3b01      	subs	r3, #1
 8007284:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	b29b      	uxth	r3, r3
 800728e:	029b      	lsls	r3, r3, #10
 8007290:	b29b      	uxth	r3, r3
 8007292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729a:	b29a      	uxth	r2, r3
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e053      	b.n	800734a <USB_EPStartXfer+0x858>
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d112      	bne.n	80072d0 <USB_EPStartXfer+0x7de>
 80072aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e03c      	b.n	800734a <USB_EPStartXfer+0x858>
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USB_EPStartXfer+0x7fe>
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	029b      	lsls	r3, r3, #10
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	e024      	b.n	800734a <USB_EPStartXfer+0x858>
 8007300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d11c      	bne.n	800734a <USB_EPStartXfer+0x858>
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800731e:	b29b      	uxth	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007324:	4413      	add	r3, r2
 8007326:	643b      	str	r3, [r7, #64]	@ 0x40
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	00da      	lsls	r2, r3, #3
 8007336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007338:	4413      	add	r3, r2
 800733a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800733e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	b29a      	uxth	r2, r3
 8007346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	895b      	ldrh	r3, [r3, #10]
 8007356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6959      	ldr	r1, [r3, #20]
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	b29b      	uxth	r3, r3
 800736c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007370:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007374:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007378:	6800      	ldr	r0, [r0, #0]
 800737a:	f001 f82a 	bl	80083d2 <USB_WritePMA>
 800737e:	e213      	b.n	80077a8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80073b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	441a      	add	r2, r3
 80073d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80073d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800740c:	4413      	add	r3, r2
 800740e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	00da      	lsls	r2, r3, #3
 800741e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007420:	4413      	add	r3, r2
 8007422:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	b29a      	uxth	r2, r3
 800742e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007430:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	891b      	ldrh	r3, [r3, #8]
 800743e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6959      	ldr	r1, [r3, #20]
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	b29b      	uxth	r3, r3
 8007454:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007458:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800745c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007460:	6800      	ldr	r0, [r0, #0]
 8007462:	f000 ffb6 	bl	80083d2 <USB_WritePMA>
 8007466:	e19f      	b.n	80077a8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6a1a      	ldr	r2, [r3, #32]
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007478:	1ad2      	subs	r2, r2, r3
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 80bc 	beq.w	8007626 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d16d      	bne.n	80075a6 <USB_EPStartXfer+0xab4>
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ea:	4413      	add	r3, r2
 80074ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	00da      	lsls	r2, r3, #3
 80074fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074fe:	4413      	add	r3, r2
 8007500:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007504:	667b      	str	r3, [r7, #100]	@ 0x64
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	2b3e      	cmp	r3, #62	@ 0x3e
 800750c:	d91c      	bls.n	8007548 <USB_EPStartXfer+0xa56>
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <USB_EPStartXfer+0xa3c>
 8007524:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007528:	3b01      	subs	r3, #1
 800752a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800752e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007540:	b29a      	uxth	r2, r3
 8007542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e053      	b.n	80075f0 <USB_EPStartXfer+0xafe>
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754c:	2b00      	cmp	r3, #0
 800754e:	d112      	bne.n	8007576 <USB_EPStartXfer+0xa84>
 8007550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800755a:	b29a      	uxth	r2, r3
 800755c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756e:	b29a      	uxth	r2, r3
 8007570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	e03c      	b.n	80075f0 <USB_EPStartXfer+0xafe>
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <USB_EPStartXfer+0xaa4>
 800758c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007596:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800759a:	b29b      	uxth	r3, r3
 800759c:	029b      	lsls	r3, r3, #10
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e024      	b.n	80075f0 <USB_EPStartXfer+0xafe>
 80075a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d11c      	bne.n	80075f0 <USB_EPStartXfer+0xafe>
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075ca:	4413      	add	r3, r2
 80075cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80075ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	00da      	lsls	r2, r3, #3
 80075dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075de:	4413      	add	r3, r2
 80075e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6959      	ldr	r1, [r3, #20]
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007610:	b29b      	uxth	r3, r3
 8007612:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007616:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800761a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800761e:	6800      	ldr	r0, [r0, #0]
 8007620:	f000 fed7 	bl	80083d2 <USB_WritePMA>
 8007624:	e0c0      	b.n	80077a8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d16d      	bne.n	8007712 <USB_EPStartXfer+0xc20>
 8007636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007656:	4413      	add	r3, r2
 8007658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800765a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	00da      	lsls	r2, r3, #3
 8007668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800766a:	4413      	add	r3, r2
 800766c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007670:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	2b3e      	cmp	r3, #62	@ 0x3e
 8007678:	d91c      	bls.n	80076b4 <USB_EPStartXfer+0xbc2>
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <USB_EPStartXfer+0xba8>
 8007690:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007694:	3b01      	subs	r3, #1
 8007696:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800769a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800769e:	b29b      	uxth	r3, r3
 80076a0:	029b      	lsls	r3, r3, #10
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e05f      	b.n	8007774 <USB_EPStartXfer+0xc82>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d112      	bne.n	80076e2 <USB_EPStartXfer+0xbf0>
 80076bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076da:	b29a      	uxth	r2, r3
 80076dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e048      	b.n	8007774 <USB_EPStartXfer+0xc82>
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <USB_EPStartXfer+0xc10>
 80076f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80076fc:	3301      	adds	r3, #1
 80076fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007702:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007706:	b29b      	uxth	r3, r3
 8007708:	029b      	lsls	r3, r3, #10
 800770a:	b29a      	uxth	r2, r3
 800770c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e030      	b.n	8007774 <USB_EPStartXfer+0xc82>
 8007712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d128      	bne.n	8007774 <USB_EPStartXfer+0xc82>
 8007722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	00da      	lsls	r2, r3, #3
 800775a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800775e:	4413      	add	r3, r2
 8007760:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007764:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007772:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	891b      	ldrh	r3, [r3, #8]
 8007780:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800779e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	f000 fe15 	bl	80083d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ce:	817b      	strh	r3, [r7, #10]
 80077d0:	897b      	ldrh	r3, [r7, #10]
 80077d2:	f083 0310 	eor.w	r3, r3, #16
 80077d6:	817b      	strh	r3, [r7, #10]
 80077d8:	897b      	ldrh	r3, [r7, #10]
 80077da:	f083 0320 	eor.w	r3, r3, #32
 80077de:	817b      	strh	r3, [r7, #10]
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	441a      	add	r2, r3
 80077fa:	897b      	ldrh	r3, [r7, #10]
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
 8007810:	f000 bc9f 	b.w	8008152 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	7b1b      	ldrb	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 80ae 	bne.w	8007982 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	d917      	bls.n	8007872 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	619a      	str	r2, [r3, #24]
 8007870:	e00e      	b.n	8007890 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2200      	movs	r2, #0
 800788e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80078b4:	4413      	add	r3, r2
 80078b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	00da      	lsls	r2, r3, #3
 80078c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80078cc:	4413      	add	r3, r2
 80078ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078da:	2b3e      	cmp	r3, #62	@ 0x3e
 80078dc:	d91d      	bls.n	800791a <USB_EPStartXfer+0xe28>
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USB_EPStartXfer+0xe0c>
 80078f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80078f8:	3b01      	subs	r3, #1
 80078fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007910:	b29a      	uxth	r2, r3
 8007912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e3e1      	b.n	80080de <USB_EPStartXfer+0x15ec>
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	2b00      	cmp	r3, #0
 8007920:	d116      	bne.n	8007950 <USB_EPStartXfer+0xe5e>
 8007922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	e3c6      	b.n	80080de <USB_EPStartXfer+0x15ec>
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <USB_EPStartXfer+0xe7e>
 8007966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800796a:	3301      	adds	r3, #1
 800796c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007974:	b29b      	uxth	r3, r3
 8007976:	029b      	lsls	r3, r3, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e3ad      	b.n	80080de <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	2b02      	cmp	r3, #2
 8007990:	f040 8200 	bne.w	8007d94 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8091 	bne.w	8007ac8 <USB_EPStartXfer+0xfd6>
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ca:	4413      	add	r3, r2
 80079cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	00da      	lsls	r2, r3, #3
 80079de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079fa:	d925      	bls.n	8007a48 <USB_EPStartXfer+0xf56>
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <USB_EPStartXfer+0xf3a>
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	3b01      	subs	r3, #1
 8007a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	029b      	lsls	r3, r3, #10
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e074      	b.n	8007b32 <USB_EPStartXfer+0x1040>
 8007a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d116      	bne.n	8007a86 <USB_EPStartXfer+0xf94>
 8007a58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e055      	b.n	8007b32 <USB_EPStartXfer+0x1040>
 8007a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <USB_EPStartXfer+0xfc4>
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	029b      	lsls	r3, r3, #10
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	e034      	b.n	8007b32 <USB_EPStartXfer+0x1040>
 8007ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d12c      	bne.n	8007b32 <USB_EPStartXfer+0x1040>
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007afc:	4413      	add	r3, r2
 8007afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	00da      	lsls	r2, r3, #3
 8007b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b14:	4413      	add	r3, r2
 8007b16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f040 8091 	bne.w	8007c74 <USB_EPStartXfer+0x1182>
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b76:	4413      	add	r3, r2
 8007b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00da      	lsls	r2, r3, #3
 8007b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ba6:	d925      	bls.n	8007bf4 <USB_EPStartXfer+0x1102>
 8007ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <USB_EPStartXfer+0x10e6>
 8007bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	029b      	lsls	r3, r3, #10
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e06d      	b.n	8007cd0 <USB_EPStartXfer+0x11de>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d116      	bne.n	8007c32 <USB_EPStartXfer+0x1140>
 8007c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e04e      	b.n	8007cd0 <USB_EPStartXfer+0x11de>
 8007c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <USB_EPStartXfer+0x1170>
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c70:	801a      	strh	r2, [r3, #0]
 8007c72:	e02d      	b.n	8007cd0 <USB_EPStartXfer+0x11de>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d125      	bne.n	8007cd0 <USB_EPStartXfer+0x11de>
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	00da      	lsls	r2, r3, #3
 8007cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 81fe 	beq.w	80080de <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <USB_EPStartXfer+0x1228>
 8007d0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10d      	bne.n	8007d36 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 81db 	bne.w	80080de <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 81d4 	bne.w	80080de <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	441a      	add	r2, r3
 8007d7a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	8013      	strh	r3, [r2, #0]
 8007d92:	e1a4      	b.n	80080de <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	78db      	ldrb	r3, [r3, #3]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f040 819a 	bne.w	80080da <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d917      	bls.n	8007df2 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	619a      	str	r2, [r3, #24]
 8007df0:	e00e      	b.n	8007e10 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d178      	bne.n	8007f12 <USB_EPStartXfer+0x1420>
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e44:	4413      	add	r3, r2
 8007e46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	00da      	lsls	r2, r3, #3
 8007e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e6c:	d91d      	bls.n	8007eaa <USB_EPStartXfer+0x13b8>
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USB_EPStartXfer+0x139c>
 8007e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	e064      	b.n	8007f74 <USB_EPStartXfer+0x1482>
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d116      	bne.n	8007ee0 <USB_EPStartXfer+0x13ee>
 8007eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	e049      	b.n	8007f74 <USB_EPStartXfer+0x1482>
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	085b      	lsrs	r3, r3, #1
 8007ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <USB_EPStartXfer+0x140e>
 8007ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007efa:	3301      	adds	r3, #1
 8007efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	029b      	lsls	r3, r3, #10
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e030      	b.n	8007f74 <USB_EPStartXfer+0x1482>
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d128      	bne.n	8007f74 <USB_EPStartXfer+0x1482>
 8007f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	00da      	lsls	r2, r3, #3
 8007f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5e:	4413      	add	r3, r2
 8007f60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d178      	bne.n	8008084 <USB_EPStartXfer+0x1592>
 8007f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	00da      	lsls	r2, r3, #3
 8007fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fde:	d91d      	bls.n	800801c <USB_EPStartXfer+0x152a>
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <USB_EPStartXfer+0x150e>
 8007ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008004:	b29b      	uxth	r3, r3
 8008006:	029b      	lsls	r3, r3, #10
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e060      	b.n	80080de <USB_EPStartXfer+0x15ec>
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008020:	2b00      	cmp	r3, #0
 8008022:	d116      	bne.n	8008052 <USB_EPStartXfer+0x1560>
 8008024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008048:	b29a      	uxth	r2, r3
 800804a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e045      	b.n	80080de <USB_EPStartXfer+0x15ec>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800805c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USB_EPStartXfer+0x1580>
 8008068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800806c:	3301      	adds	r3, #1
 800806e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e02c      	b.n	80080de <USB_EPStartXfer+0x15ec>
 8008084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d124      	bne.n	80080de <USB_EPStartXfer+0x15ec>
 8008094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080aa:	4413      	add	r3, r2
 80080ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	00da      	lsls	r2, r3, #3
 80080be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080c2:	4413      	add	r3, r2
 80080c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e001      	b.n	80080de <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e03a      	b.n	8008154 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008104:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008108:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800810c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008110:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008114:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008118:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800811c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800813e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800814a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814e:	b29b      	uxth	r3, r3
 8008150:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d020      	beq.n	80081b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008186:	81bb      	strh	r3, [r7, #12]
 8008188:	89bb      	ldrh	r3, [r7, #12]
 800818a:	f083 0310 	eor.w	r3, r3, #16
 800818e:	81bb      	strh	r3, [r7, #12]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	89bb      	ldrh	r3, [r7, #12]
 800819c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	8013      	strh	r3, [r2, #0]
 80081b0:	e01f      	b.n	80081f2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c8:	81fb      	strh	r3, [r7, #14]
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80081d0:	81fb      	strh	r3, [r7, #14]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	89fb      	ldrh	r3, [r7, #14]
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	7b1b      	ldrb	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 809d 	bne.w	800834e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d04c      	beq.n	80082b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	823b      	strh	r3, [r7, #16]
 800822a:	8a3b      	ldrh	r3, [r7, #16]
 800822c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01b      	beq.n	800826c <USB_EPClearStall+0x6c>
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824a:	81fb      	strh	r3, [r7, #14]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	441a      	add	r2, r3
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800825c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008264:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008268:	b29b      	uxth	r3, r3
 800826a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	78db      	ldrb	r3, [r3, #3]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d06c      	beq.n	800834e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800828a:	81bb      	strh	r3, [r7, #12]
 800828c:	89bb      	ldrh	r3, [r7, #12]
 800828e:	f083 0320 	eor.w	r3, r3, #32
 8008292:	81bb      	strh	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	441a      	add	r2, r3
 800829e:	89bb      	ldrh	r3, [r7, #12]
 80082a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	8013      	strh	r3, [r2, #0]
 80082b4:	e04b      	b.n	800834e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	82fb      	strh	r3, [r7, #22]
 80082c4:	8afb      	ldrh	r3, [r7, #22]
 80082c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01b      	beq.n	8008306 <USB_EPClearStall+0x106>
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e4:	82bb      	strh	r3, [r7, #20]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	441a      	add	r2, r3
 80082f0:	8abb      	ldrh	r3, [r7, #20]
 80082f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008302:	b29b      	uxth	r3, r3
 8008304:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831c:	827b      	strh	r3, [r7, #18]
 800831e:	8a7b      	ldrh	r3, [r7, #18]
 8008320:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008324:	827b      	strh	r3, [r7, #18]
 8008326:	8a7b      	ldrh	r3, [r7, #18]
 8008328:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800832c:	827b      	strh	r3, [r7, #18]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	441a      	add	r2, r3
 8008338:	8a7b      	ldrh	r3, [r7, #18]
 800833a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834a:	b29b      	uxth	r3, r3
 800834c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2280      	movs	r2, #128	@ 0x80
 8008372:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839c:	b29a      	uxth	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083c4:	68fb      	ldr	r3, [r7, #12]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b08d      	sub	sp, #52	@ 0x34
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	4611      	mov	r1, r2
 80083de:	461a      	mov	r2, r3
 80083e0:	460b      	mov	r3, r1
 80083e2:	80fb      	strh	r3, [r7, #6]
 80083e4:	4613      	mov	r3, r2
 80083e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80083e8:	88bb      	ldrh	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008402:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008408:	e01a      	b.n	8008440 <USB_WritePMA+0x6e>
  {
    temp1 = *pBuf;
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	3301      	adds	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	b29a      	uxth	r2, r3
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	3302      	adds	r3, #2
 8008432:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	3301      	adds	r3, #1
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800843a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843c:	3b01      	subs	r3, #1
 800843e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e1      	bne.n	800840a <USB_WritePMA+0x38>
  }
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	3734      	adds	r7, #52	@ 0x34
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008454:	b480      	push	{r7}
 8008456:	b08b      	sub	sp, #44	@ 0x2c
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4611      	mov	r1, r2
 8008460:	461a      	mov	r2, r3
 8008462:	460b      	mov	r3, r1
 8008464:	80fb      	strh	r3, [r7, #6]
 8008466:	4613      	mov	r3, r2
 8008468:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800846a:	88bb      	ldrh	r3, [r7, #4]
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	b29b      	uxth	r3, r3
 8008470:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800847a:	88fa      	ldrh	r2, [r7, #6]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008484:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
 800848a:	e018      	b.n	80084be <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	3302      	adds	r3, #2
 8008498:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	3301      	adds	r3, #1
 80084b6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	3b01      	subs	r3, #1
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e3      	bne.n	800848c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80084c4:	88bb      	ldrh	r3, [r7, #4]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	701a      	strb	r2, [r3, #0]
  }
}
 80084e0:	bf00      	nop
 80084e2:	372c      	adds	r7, #44	@ 0x2c
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80084fc:	f002 f8fe 	bl	800a6fc <USBD_static_malloc>
 8008500:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d105      	bne.n	8008514 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008510:	2302      	movs	r3, #2
 8008512:	e066      	b.n	80085e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7c1b      	ldrb	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d119      	bne.n	8008558 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008528:	2202      	movs	r2, #2
 800852a:	2181      	movs	r1, #129	@ 0x81
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 ff8a 	bl	800a446 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800853c:	2202      	movs	r2, #2
 800853e:	2101      	movs	r1, #1
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 ff80 	bl	800a446 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2210      	movs	r2, #16
 8008552:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008556:	e016      	b.n	8008586 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008558:	2340      	movs	r3, #64	@ 0x40
 800855a:	2202      	movs	r2, #2
 800855c:	2181      	movs	r1, #129	@ 0x81
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 ff71 	bl	800a446 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800856a:	2340      	movs	r3, #64	@ 0x40
 800856c:	2202      	movs	r2, #2
 800856e:	2101      	movs	r1, #1
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 ff68 	bl	800a446 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2210      	movs	r2, #16
 8008582:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008586:	2308      	movs	r3, #8
 8008588:	2203      	movs	r2, #3
 800858a:	2182      	movs	r1, #130	@ 0x82
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 ff5a 	bl	800a446 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7c1b      	ldrb	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d109      	bne.n	80085d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085c6:	2101      	movs	r1, #1
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f002 f82c 	bl	800a626 <USBD_LL_PrepareReceive>
 80085ce:	e007      	b.n	80085e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085d6:	2340      	movs	r3, #64	@ 0x40
 80085d8:	2101      	movs	r1, #1
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f002 f823 	bl	800a626 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085f6:	2181      	movs	r1, #129	@ 0x81
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 ff4a 	bl	800a492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008604:	2101      	movs	r1, #1
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 ff43 	bl	800a492 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008614:	2182      	movs	r1, #130	@ 0x82
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 ff3b 	bl	800a492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008646:	4618      	mov	r0, r3
 8008648:	f002 f866 	bl	800a718 <USBD_static_free>
    pdev->pClassData = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008670:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e0af      	b.n	80087e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03f      	beq.n	8008714 <USBD_CDC_Setup+0xb4>
 8008694:	2b20      	cmp	r3, #32
 8008696:	f040 809f 	bne.w	80087d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88db      	ldrh	r3, [r3, #6]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d02e      	beq.n	8008700 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	b25b      	sxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da16      	bge.n	80086da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80086b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	88d2      	ldrh	r2, [r2, #6]
 80086be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b07      	cmp	r3, #7
 80086c6:	bf28      	it	cs
 80086c8:	2307      	movcs	r3, #7
 80086ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	89fa      	ldrh	r2, [r7, #14]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 facf 	bl	8009c76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80086d8:	e085      	b.n	80087e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	785a      	ldrb	r2, [r3, #1]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086f0:	6939      	ldr	r1, [r7, #16]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 fae8 	bl	8009cce <USBD_CtlPrepareRx>
      break;
 80086fe:	e072      	b.n	80087e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	7850      	ldrb	r0, [r2, #1]
 800870c:	2200      	movs	r2, #0
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	4798      	blx	r3
      break;
 8008712:	e068      	b.n	80087e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	2b0b      	cmp	r3, #11
 800871a:	d852      	bhi.n	80087c2 <USBD_CDC_Setup+0x162>
 800871c:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <USBD_CDC_Setup+0xc4>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008755 	.word	0x08008755
 8008728:	080087d1 	.word	0x080087d1
 800872c:	080087c3 	.word	0x080087c3
 8008730:	080087c3 	.word	0x080087c3
 8008734:	080087c3 	.word	0x080087c3
 8008738:	080087c3 	.word	0x080087c3
 800873c:	080087c3 	.word	0x080087c3
 8008740:	080087c3 	.word	0x080087c3
 8008744:	080087c3 	.word	0x080087c3
 8008748:	080087c3 	.word	0x080087c3
 800874c:	0800877f 	.word	0x0800877f
 8008750:	080087a9 	.word	0x080087a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b03      	cmp	r3, #3
 800875e:	d107      	bne.n	8008770 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008760:	f107 030a 	add.w	r3, r7, #10
 8008764:	2202      	movs	r2, #2
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fa84 	bl	8009c76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800876e:	e032      	b.n	80087d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fa0e 	bl	8009b94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	75fb      	strb	r3, [r7, #23]
          break;
 800877c:	e02b      	b.n	80087d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b03      	cmp	r3, #3
 8008788:	d107      	bne.n	800879a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800878a:	f107 030d 	add.w	r3, r7, #13
 800878e:	2201      	movs	r2, #1
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fa6f 	bl	8009c76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008798:	e01d      	b.n	80087d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f9f9 	bl	8009b94 <USBD_CtlError>
            ret = USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	75fb      	strb	r3, [r7, #23]
          break;
 80087a6:	e016      	b.n	80087d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d00f      	beq.n	80087d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 f9ec 	bl	8009b94 <USBD_CtlError>
            ret = USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087c0:	e008      	b.n	80087d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f9e5 	bl	8009b94 <USBD_CtlError>
          ret = USBD_FAIL;
 80087ca:	2303      	movs	r3, #3
 80087cc:	75fb      	strb	r3, [r7, #23]
          break;
 80087ce:	e002      	b.n	80087d6 <USBD_CDC_Setup+0x176>
          break;
 80087d0:	bf00      	nop
 80087d2:	e008      	b.n	80087e6 <USBD_CDC_Setup+0x186>
          break;
 80087d4:	bf00      	nop
      }
      break;
 80087d6:	e006      	b.n	80087e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f9da 	bl	8009b94 <USBD_CtlError>
      ret = USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	75fb      	strb	r3, [r7, #23]
      break;
 80087e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008802:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	e04f      	b.n	80088b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008818:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	3318      	adds	r3, #24
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d029      	beq.n	8008884 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	3318      	adds	r3, #24
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	78f9      	ldrb	r1, [r7, #3]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	460b      	mov	r3, r1
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4403      	add	r3, r0
 8008850:	3338      	adds	r3, #56	@ 0x38
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	fbb2 f1f3 	udiv	r1, r2, r3
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800885e:	2b00      	cmp	r3, #0
 8008860:	d110      	bne.n	8008884 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008862:	78fa      	ldrb	r2, [r7, #3]
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	3318      	adds	r3, #24
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008876:	78f9      	ldrb	r1, [r7, #3]
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 feb1 	bl	800a5e4 <USBD_LL_Transmit>
 8008882:	e015      	b.n	80088b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e015      	b.n	8008908 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 fec1 	bl	800a668 <USBD_LL_GetRxDataSize>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008902:	4611      	mov	r1, r2
 8008904:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800891e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008926:	2303      	movs	r3, #3
 8008928:	e01a      	b.n	8008960 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d014      	beq.n	800895e <USBD_CDC_EP0_RxReady+0x4e>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800893a:	2bff      	cmp	r3, #255	@ 0xff
 800893c:	d00f      	beq.n	800895e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800894c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008954:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	22ff      	movs	r2, #255	@ 0xff
 800895a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2243      	movs	r2, #67	@ 0x43
 8008974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	@ (8008984 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000094 	.word	0x20000094

08008988 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2243      	movs	r2, #67	@ 0x43
 8008994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008996:	4b03      	ldr	r3, [pc, #12]	@ (80089a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	20000050 	.word	0x20000050

080089a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2243      	movs	r2, #67	@ 0x43
 80089b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80089b6:	4b03      	ldr	r3, [pc, #12]	@ (80089c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	200000d8 	.word	0x200000d8

080089c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	220a      	movs	r2, #10
 80089d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089d6:	4b03      	ldr	r3, [pc, #12]	@ (80089e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	2000000c 	.word	0x2000000c

080089e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e004      	b.n	8008a06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e008      	b.n	8008a42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e004      	b.n	8008a74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e01a      	b.n	8008ad8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d114      	bne.n	8008ad6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008aca:	2181      	movs	r1, #129	@ 0x81
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fd89 	bl	800a5e4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e016      	b.n	8008b2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7c1b      	ldrb	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b10:	2101      	movs	r1, #1
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fd87 	bl	800a626 <USBD_LL_PrepareReceive>
 8008b18:	e007      	b.n	8008b2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b20:	2340      	movs	r3, #64	@ 0x40
 8008b22:	2101      	movs	r1, #1
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 fd7e 	bl	800a626 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e01f      	b.n	8008b8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	79fa      	ldrb	r2, [r7, #7]
 8008b7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f001 fbe5 	bl	800a350 <USBD_LL_Init>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e016      	b.n	8008bda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f107 020e 	add.w	r2, r7, #14
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fc10 	bl	800a410 <USBD_LL_Start>
 8008bf0:	4603      	mov	r3, r0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 ff48 	bl	8009b20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d01a      	beq.n	8008cea <USBD_LL_SetupStage+0x72>
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d822      	bhi.n	8008cfe <USBD_LL_SetupStage+0x86>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <USBD_LL_SetupStage+0x4a>
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d00a      	beq.n	8008cd6 <USBD_LL_SetupStage+0x5e>
 8008cc0:	e01d      	b.n	8008cfe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9f0 	bl	80090b0 <USBD_StdDevReq>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd4:	e020      	b.n	8008d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa54 	bl	800918c <USBD_StdItfReq>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce8:	e016      	b.n	8008d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa93 	bl	800921e <USBD_StdEPReq>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfc:	e00c      	b.n	8008d18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 fbdf 	bl	800a4d0 <USBD_LL_StallEP>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
      break;
 8008d16:	bf00      	nop
  }

  return ret;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d138      	bne.n	8008da8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d14a      	bne.n	8008dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d913      	bls.n	8008d7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bf28      	it	cs
 8008d6e:	4613      	movcs	r3, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 ffc7 	bl	8009d08 <USBD_CtlContinueRx>
 8008d7a:	e030      	b.n	8008dde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d10b      	bne.n	8008da0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 ffc2 	bl	8009d2a <USBD_CtlSendStatus>
 8008da6:	e01a      	b.n	8008dde <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d114      	bne.n	8008dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00e      	beq.n	8008dde <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	4798      	blx	r3
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	e000      	b.n	8008de0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	460b      	mov	r3, r1
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d16b      	bne.n	8008ed4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3314      	adds	r3, #20
 8008e00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d156      	bne.n	8008eba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d914      	bls.n	8008e42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	1ad2      	subs	r2, r2, r3
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 ff3c 	bl	8009cac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e34:	2300      	movs	r3, #0
 8008e36:	2200      	movs	r2, #0
 8008e38:	2100      	movs	r1, #0
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f001 fbf3 	bl	800a626 <USBD_LL_PrepareReceive>
 8008e40:	e03b      	b.n	8008eba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d11c      	bne.n	8008e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d316      	bcc.n	8008e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d20f      	bcs.n	8008e88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 ff1d 	bl	8009cac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 fbd0 	bl	800a626 <USBD_LL_PrepareReceive>
 8008e86:	e018      	b.n	8008eba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d10b      	bne.n	8008eac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eac:	2180      	movs	r1, #128	@ 0x80
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f001 fb0e 	bl	800a4d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 ff4b 	bl	8009d50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d122      	bne.n	8008f0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fe98 	bl	8008bfa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ed2:	e01a      	b.n	8008f0a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d114      	bne.n	8008f0a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00e      	beq.n	8008f0a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	7afa      	ldrb	r2, [r7, #11]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	4798      	blx	r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	e000      	b.n	8008f0c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e02f      	b.n	8008fa8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00f      	beq.n	8008f72 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6852      	ldr	r2, [r2, #4]
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f72:	2340      	movs	r3, #64	@ 0x40
 8008f74:	2200      	movs	r2, #0
 8008f76:	2100      	movs	r1, #0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 fa64 	bl	800a446 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2240      	movs	r2, #64	@ 0x40
 8008f8a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f8e:	2340      	movs	r3, #64	@ 0x40
 8008f90:	2200      	movs	r2, #0
 8008f92:	2180      	movs	r1, #128	@ 0x80
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 fa56 	bl	800a446 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2240      	movs	r2, #64	@ 0x40
 8008fa4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b04      	cmp	r3, #4
 800900e:	d106      	bne.n	800901e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800903e:	2303      	movs	r3, #3
 8009040:	e012      	b.n	8009068 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b03      	cmp	r3, #3
 800904c:	d10b      	bne.n	8009066 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	3301      	adds	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800908e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009092:	021b      	lsls	r3, r3, #8
 8009094:	b21a      	sxth	r2, r3
 8009096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800909a:	4313      	orrs	r3, r2
 800909c:	b21b      	sxth	r3, r3
 800909e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090a0:	89fb      	ldrh	r3, [r7, #14]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d005      	beq.n	80090d6 <USBD_StdDevReq+0x26>
 80090ca:	2b40      	cmp	r3, #64	@ 0x40
 80090cc:	d853      	bhi.n	8009176 <USBD_StdDevReq+0xc6>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <USBD_StdDevReq+0x3a>
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d14f      	bne.n	8009176 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	4798      	blx	r3
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]
      break;
 80090e8:	e04a      	b.n	8009180 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b09      	cmp	r3, #9
 80090f0:	d83b      	bhi.n	800916a <USBD_StdDevReq+0xba>
 80090f2:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <USBD_StdDevReq+0x48>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	0800914d 	.word	0x0800914d
 80090fc:	08009161 	.word	0x08009161
 8009100:	0800916b 	.word	0x0800916b
 8009104:	08009157 	.word	0x08009157
 8009108:	0800916b 	.word	0x0800916b
 800910c:	0800912b 	.word	0x0800912b
 8009110:	08009121 	.word	0x08009121
 8009114:	0800916b 	.word	0x0800916b
 8009118:	08009143 	.word	0x08009143
 800911c:	08009135 	.word	0x08009135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9de 	bl	80094e4 <USBD_GetDescriptor>
          break;
 8009128:	e024      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fb6d 	bl	800980c <USBD_SetAddress>
          break;
 8009132:	e01f      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fbac 	bl	8009894 <USBD_SetConfig>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
          break;
 8009140:	e018      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc4b 	bl	80099e0 <USBD_GetConfig>
          break;
 800914a:	e013      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc7c 	bl	8009a4c <USBD_GetStatus>
          break;
 8009154:	e00e      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fcab 	bl	8009ab4 <USBD_SetFeature>
          break;
 800915e:	e009      	b.n	8009174 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fcba 	bl	8009adc <USBD_ClrFeature>
          break;
 8009168:	e004      	b.n	8009174 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fd11 	bl	8009b94 <USBD_CtlError>
          break;
 8009172:	bf00      	nop
      }
      break;
 8009174:	e004      	b.n	8009180 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fd0b 	bl	8009b94 <USBD_CtlError>
      break;
 800917e:	bf00      	nop
  }

  return ret;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop

0800918c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	d005      	beq.n	80091b2 <USBD_StdItfReq+0x26>
 80091a6:	2b40      	cmp	r3, #64	@ 0x40
 80091a8:	d82f      	bhi.n	800920a <USBD_StdItfReq+0x7e>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <USBD_StdItfReq+0x26>
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d12b      	bne.n	800920a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d81d      	bhi.n	80091fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	889b      	ldrh	r3, [r3, #4]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d813      	bhi.n	80091f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	88db      	ldrh	r3, [r3, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d110      	bne.n	8009206 <USBD_StdItfReq+0x7a>
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10d      	bne.n	8009206 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fd9d 	bl	8009d2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091f0:	e009      	b.n	8009206 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fccd 	bl	8009b94 <USBD_CtlError>
          break;
 80091fa:	e004      	b.n	8009206 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fcc8 	bl	8009b94 <USBD_CtlError>
          break;
 8009204:	e000      	b.n	8009208 <USBD_StdItfReq+0x7c>
          break;
 8009206:	bf00      	nop
      }
      break;
 8009208:	e004      	b.n	8009214 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fcc1 	bl	8009b94 <USBD_CtlError>
      break;
 8009212:	bf00      	nop
  }

  return ret;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	889b      	ldrh	r3, [r3, #4]
 8009230:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800923a:	2b40      	cmp	r3, #64	@ 0x40
 800923c:	d007      	beq.n	800924e <USBD_StdEPReq+0x30>
 800923e:	2b40      	cmp	r3, #64	@ 0x40
 8009240:	f200 8145 	bhi.w	80094ce <USBD_StdEPReq+0x2b0>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <USBD_StdEPReq+0x44>
 8009248:	2b20      	cmp	r3, #32
 800924a:	f040 8140 	bne.w	80094ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
      break;
 8009260:	e13a      	b.n	80094d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b03      	cmp	r3, #3
 8009268:	d007      	beq.n	800927a <USBD_StdEPReq+0x5c>
 800926a:	2b03      	cmp	r3, #3
 800926c:	f300 8129 	bgt.w	80094c2 <USBD_StdEPReq+0x2a4>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d07f      	beq.n	8009374 <USBD_StdEPReq+0x156>
 8009274:	2b01      	cmp	r3, #1
 8009276:	d03c      	beq.n	80092f2 <USBD_StdEPReq+0xd4>
 8009278:	e123      	b.n	80094c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b02      	cmp	r3, #2
 8009284:	d002      	beq.n	800928c <USBD_StdEPReq+0x6e>
 8009286:	2b03      	cmp	r3, #3
 8009288:	d016      	beq.n	80092b8 <USBD_StdEPReq+0x9a>
 800928a:	e02c      	b.n	80092e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <USBD_StdEPReq+0x90>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	@ 0x80
 8009296:	d00a      	beq.n	80092ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 f917 	bl	800a4d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a2:	2180      	movs	r1, #128	@ 0x80
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f913 	bl	800a4d0 <USBD_LL_StallEP>
 80092aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092ac:	e020      	b.n	80092f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc6f 	bl	8009b94 <USBD_CtlError>
              break;
 80092b6:	e01b      	b.n	80092f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	885b      	ldrh	r3, [r3, #2]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10e      	bne.n	80092de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <USBD_StdEPReq+0xc0>
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b80      	cmp	r3, #128	@ 0x80
 80092ca:	d008      	beq.n	80092de <USBD_StdEPReq+0xc0>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	88db      	ldrh	r3, [r3, #6]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f8f9 	bl	800a4d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fd23 	bl	8009d2a <USBD_CtlSendStatus>

              break;
 80092e4:	e004      	b.n	80092f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fc53 	bl	8009b94 <USBD_CtlError>
              break;
 80092ee:	bf00      	nop
          }
          break;
 80092f0:	e0ec      	b.n	80094cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d002      	beq.n	8009304 <USBD_StdEPReq+0xe6>
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d016      	beq.n	8009330 <USBD_StdEPReq+0x112>
 8009302:	e030      	b.n	8009366 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00d      	beq.n	8009326 <USBD_StdEPReq+0x108>
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b80      	cmp	r3, #128	@ 0x80
 800930e:	d00a      	beq.n	8009326 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f8db 	bl	800a4d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800931a:	2180      	movs	r1, #128	@ 0x80
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 f8d7 	bl	800a4d0 <USBD_LL_StallEP>
 8009322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009324:	e025      	b.n	8009372 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc33 	bl	8009b94 <USBD_CtlError>
              break;
 800932e:	e020      	b.n	8009372 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11b      	bne.n	8009370 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f8e1 	bl	800a50e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fcec 	bl	8009d2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009364:	e004      	b.n	8009370 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fc13 	bl	8009b94 <USBD_CtlError>
              break;
 800936e:	e000      	b.n	8009372 <USBD_StdEPReq+0x154>
              break;
 8009370:	bf00      	nop
          }
          break;
 8009372:	e0ab      	b.n	80094cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d002      	beq.n	8009386 <USBD_StdEPReq+0x168>
 8009380:	2b03      	cmp	r3, #3
 8009382:	d032      	beq.n	80093ea <USBD_StdEPReq+0x1cc>
 8009384:	e097      	b.n	80094b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <USBD_StdEPReq+0x17e>
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b80      	cmp	r3, #128	@ 0x80
 8009390:	d004      	beq.n	800939c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbfd 	bl	8009b94 <USBD_CtlError>
                break;
 800939a:	e091      	b.n	80094c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800939c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da0b      	bge.n	80093bc <USBD_StdEPReq+0x19e>
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	3310      	adds	r3, #16
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4413      	add	r3, r2
 80093b8:	3304      	adds	r3, #4
 80093ba:	e00b      	b.n	80093d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	3304      	adds	r3, #4
 80093d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2202      	movs	r2, #2
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc47 	bl	8009c76 <USBD_CtlSendData>
              break;
 80093e8:	e06a      	b.n	80094c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	da11      	bge.n	8009416 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	3324      	adds	r3, #36	@ 0x24
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d117      	bne.n	800943c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fbc0 	bl	8009b94 <USBD_CtlError>
                  break;
 8009414:	e054      	b.n	80094c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	f003 020f 	and.w	r2, r3, #15
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d104      	bne.n	800943c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fbad 	bl	8009b94 <USBD_CtlError>
                  break;
 800943a:	e041      	b.n	80094c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800943c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	da0b      	bge.n	800945c <USBD_StdEPReq+0x23e>
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	3310      	adds	r3, #16
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	4413      	add	r3, r2
 8009458:	3304      	adds	r3, #4
 800945a:	e00b      	b.n	8009474 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	4413      	add	r3, r2
 8009472:	3304      	adds	r3, #4
 8009474:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <USBD_StdEPReq+0x264>
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b80      	cmp	r3, #128	@ 0x80
 8009480:	d103      	bne.n	800948a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	e00e      	b.n	80094a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 f85c 	bl	800a54c <USBD_LL_IsStallEP>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2201      	movs	r2, #1
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e002      	b.n	80094a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2202      	movs	r2, #2
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fbe1 	bl	8009c76 <USBD_CtlSendData>
              break;
 80094b4:	e004      	b.n	80094c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fb6b 	bl	8009b94 <USBD_CtlError>
              break;
 80094be:	bf00      	nop
          }
          break;
 80094c0:	e004      	b.n	80094cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fb65 	bl	8009b94 <USBD_CtlError>
          break;
 80094ca:	bf00      	nop
      }
      break;
 80094cc:	e004      	b.n	80094d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fb5f 	bl	8009b94 <USBD_CtlError>
      break;
 80094d6:	bf00      	nop
  }

  return ret;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	885b      	ldrh	r3, [r3, #2]
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	2b0e      	cmp	r3, #14
 8009506:	f200 8152 	bhi.w	80097ae <USBD_GetDescriptor+0x2ca>
 800950a:	a201      	add	r2, pc, #4	@ (adr r2, 8009510 <USBD_GetDescriptor+0x2c>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009581 	.word	0x08009581
 8009514:	08009599 	.word	0x08009599
 8009518:	080095d9 	.word	0x080095d9
 800951c:	080097af 	.word	0x080097af
 8009520:	080097af 	.word	0x080097af
 8009524:	0800974f 	.word	0x0800974f
 8009528:	0800977b 	.word	0x0800977b
 800952c:	080097af 	.word	0x080097af
 8009530:	080097af 	.word	0x080097af
 8009534:	080097af 	.word	0x080097af
 8009538:	080097af 	.word	0x080097af
 800953c:	080097af 	.word	0x080097af
 8009540:	080097af 	.word	0x080097af
 8009544:	080097af 	.word	0x080097af
 8009548:	0800954d 	.word	0x0800954d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800956e:	e126      	b.n	80097be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fb0e 	bl	8009b94 <USBD_CtlError>
        err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
      break;
 800957e:	e11e      	b.n	80097be <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	7c12      	ldrb	r2, [r2, #16]
 800958c:	f107 0108 	add.w	r1, r7, #8
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
      break;
 8009596:	e112      	b.n	80097be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	7c1b      	ldrb	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a8:	f107 0208 	add.w	r2, r7, #8
 80095ac:	4610      	mov	r0, r2
 80095ae:	4798      	blx	r3
 80095b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3301      	adds	r3, #1
 80095b6:	2202      	movs	r2, #2
 80095b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095ba:	e100      	b.n	80097be <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	f107 0208 	add.w	r2, r7, #8
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
 80095cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	2202      	movs	r2, #2
 80095d4:	701a      	strb	r2, [r3, #0]
      break;
 80095d6:	e0f2      	b.n	80097be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	885b      	ldrh	r3, [r3, #2]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b05      	cmp	r3, #5
 80095e0:	f200 80ac 	bhi.w	800973c <USBD_GetDescriptor+0x258>
 80095e4:	a201      	add	r2, pc, #4	@ (adr r2, 80095ec <USBD_GetDescriptor+0x108>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009605 	.word	0x08009605
 80095f0:	08009639 	.word	0x08009639
 80095f4:	0800966d 	.word	0x0800966d
 80095f8:	080096a1 	.word	0x080096a1
 80095fc:	080096d5 	.word	0x080096d5
 8009600:	08009709 	.word	0x08009709
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	7c12      	ldrb	r2, [r2, #16]
 800961c:	f107 0108 	add.w	r1, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009626:	e091      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fab2 	bl	8009b94 <USBD_CtlError>
            err++;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	3301      	adds	r3, #1
 8009634:	72fb      	strb	r3, [r7, #11]
          break;
 8009636:	e089      	b.n	800974c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7c12      	ldrb	r2, [r2, #16]
 8009650:	f107 0108 	add.w	r1, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965a:	e077      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fa98 	bl	8009b94 <USBD_CtlError>
            err++;
 8009664:	7afb      	ldrb	r3, [r7, #11]
 8009666:	3301      	adds	r3, #1
 8009668:	72fb      	strb	r3, [r7, #11]
          break;
 800966a:	e06f      	b.n	800974c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7c12      	ldrb	r2, [r2, #16]
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800968e:	e05d      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa7e 	bl	8009b94 <USBD_CtlError>
            err++;
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	3301      	adds	r3, #1
 800969c:	72fb      	strb	r3, [r7, #11]
          break;
 800969e:	e055      	b.n	800974c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c2:	e043      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa64 	bl	8009b94 <USBD_CtlError>
            err++;
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	3301      	adds	r3, #1
 80096d0:	72fb      	strb	r3, [r7, #11]
          break;
 80096d2:	e03b      	b.n	800974c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	7c12      	ldrb	r2, [r2, #16]
 80096ec:	f107 0108 	add.w	r1, r7, #8
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096f6:	e029      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa4a 	bl	8009b94 <USBD_CtlError>
            err++;
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	3301      	adds	r3, #1
 8009704:	72fb      	strb	r3, [r7, #11]
          break;
 8009706:	e021      	b.n	800974c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	7c12      	ldrb	r2, [r2, #16]
 8009720:	f107 0108 	add.w	r1, r7, #8
 8009724:	4610      	mov	r0, r2
 8009726:	4798      	blx	r3
 8009728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972a:	e00f      	b.n	800974c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa30 	bl	8009b94 <USBD_CtlError>
            err++;
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	3301      	adds	r3, #1
 8009738:	72fb      	strb	r3, [r7, #11]
          break;
 800973a:	e007      	b.n	800974c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa28 	bl	8009b94 <USBD_CtlError>
          err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800974a:	bf00      	nop
      }
      break;
 800974c:	e037      	b.n	80097be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7c1b      	ldrb	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975e:	f107 0208 	add.w	r2, r7, #8
 8009762:	4610      	mov	r0, r2
 8009764:	4798      	blx	r3
 8009766:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009768:	e029      	b.n	80097be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa11 	bl	8009b94 <USBD_CtlError>
        err++;
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	3301      	adds	r3, #1
 8009776:	72fb      	strb	r3, [r7, #11]
      break;
 8009778:	e021      	b.n	80097be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7c1b      	ldrb	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10d      	bne.n	800979e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978a:	f107 0208 	add.w	r2, r7, #8
 800978e:	4610      	mov	r0, r2
 8009790:	4798      	blx	r3
 8009792:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	2207      	movs	r2, #7
 800979a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800979c:	e00f      	b.n	80097be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f9f7 	bl	8009b94 <USBD_CtlError>
        err++;
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	3301      	adds	r3, #1
 80097aa:	72fb      	strb	r3, [r7, #11]
      break;
 80097ac:	e007      	b.n	80097be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f9ef 	bl	8009b94 <USBD_CtlError>
      err++;
 80097b6:	7afb      	ldrb	r3, [r7, #11]
 80097b8:	3301      	adds	r3, #1
 80097ba:	72fb      	strb	r3, [r7, #11]
      break;
 80097bc:	bf00      	nop
  }

  if (err != 0U)
 80097be:	7afb      	ldrb	r3, [r7, #11]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d11e      	bne.n	8009802 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d016      	beq.n	80097fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80097cc:	893b      	ldrh	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00e      	beq.n	80097f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88da      	ldrh	r2, [r3, #6]
 80097d6:	893b      	ldrh	r3, [r7, #8]
 80097d8:	4293      	cmp	r3, r2
 80097da:	bf28      	it	cs
 80097dc:	4613      	movcs	r3, r2
 80097de:	b29b      	uxth	r3, r3
 80097e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097e2:	893b      	ldrh	r3, [r7, #8]
 80097e4:	461a      	mov	r2, r3
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fa44 	bl	8009c76 <USBD_CtlSendData>
 80097ee:	e009      	b.n	8009804 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9ce 	bl	8009b94 <USBD_CtlError>
 80097f8:	e004      	b.n	8009804 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa95 	bl	8009d2a <USBD_CtlSendStatus>
 8009800:	e000      	b.n	8009804 <USBD_GetDescriptor+0x320>
    return;
 8009802:	bf00      	nop
  }
}
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d131      	bne.n	8009882 <USBD_SetAddress+0x76>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d12d      	bne.n	8009882 <USBD_SetAddress+0x76>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	2b7f      	cmp	r3, #127	@ 0x7f
 800982c:	d829      	bhi.n	8009882 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d104      	bne.n	8009850 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9a3 	bl	8009b94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984e:	e01d      	b.n	800988c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	7bfa      	ldrb	r2, [r7, #15]
 8009854:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fea2 	bl	800a5a6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa61 	bl	8009d2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2202      	movs	r2, #2
 8009872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009876:	e009      	b.n	800988c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009880:	e004      	b.n	800988c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f985 	bl	8009b94 <USBD_CtlError>
  }
}
 800988a:	bf00      	nop
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	4b4c      	ldr	r3, [pc, #304]	@ (80099dc <USBD_SetConfig+0x148>)
 80098aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098ac:	4b4b      	ldr	r3, [pc, #300]	@ (80099dc <USBD_SetConfig+0x148>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d905      	bls.n	80098c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f96c 	bl	8009b94 <USBD_CtlError>
    return USBD_FAIL;
 80098bc:	2303      	movs	r3, #3
 80098be:	e088      	b.n	80099d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d002      	beq.n	80098d2 <USBD_SetConfig+0x3e>
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d025      	beq.n	800991c <USBD_SetConfig+0x88>
 80098d0:	e071      	b.n	80099b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098d2:	4b42      	ldr	r3, [pc, #264]	@ (80099dc <USBD_SetConfig+0x148>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d01c      	beq.n	8009914 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80098da:	4b40      	ldr	r3, [pc, #256]	@ (80099dc <USBD_SetConfig+0x148>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098e4:	4b3d      	ldr	r3, [pc, #244]	@ (80099dc <USBD_SetConfig+0x148>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f990 	bl	8008c10 <USBD_SetClassConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f949 	bl	8009b94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009902:	e065      	b.n	80099d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fa10 	bl	8009d2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2203      	movs	r2, #3
 800990e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009912:	e05d      	b.n	80099d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa08 	bl	8009d2a <USBD_CtlSendStatus>
      break;
 800991a:	e059      	b.n	80099d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800991c:	4b2f      	ldr	r3, [pc, #188]	@ (80099dc <USBD_SetConfig+0x148>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d112      	bne.n	800994a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800992c:	4b2b      	ldr	r3, [pc, #172]	@ (80099dc <USBD_SetConfig+0x148>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009936:	4b29      	ldr	r3, [pc, #164]	@ (80099dc <USBD_SetConfig+0x148>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff f983 	bl	8008c48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9f1 	bl	8009d2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009948:	e042      	b.n	80099d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800994a:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <USBD_SetConfig+0x148>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	d02a      	beq.n	80099ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff f971 	bl	8008c48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009966:	4b1d      	ldr	r3, [pc, #116]	@ (80099dc <USBD_SetConfig+0x148>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009970:	4b1a      	ldr	r3, [pc, #104]	@ (80099dc <USBD_SetConfig+0x148>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff f94a 	bl	8008c10 <USBD_SetClassConfig>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00f      	beq.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f903 	bl	8009b94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff f956 	bl	8008c48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099a4:	e014      	b.n	80099d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f9bf 	bl	8009d2a <USBD_CtlSendStatus>
      break;
 80099ac:	e010      	b.n	80099d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f9bb 	bl	8009d2a <USBD_CtlSendStatus>
      break;
 80099b4:	e00c      	b.n	80099d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f8eb 	bl	8009b94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099be:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <USBD_SetConfig+0x148>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff f93f 	bl	8008c48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099ca:	2303      	movs	r3, #3
 80099cc:	73fb      	strb	r3, [r7, #15]
      break;
 80099ce:	bf00      	nop
  }

  return ret;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20000438 	.word	0x20000438

080099e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	88db      	ldrh	r3, [r3, #6]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d004      	beq.n	80099fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f8cd 	bl	8009b94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099fa:	e023      	b.n	8009a44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	dc02      	bgt.n	8009a0e <USBD_GetConfig+0x2e>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dc03      	bgt.n	8009a14 <USBD_GetConfig+0x34>
 8009a0c:	e015      	b.n	8009a3a <USBD_GetConfig+0x5a>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d00b      	beq.n	8009a2a <USBD_GetConfig+0x4a>
 8009a12:	e012      	b.n	8009a3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f927 	bl	8009c76 <USBD_CtlSendData>
        break;
 8009a28:	e00c      	b.n	8009a44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	2201      	movs	r2, #1
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f91f 	bl	8009c76 <USBD_CtlSendData>
        break;
 8009a38:	e004      	b.n	8009a44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f8a9 	bl	8009b94 <USBD_CtlError>
        break;
 8009a42:	bf00      	nop
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d81e      	bhi.n	8009aa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	88db      	ldrh	r3, [r3, #6]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d004      	beq.n	8009a76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f890 	bl	8009b94 <USBD_CtlError>
        break;
 8009a74:	e01a      	b.n	8009aac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f043 0202 	orr.w	r2, r3, #2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	330c      	adds	r3, #12
 8009a96:	2202      	movs	r2, #2
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8eb 	bl	8009c76 <USBD_CtlSendData>
      break;
 8009aa0:	e004      	b.n	8009aac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f875 	bl	8009b94 <USBD_CtlError>
      break;
 8009aaa:	bf00      	nop
  }
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d106      	bne.n	8009ad4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f92b 	bl	8009d2a <USBD_CtlSendStatus>
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d80b      	bhi.n	8009b0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	885b      	ldrh	r3, [r3, #2]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10c      	bne.n	8009b16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f910 	bl	8009d2a <USBD_CtlSendStatus>
      }
      break;
 8009b0a:	e004      	b.n	8009b16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f840 	bl	8009b94 <USBD_CtlError>
      break;
 8009b14:	e000      	b.n	8009b18 <USBD_ClrFeature+0x3c>
      break;
 8009b16:	bf00      	nop
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	781a      	ldrb	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	781a      	ldrb	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff fa90 	bl	8009070 <SWAPBYTE>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fa83 	bl	8009070 <SWAPBYTE>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fa76 	bl	8009070 <SWAPBYTE>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	80da      	strh	r2, [r3, #6]
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b9e:	2180      	movs	r1, #128	@ 0x80
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fc95 	bl	800a4d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fc91 	bl	800a4d0 <USBD_LL_StallEP>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b086      	sub	sp, #24
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d036      	beq.n	8009c3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bd0:	6938      	ldr	r0, [r7, #16]
 8009bd2:	f000 f836 	bl	8009c42 <USBD_GetLen>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	3301      	adds	r3, #1
 8009c04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c06:	e013      	b.n	8009c30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	3301      	adds	r3, #1
 8009c18:	613b      	str	r3, [r7, #16]
    idx++;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	4413      	add	r3, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e7      	bne.n	8009c08 <USBD_GetString+0x52>
 8009c38:	e000      	b.n	8009c3c <USBD_GetString+0x86>
    return;
 8009c3a:	bf00      	nop
  }
}
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c52:	e005      	b.n	8009c60 <USBD_GetLen+0x1e>
  {
    len++;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	3301      	adds	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f5      	bne.n	8009c54 <USBD_GetLen+0x12>
  }

  return len;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2202      	movs	r2, #2
 8009c86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f000 fca1 	bl	800a5e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fc90 	bl	800a5e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fc94 	bl	800a626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	2100      	movs	r1, #0
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fc83 	bl	800a626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2204      	movs	r2, #4
 8009d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fc4f 	bl	800a5e4 <USBD_LL_Transmit>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2205      	movs	r2, #5
 8009d5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d60:	2300      	movs	r3, #0
 8009d62:	2200      	movs	r2, #0
 8009d64:	2100      	movs	r1, #0
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fc5d 	bl	800a626 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4912      	ldr	r1, [pc, #72]	@ (8009dc8 <MX_USB_Device_Init+0x50>)
 8009d80:	4812      	ldr	r0, [pc, #72]	@ (8009dcc <MX_USB_Device_Init+0x54>)
 8009d82:	f7fe fed7 	bl	8008b34 <USBD_Init>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009d8c:	f7f6 ff7e 	bl	8000c8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009d90:	490f      	ldr	r1, [pc, #60]	@ (8009dd0 <MX_USB_Device_Init+0x58>)
 8009d92:	480e      	ldr	r0, [pc, #56]	@ (8009dcc <MX_USB_Device_Init+0x54>)
 8009d94:	f7fe fefe 	bl	8008b94 <USBD_RegisterClass>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009d9e:	f7f6 ff75 	bl	8000c8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009da2:	490c      	ldr	r1, [pc, #48]	@ (8009dd4 <MX_USB_Device_Init+0x5c>)
 8009da4:	4809      	ldr	r0, [pc, #36]	@ (8009dcc <MX_USB_Device_Init+0x54>)
 8009da6:	f7fe fe1f 	bl	80089e8 <USBD_CDC_RegisterInterface>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009db0:	f7f6 ff6c 	bl	8000c8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009db4:	4805      	ldr	r0, [pc, #20]	@ (8009dcc <MX_USB_Device_Init+0x54>)
 8009db6:	f7fe ff14 	bl	8008be2 <USBD_Start>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009dc0:	f7f6 ff64 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009dc4:	bf00      	nop
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000130 	.word	0x20000130
 8009dcc:	2000043c 	.word	0x2000043c
 8009dd0:	20000018 	.word	0x20000018
 8009dd4:	2000011c 	.word	0x2000011c

08009dd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4905      	ldr	r1, [pc, #20]	@ (8009df4 <CDC_Init_FS+0x1c>)
 8009de0:	4805      	ldr	r0, [pc, #20]	@ (8009df8 <CDC_Init_FS+0x20>)
 8009de2:	f7fe fe16 	bl	8008a12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009de6:	4905      	ldr	r1, [pc, #20]	@ (8009dfc <CDC_Init_FS+0x24>)
 8009de8:	4803      	ldr	r0, [pc, #12]	@ (8009df8 <CDC_Init_FS+0x20>)
 8009dea:	f7fe fe30 	bl	8008a4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000f0c 	.word	0x20000f0c
 8009df8:	2000043c 	.word	0x2000043c
 8009dfc:	2000070c 	.word	0x2000070c

08009e00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	2b23      	cmp	r3, #35	@ 0x23
 8009e24:	d84a      	bhi.n	8009ebc <CDC_Control_FS+0xac>
 8009e26:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <CDC_Control_FS+0x1c>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009ebd 	.word	0x08009ebd
 8009e30:	08009ebd 	.word	0x08009ebd
 8009e34:	08009ebd 	.word	0x08009ebd
 8009e38:	08009ebd 	.word	0x08009ebd
 8009e3c:	08009ebd 	.word	0x08009ebd
 8009e40:	08009ebd 	.word	0x08009ebd
 8009e44:	08009ebd 	.word	0x08009ebd
 8009e48:	08009ebd 	.word	0x08009ebd
 8009e4c:	08009ebd 	.word	0x08009ebd
 8009e50:	08009ebd 	.word	0x08009ebd
 8009e54:	08009ebd 	.word	0x08009ebd
 8009e58:	08009ebd 	.word	0x08009ebd
 8009e5c:	08009ebd 	.word	0x08009ebd
 8009e60:	08009ebd 	.word	0x08009ebd
 8009e64:	08009ebd 	.word	0x08009ebd
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009ebd 	.word	0x08009ebd
 8009e70:	08009ebd 	.word	0x08009ebd
 8009e74:	08009ebd 	.word	0x08009ebd
 8009e78:	08009ebd 	.word	0x08009ebd
 8009e7c:	08009ebd 	.word	0x08009ebd
 8009e80:	08009ebd 	.word	0x08009ebd
 8009e84:	08009ebd 	.word	0x08009ebd
 8009e88:	08009ebd 	.word	0x08009ebd
 8009e8c:	08009ebd 	.word	0x08009ebd
 8009e90:	08009ebd 	.word	0x08009ebd
 8009e94:	08009ebd 	.word	0x08009ebd
 8009e98:	08009ebd 	.word	0x08009ebd
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009ebd 	.word	0x08009ebd
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ebd 	.word	0x08009ebd
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ebd 	.word	0x08009ebd
 8009eb4:	08009ebd 	.word	0x08009ebd
 8009eb8:	08009ebd 	.word	0x08009ebd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ebc:	bf00      	nop
  }

  return (USBD_OK);
 8009ebe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4805      	ldr	r0, [pc, #20]	@ (8009ef0 <CDC_Receive_FS+0x24>)
 8009eda:	f7fe fdb8 	bl	8008a4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ede:	4804      	ldr	r0, [pc, #16]	@ (8009ef0 <CDC_Receive_FS+0x24>)
 8009ee0:	f7fe fdfe 	bl	8008ae0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ee4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	2000043c 	.word	0x2000043c

08009ef4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f04:	4b0d      	ldr	r3, [pc, #52]	@ (8009f3c <CDC_Transmit_FS+0x48>)
 8009f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e00b      	b.n	8009f32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f1a:	887b      	ldrh	r3, [r7, #2]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4806      	ldr	r0, [pc, #24]	@ (8009f3c <CDC_Transmit_FS+0x48>)
 8009f22:	f7fe fd76 	bl	8008a12 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f26:	4805      	ldr	r0, [pc, #20]	@ (8009f3c <CDC_Transmit_FS+0x48>)
 8009f28:	f7fe fdaa 	bl	8008a80 <USBD_CDC_TransmitPacket>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	2000043c 	.word	0x2000043c

08009f40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2212      	movs	r2, #18
 8009f74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009f76:	4b03      	ldr	r3, [pc, #12]	@ (8009f84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20000150 	.word	0x20000150

08009f88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	6039      	str	r1, [r7, #0]
 8009f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2204      	movs	r2, #4
 8009f98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	20000164 	.word	0x20000164

08009fac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	6039      	str	r1, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d105      	bne.n	8009fca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	4907      	ldr	r1, [pc, #28]	@ (8009fe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fc2:	4808      	ldr	r0, [pc, #32]	@ (8009fe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009fc4:	f7ff fdf7 	bl	8009bb6 <USBD_GetString>
 8009fc8:	e004      	b.n	8009fd4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	4904      	ldr	r1, [pc, #16]	@ (8009fe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009fce:	4805      	ldr	r0, [pc, #20]	@ (8009fe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009fd0:	f7ff fdf1 	bl	8009bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fd4:	4b02      	ldr	r3, [pc, #8]	@ (8009fe0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	2000170c 	.word	0x2000170c
 8009fe4:	0800b678 	.word	0x0800b678

08009fe8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6039      	str	r1, [r7, #0]
 8009ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	4904      	ldr	r1, [pc, #16]	@ (800a008 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009ff8:	4804      	ldr	r0, [pc, #16]	@ (800a00c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009ffa:	f7ff fddc 	bl	8009bb6 <USBD_GetString>
  return USBD_StrDesc;
 8009ffe:	4b02      	ldr	r3, [pc, #8]	@ (800a008 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	2000170c 	.word	0x2000170c
 800a00c:	0800b690 	.word	0x0800b690

0800a010 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	221a      	movs	r2, #26
 800a020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a022:	f000 f843 	bl	800a0ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a026:	4b02      	ldr	r3, [pc, #8]	@ (800a030 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000168 	.word	0x20000168

0800a034 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d105      	bne.n	800a052 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4907      	ldr	r1, [pc, #28]	@ (800a068 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a04a:	4808      	ldr	r0, [pc, #32]	@ (800a06c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a04c:	f7ff fdb3 	bl	8009bb6 <USBD_GetString>
 800a050:	e004      	b.n	800a05c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4904      	ldr	r1, [pc, #16]	@ (800a068 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a056:	4805      	ldr	r0, [pc, #20]	@ (800a06c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a058:	f7ff fdad 	bl	8009bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a05c:	4b02      	ldr	r3, [pc, #8]	@ (800a068 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2000170c 	.word	0x2000170c
 800a06c:	0800b6a4 	.word	0x0800b6a4

0800a070 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d105      	bne.n	800a08e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	4907      	ldr	r1, [pc, #28]	@ (800a0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a086:	4808      	ldr	r0, [pc, #32]	@ (800a0a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a088:	f7ff fd95 	bl	8009bb6 <USBD_GetString>
 800a08c:	e004      	b.n	800a098 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	4904      	ldr	r1, [pc, #16]	@ (800a0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a092:	4805      	ldr	r0, [pc, #20]	@ (800a0a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a094:	f7ff fd8f 	bl	8009bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a098:	4b02      	ldr	r3, [pc, #8]	@ (800a0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	2000170c 	.word	0x2000170c
 800a0a8:	0800b6b0 	.word	0x0800b6b0

0800a0ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f0 <Get_SerialNum+0x44>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f4 <Get_SerialNum+0x48>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0be:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f8 <Get_SerialNum+0x4c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0d2:	2208      	movs	r2, #8
 800a0d4:	4909      	ldr	r1, [pc, #36]	@ (800a0fc <Get_SerialNum+0x50>)
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f814 	bl	800a104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0dc:	2204      	movs	r2, #4
 800a0de:	4908      	ldr	r1, [pc, #32]	@ (800a100 <Get_SerialNum+0x54>)
 800a0e0:	68b8      	ldr	r0, [r7, #8]
 800a0e2:	f000 f80f 	bl	800a104 <IntToUnicode>
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	1fff7590 	.word	0x1fff7590
 800a0f4:	1fff7594 	.word	0x1fff7594
 800a0f8:	1fff7598 	.word	0x1fff7598
 800a0fc:	2000016a 	.word	0x2000016a
 800a100:	2000017a 	.word	0x2000017a

0800a104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]
 800a11a:	e027      	b.n	800a16c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	0f1b      	lsrs	r3, r3, #28
 800a120:	2b09      	cmp	r3, #9
 800a122:	d80b      	bhi.n	800a13c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	0f1b      	lsrs	r3, r3, #28
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	4619      	mov	r1, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	440b      	add	r3, r1
 800a134:	3230      	adds	r2, #48	@ 0x30
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e00a      	b.n	800a152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0f1b      	lsrs	r3, r3, #28
 800a140:	b2da      	uxtb	r2, r3
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	4619      	mov	r1, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	440b      	add	r3, r1
 800a14c:	3237      	adds	r2, #55	@ 0x37
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	3301      	adds	r3, #1
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	4413      	add	r3, r2
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	3301      	adds	r3, #1
 800a16a:	75fb      	strb	r3, [r7, #23]
 800a16c:	7dfa      	ldrb	r2, [r7, #23]
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	429a      	cmp	r2, r3
 800a172:	d3d3      	bcc.n	800a11c <IntToUnicode+0x18>
  }
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
	...

0800a184 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b098      	sub	sp, #96	@ 0x60
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	2254      	movs	r2, #84	@ 0x54
 800a192:	2100      	movs	r1, #0
 800a194:	4618      	mov	r0, r3
 800a196:	f000 fc12 	bl	800a9be <memset>
  if(pcdHandle->Instance==USB)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a15      	ldr	r2, [pc, #84]	@ (800a1f4 <HAL_PCD_MspInit+0x70>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d123      	bne.n	800a1ec <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a1a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a1a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a1aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1b0:	f107 030c 	add.w	r3, r7, #12
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fa fd61 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a1c0:	f7f6 fd64 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <HAL_PCD_MspInit+0x74>)
 800a1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a1f8 <HAL_PCD_MspInit+0x74>)
 800a1ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1d0:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <HAL_PCD_MspInit+0x74>)
 800a1d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1d8:	60bb      	str	r3, [r7, #8]
 800a1da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2100      	movs	r1, #0
 800a1e0:	2014      	movs	r0, #20
 800a1e2:	f7f7 f91c 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1e6:	2014      	movs	r0, #20
 800a1e8:	f7f7 f933 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	3760      	adds	r7, #96	@ 0x60
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	40005c00 	.word	0x40005c00
 800a1f8:	40021000 	.word	0x40021000

0800a1fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 22f0 	ldr.w	r2, [r3, #752]	@ 0x2f0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a210:	4619      	mov	r1, r3
 800a212:	4610      	mov	r0, r2
 800a214:	f7fe fd30 	bl	8008c78 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	440b      	add	r3, r1
 800a240:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	4619      	mov	r1, r3
 800a24a:	f7fe fd6a 	bl	8008d22 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	460b      	mov	r3, r1
 800a260:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	440b      	add	r3, r1
 800a276:	333c      	adds	r3, #60	@ 0x3c
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	4619      	mov	r1, r3
 800a27e:	f7fe fdb3 	bl	8008de8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fec7 	bl	800902c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a29e:	bf00      	nop
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d001      	beq.n	800a2be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2ba:	f7f6 fce7 	bl	8000c8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a2c4:	7bfa      	ldrb	r2, [r7, #15]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe fe71 	bl	8008fb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fe1d 	bl	8008f14 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fe6c 	bl	8008fd0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a300:	4b04      	ldr	r3, [pc, #16]	@ (800a314 <HAL_PCD_SuspendCallback+0x30>)
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	4a03      	ldr	r2, [pc, #12]	@ (800a314 <HAL_PCD_SuspendCallback+0x30>)
 800a306:	f043 0306 	orr.w	r3, r3, #6
 800a30a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	e000ed00 	.word	0xe000ed00

0800a318 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a328:	4b08      	ldr	r3, [pc, #32]	@ (800a34c <HAL_PCD_ResumeCallback+0x34>)
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	4a07      	ldr	r2, [pc, #28]	@ (800a34c <HAL_PCD_ResumeCallback+0x34>)
 800a32e:	f023 0306 	bic.w	r3, r3, #6
 800a332:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a334:	f000 f9fa 	bl	800a72c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe fe5c 	bl	8008ffc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	e000ed00 	.word	0xe000ed00

0800a350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a358:	4a2b      	ldr	r2, [pc, #172]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8c2 32f0 	str.w	r3, [r2, #752]	@ 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a29      	ldr	r2, [pc, #164]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a364:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a368:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a36a:	4a28      	ldr	r2, [pc, #160]	@ (800a40c <USBD_LL_Init+0xbc>)
 800a36c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a36e:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a370:	2208      	movs	r2, #8
 800a372:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a374:	4b24      	ldr	r3, [pc, #144]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a376:	2202      	movs	r2, #2
 800a378:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a37a:	4b23      	ldr	r3, [pc, #140]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a37c:	2202      	movs	r2, #2
 800a37e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a380:	4b21      	ldr	r3, [pc, #132]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a382:	2200      	movs	r2, #0
 800a384:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a386:	4b20      	ldr	r3, [pc, #128]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a388:	2200      	movs	r2, #0
 800a38a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a38c:	4b1e      	ldr	r3, [pc, #120]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a38e:	2200      	movs	r2, #0
 800a390:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a392:	4b1d      	ldr	r3, [pc, #116]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a394:	2200      	movs	r2, #0
 800a396:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a398:	481b      	ldr	r0, [pc, #108]	@ (800a408 <USBD_LL_Init+0xb8>)
 800a39a:	f7f8 f945 	bl	8002628 <HAL_PCD_Init>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a3a4:	f7f6 fc72 	bl	8000c8c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3ae:	2318      	movs	r3, #24
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	f7f9 fdfd 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3be:	2358      	movs	r3, #88	@ 0x58
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2180      	movs	r1, #128	@ 0x80
 800a3c4:	f7f9 fdf5 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3ce:	23c0      	movs	r3, #192	@ 0xc0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2181      	movs	r1, #129	@ 0x81
 800a3d4:	f7f9 fded 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	f7f9 fde4 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2182      	movs	r1, #130	@ 0x82
 800a3f8:	f7f9 fddb 	bl	8003fb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	2000190c 	.word	0x2000190c
 800a40c:	40005c00 	.word	0x40005c00

0800a410 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a426:	4618      	mov	r0, r3
 800a428:	f7f8 f9e3 	bl	80027f2 <HAL_PCD_Start>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f980 	bl	800a738 <USBD_Get_USB_Status>
 800a438:	4603      	mov	r3, r0
 800a43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	461a      	mov	r2, r3
 800a454:	4603      	mov	r3, r0
 800a456:	70fb      	strb	r3, [r7, #3]
 800a458:	460b      	mov	r3, r1
 800a45a:	70bb      	strb	r3, [r7, #2]
 800a45c:	4613      	mov	r3, r2
 800a45e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a46e:	78bb      	ldrb	r3, [r7, #2]
 800a470:	883a      	ldrh	r2, [r7, #0]
 800a472:	78f9      	ldrb	r1, [r7, #3]
 800a474:	f7f8 fb2b 	bl	8002ace <HAL_PCD_EP_Open>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 f95a 	bl	800a738 <USBD_Get_USB_Status>
 800a484:	4603      	mov	r3, r0
 800a486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a488:	7bbb      	ldrb	r3, [r7, #14]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7f8 fb72 	bl	8002b9a <HAL_PCD_EP_Close>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 f93b 	bl	800a738 <USBD_Get_USB_Status>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f8 fc33 	bl	8002d5a <HAL_PCD_EP_SetStall>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f91c 	bl	800a738 <USBD_Get_USB_Status>
 800a500:	4603      	mov	r3, r0
 800a502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a504:	7bbb      	ldrb	r3, [r7, #14]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f8 fc66 	bl	8002dfe <HAL_PCD_EP_ClrStall>
 800a532:	4603      	mov	r3, r0
 800a534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f8fd 	bl	800a738 <USBD_Get_USB_Status>
 800a53e:	4603      	mov	r3, r0
 800a540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a542:	7bbb      	ldrb	r3, [r7, #14]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a55e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a564:	2b00      	cmp	r3, #0
 800a566:	da0c      	bge.n	800a582 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a56e:	68f9      	ldr	r1, [r7, #12]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	440b      	add	r3, r1
 800a57c:	3302      	adds	r3, #2
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	e00b      	b.n	800a59a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a582:	78fb      	ldrb	r3, [r7, #3]
 800a584:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	440b      	add	r3, r1
 800a594:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a598:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f8 fa5d 	bl	8002a84 <HAL_PCD_SetAddress>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 f8b1 	bl	800a738 <USBD_Get_USB_Status>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	603b      	str	r3, [r7, #0]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a602:	7af9      	ldrb	r1, [r7, #11]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	f7f8 fb64 	bl	8002cd4 <HAL_PCD_EP_Transmit>
 800a60c:	4603      	mov	r3, r0
 800a60e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 f890 	bl	800a738 <USBD_Get_USB_Status>
 800a618:	4603      	mov	r3, r0
 800a61a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a61c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b086      	sub	sp, #24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
 800a632:	460b      	mov	r3, r1
 800a634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a644:	7af9      	ldrb	r1, [r7, #11]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	f7f8 faee 	bl	8002c2a <HAL_PCD_EP_Receive>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	4618      	mov	r0, r3
 800a656:	f000 f86f 	bl	800a738 <USBD_Get_USB_Status>
 800a65a:	4603      	mov	r3, r0
 800a65c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a65e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f8 fb10 	bl	8002ca4 <HAL_PCD_EP_GetRxCount>
 800a684:	4603      	mov	r3, r0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <HAL_PCDEx_LPM_Callback+0x18>
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d013      	beq.n	800a6ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a6a6:	e023      	b.n	800a6f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d007      	beq.n	800a6c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a6b0:	f000 f83c 	bl	800a72c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6b4:	4b10      	ldr	r3, [pc, #64]	@ (800a6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6ba:	f023 0306 	bic.w	r3, r3, #6
 800a6be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fc98 	bl	8008ffc <USBD_LL_Resume>
    break;
 800a6cc:	e010      	b.n	800a6f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fc7b 	bl	8008fd0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6e2:	4b05      	ldr	r3, [pc, #20]	@ (800a6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	4a04      	ldr	r2, [pc, #16]	@ (800a6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a6e8:	f043 0306 	orr.w	r3, r3, #6
 800a6ec:	6113      	str	r3, [r2, #16]
    break;
 800a6ee:	bf00      	nop
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed00 	.word	0xe000ed00

0800a6fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a704:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <USBD_static_malloc+0x18>)
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20001c00 	.word	0x20001c00

0800a718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]

}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a730:	f7f6 fa16 	bl	8000b60 <SystemClock_Config>
}
 800a734:	bf00      	nop
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d817      	bhi.n	800a77c <USBD_Get_USB_Status+0x44>
 800a74c:	a201      	add	r2, pc, #4	@ (adr r2, 800a754 <USBD_Get_USB_Status+0x1c>)
 800a74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a752:	bf00      	nop
 800a754:	0800a765 	.word	0x0800a765
 800a758:	0800a76b 	.word	0x0800a76b
 800a75c:	0800a771 	.word	0x0800a771
 800a760:	0800a777 	.word	0x0800a777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
    break;
 800a768:	e00b      	b.n	800a782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	73fb      	strb	r3, [r7, #15]
    break;
 800a76e:	e008      	b.n	800a782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
    break;
 800a774:	e005      	b.n	800a782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a776:	2303      	movs	r3, #3
 800a778:	73fb      	strb	r3, [r7, #15]
    break;
 800a77a:	e002      	b.n	800a782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a77c:	2303      	movs	r3, #3
 800a77e:	73fb      	strb	r3, [r7, #15]
    break;
 800a780:	bf00      	nop
  }
  return usb_status;
 800a782:	7bfb      	ldrb	r3, [r7, #15]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <std>:
 800a790:	2300      	movs	r3, #0
 800a792:	b510      	push	{r4, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	e9c0 3300 	strd	r3, r3, [r0]
 800a79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a79e:	6083      	str	r3, [r0, #8]
 800a7a0:	8181      	strh	r1, [r0, #12]
 800a7a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7a4:	81c2      	strh	r2, [r0, #14]
 800a7a6:	6183      	str	r3, [r0, #24]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	305c      	adds	r0, #92	@ 0x5c
 800a7ae:	f000 f906 	bl	800a9be <memset>
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e8 <std+0x58>)
 800a7b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ec <std+0x5c>)
 800a7b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f0 <std+0x60>)
 800a7bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7be:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <std+0x64>)
 800a7c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <std+0x68>)
 800a7c4:	6224      	str	r4, [r4, #32]
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	d006      	beq.n	800a7d8 <std+0x48>
 800a7ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7ce:	4294      	cmp	r4, r2
 800a7d0:	d002      	beq.n	800a7d8 <std+0x48>
 800a7d2:	33d0      	adds	r3, #208	@ 0xd0
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d105      	bne.n	800a7e4 <std+0x54>
 800a7d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e0:	f000 b966 	b.w	800aab0 <__retarget_lock_init_recursive>
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	bf00      	nop
 800a7e8:	0800a939 	.word	0x0800a939
 800a7ec:	0800a95b 	.word	0x0800a95b
 800a7f0:	0800a993 	.word	0x0800a993
 800a7f4:	0800a9b7 	.word	0x0800a9b7
 800a7f8:	20001e20 	.word	0x20001e20

0800a7fc <stdio_exit_handler>:
 800a7fc:	4a02      	ldr	r2, [pc, #8]	@ (800a808 <stdio_exit_handler+0xc>)
 800a7fe:	4903      	ldr	r1, [pc, #12]	@ (800a80c <stdio_exit_handler+0x10>)
 800a800:	4803      	ldr	r0, [pc, #12]	@ (800a810 <stdio_exit_handler+0x14>)
 800a802:	f000 b869 	b.w	800a8d8 <_fwalk_sglue>
 800a806:	bf00      	nop
 800a808:	20000184 	.word	0x20000184
 800a80c:	0800b34d 	.word	0x0800b34d
 800a810:	20000194 	.word	0x20000194

0800a814 <cleanup_stdio>:
 800a814:	6841      	ldr	r1, [r0, #4]
 800a816:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <cleanup_stdio+0x34>)
 800a818:	4299      	cmp	r1, r3
 800a81a:	b510      	push	{r4, lr}
 800a81c:	4604      	mov	r4, r0
 800a81e:	d001      	beq.n	800a824 <cleanup_stdio+0x10>
 800a820:	f000 fd94 	bl	800b34c <_fflush_r>
 800a824:	68a1      	ldr	r1, [r4, #8]
 800a826:	4b09      	ldr	r3, [pc, #36]	@ (800a84c <cleanup_stdio+0x38>)
 800a828:	4299      	cmp	r1, r3
 800a82a:	d002      	beq.n	800a832 <cleanup_stdio+0x1e>
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 fd8d 	bl	800b34c <_fflush_r>
 800a832:	68e1      	ldr	r1, [r4, #12]
 800a834:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <cleanup_stdio+0x3c>)
 800a836:	4299      	cmp	r1, r3
 800a838:	d004      	beq.n	800a844 <cleanup_stdio+0x30>
 800a83a:	4620      	mov	r0, r4
 800a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a840:	f000 bd84 	b.w	800b34c <_fflush_r>
 800a844:	bd10      	pop	{r4, pc}
 800a846:	bf00      	nop
 800a848:	20001e20 	.word	0x20001e20
 800a84c:	20001e88 	.word	0x20001e88
 800a850:	20001ef0 	.word	0x20001ef0

0800a854 <global_stdio_init.part.0>:
 800a854:	b510      	push	{r4, lr}
 800a856:	4b0b      	ldr	r3, [pc, #44]	@ (800a884 <global_stdio_init.part.0+0x30>)
 800a858:	4c0b      	ldr	r4, [pc, #44]	@ (800a888 <global_stdio_init.part.0+0x34>)
 800a85a:	4a0c      	ldr	r2, [pc, #48]	@ (800a88c <global_stdio_init.part.0+0x38>)
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	4620      	mov	r0, r4
 800a860:	2200      	movs	r2, #0
 800a862:	2104      	movs	r1, #4
 800a864:	f7ff ff94 	bl	800a790 <std>
 800a868:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a86c:	2201      	movs	r2, #1
 800a86e:	2109      	movs	r1, #9
 800a870:	f7ff ff8e 	bl	800a790 <std>
 800a874:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a878:	2202      	movs	r2, #2
 800a87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a87e:	2112      	movs	r1, #18
 800a880:	f7ff bf86 	b.w	800a790 <std>
 800a884:	20001f58 	.word	0x20001f58
 800a888:	20001e20 	.word	0x20001e20
 800a88c:	0800a7fd 	.word	0x0800a7fd

0800a890 <__sfp_lock_acquire>:
 800a890:	4801      	ldr	r0, [pc, #4]	@ (800a898 <__sfp_lock_acquire+0x8>)
 800a892:	f000 b90e 	b.w	800aab2 <__retarget_lock_acquire_recursive>
 800a896:	bf00      	nop
 800a898:	20001f61 	.word	0x20001f61

0800a89c <__sfp_lock_release>:
 800a89c:	4801      	ldr	r0, [pc, #4]	@ (800a8a4 <__sfp_lock_release+0x8>)
 800a89e:	f000 b909 	b.w	800aab4 <__retarget_lock_release_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	20001f61 	.word	0x20001f61

0800a8a8 <__sinit>:
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	f7ff fff0 	bl	800a890 <__sfp_lock_acquire>
 800a8b0:	6a23      	ldr	r3, [r4, #32]
 800a8b2:	b11b      	cbz	r3, 800a8bc <__sinit+0x14>
 800a8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b8:	f7ff bff0 	b.w	800a89c <__sfp_lock_release>
 800a8bc:	4b04      	ldr	r3, [pc, #16]	@ (800a8d0 <__sinit+0x28>)
 800a8be:	6223      	str	r3, [r4, #32]
 800a8c0:	4b04      	ldr	r3, [pc, #16]	@ (800a8d4 <__sinit+0x2c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1f5      	bne.n	800a8b4 <__sinit+0xc>
 800a8c8:	f7ff ffc4 	bl	800a854 <global_stdio_init.part.0>
 800a8cc:	e7f2      	b.n	800a8b4 <__sinit+0xc>
 800a8ce:	bf00      	nop
 800a8d0:	0800a815 	.word	0x0800a815
 800a8d4:	20001f58 	.word	0x20001f58

0800a8d8 <_fwalk_sglue>:
 800a8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8dc:	4607      	mov	r7, r0
 800a8de:	4688      	mov	r8, r1
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	2600      	movs	r6, #0
 800a8e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8e8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8ec:	d505      	bpl.n	800a8fa <_fwalk_sglue+0x22>
 800a8ee:	6824      	ldr	r4, [r4, #0]
 800a8f0:	2c00      	cmp	r4, #0
 800a8f2:	d1f7      	bne.n	800a8e4 <_fwalk_sglue+0xc>
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fa:	89ab      	ldrh	r3, [r5, #12]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d907      	bls.n	800a910 <_fwalk_sglue+0x38>
 800a900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a904:	3301      	adds	r3, #1
 800a906:	d003      	beq.n	800a910 <_fwalk_sglue+0x38>
 800a908:	4629      	mov	r1, r5
 800a90a:	4638      	mov	r0, r7
 800a90c:	47c0      	blx	r8
 800a90e:	4306      	orrs	r6, r0
 800a910:	3568      	adds	r5, #104	@ 0x68
 800a912:	e7e9      	b.n	800a8e8 <_fwalk_sglue+0x10>

0800a914 <iprintf>:
 800a914:	b40f      	push	{r0, r1, r2, r3}
 800a916:	b507      	push	{r0, r1, r2, lr}
 800a918:	4906      	ldr	r1, [pc, #24]	@ (800a934 <iprintf+0x20>)
 800a91a:	ab04      	add	r3, sp, #16
 800a91c:	6808      	ldr	r0, [r1, #0]
 800a91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a922:	6881      	ldr	r1, [r0, #8]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	f000 f9e9 	bl	800acfc <_vfiprintf_r>
 800a92a:	b003      	add	sp, #12
 800a92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a930:	b004      	add	sp, #16
 800a932:	4770      	bx	lr
 800a934:	20000190 	.word	0x20000190

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 f868 	bl	800aa14 <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	05db      	lsls	r3, r3, #23
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	2302      	movs	r3, #2
 800a972:	2200      	movs	r2, #0
 800a974:	f000 f83c 	bl	800a9f0 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	4632      	mov	r2, r6
 800a986:	463b      	mov	r3, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b853 	b.w	800aa38 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f829 	bl	800a9f0 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b809 	b.w	800a9d0 <_close_r>

0800a9be <memset>:
 800a9be:	4402      	add	r2, r0
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d100      	bne.n	800a9c8 <memset+0xa>
 800a9c6:	4770      	bx	lr
 800a9c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9cc:	e7f9      	b.n	800a9c2 <memset+0x4>
	...

0800a9d0 <_close_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d06      	ldr	r5, [pc, #24]	@ (800a9ec <_close_r+0x1c>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f6 fa67 	bl	8000eae <_close>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_close_r+0x1a>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_close_r+0x1a>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	20001f5c 	.word	0x20001f5c

0800a9f0 <_lseek_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	@ (800aa10 <_lseek_r+0x20>)
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	602a      	str	r2, [r5, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7f6 fa7c 	bl	8000efc <_lseek>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_lseek_r+0x1e>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_lseek_r+0x1e>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	20001f5c 	.word	0x20001f5c

0800aa14 <_read_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	@ (800aa34 <_read_r+0x20>)
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	602a      	str	r2, [r5, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f7f6 fa26 	bl	8000e74 <_read>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_read_r+0x1e>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_read_r+0x1e>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	20001f5c 	.word	0x20001f5c

0800aa38 <_write_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d07      	ldr	r5, [pc, #28]	@ (800aa58 <_write_r+0x20>)
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	4608      	mov	r0, r1
 800aa40:	4611      	mov	r1, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	602a      	str	r2, [r5, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	f7f6 f8f8 	bl	8000c3c <_write>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	d102      	bne.n	800aa56 <_write_r+0x1e>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	b103      	cbz	r3, 800aa56 <_write_r+0x1e>
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	bd38      	pop	{r3, r4, r5, pc}
 800aa58:	20001f5c 	.word	0x20001f5c

0800aa5c <__errno>:
 800aa5c:	4b01      	ldr	r3, [pc, #4]	@ (800aa64 <__errno+0x8>)
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000190 	.word	0x20000190

0800aa68 <__libc_init_array>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	4d0d      	ldr	r5, [pc, #52]	@ (800aaa0 <__libc_init_array+0x38>)
 800aa6c:	4c0d      	ldr	r4, [pc, #52]	@ (800aaa4 <__libc_init_array+0x3c>)
 800aa6e:	1b64      	subs	r4, r4, r5
 800aa70:	10a4      	asrs	r4, r4, #2
 800aa72:	2600      	movs	r6, #0
 800aa74:	42a6      	cmp	r6, r4
 800aa76:	d109      	bne.n	800aa8c <__libc_init_array+0x24>
 800aa78:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa8 <__libc_init_array+0x40>)
 800aa7a:	4c0c      	ldr	r4, [pc, #48]	@ (800aaac <__libc_init_array+0x44>)
 800aa7c:	f000 fdb6 	bl	800b5ec <_init>
 800aa80:	1b64      	subs	r4, r4, r5
 800aa82:	10a4      	asrs	r4, r4, #2
 800aa84:	2600      	movs	r6, #0
 800aa86:	42a6      	cmp	r6, r4
 800aa88:	d105      	bne.n	800aa96 <__libc_init_array+0x2e>
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa90:	4798      	blx	r3
 800aa92:	3601      	adds	r6, #1
 800aa94:	e7ee      	b.n	800aa74 <__libc_init_array+0xc>
 800aa96:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9a:	4798      	blx	r3
 800aa9c:	3601      	adds	r6, #1
 800aa9e:	e7f2      	b.n	800aa86 <__libc_init_array+0x1e>
 800aaa0:	0800b74c 	.word	0x0800b74c
 800aaa4:	0800b74c 	.word	0x0800b74c
 800aaa8:	0800b74c 	.word	0x0800b74c
 800aaac:	0800b750 	.word	0x0800b750

0800aab0 <__retarget_lock_init_recursive>:
 800aab0:	4770      	bx	lr

0800aab2 <__retarget_lock_acquire_recursive>:
 800aab2:	4770      	bx	lr

0800aab4 <__retarget_lock_release_recursive>:
 800aab4:	4770      	bx	lr
	...

0800aab8 <_free_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4605      	mov	r5, r0
 800aabc:	2900      	cmp	r1, #0
 800aabe:	d041      	beq.n	800ab44 <_free_r+0x8c>
 800aac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac4:	1f0c      	subs	r4, r1, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bfb8      	it	lt
 800aaca:	18e4      	addlt	r4, r4, r3
 800aacc:	f000 f8e0 	bl	800ac90 <__malloc_lock>
 800aad0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab48 <_free_r+0x90>)
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	b933      	cbnz	r3, 800aae4 <_free_r+0x2c>
 800aad6:	6063      	str	r3, [r4, #4]
 800aad8:	6014      	str	r4, [r2, #0]
 800aada:	4628      	mov	r0, r5
 800aadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae0:	f000 b8dc 	b.w	800ac9c <__malloc_unlock>
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	d908      	bls.n	800aafa <_free_r+0x42>
 800aae8:	6820      	ldr	r0, [r4, #0]
 800aaea:	1821      	adds	r1, r4, r0
 800aaec:	428b      	cmp	r3, r1
 800aaee:	bf01      	itttt	eq
 800aaf0:	6819      	ldreq	r1, [r3, #0]
 800aaf2:	685b      	ldreq	r3, [r3, #4]
 800aaf4:	1809      	addeq	r1, r1, r0
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	e7ed      	b.n	800aad6 <_free_r+0x1e>
 800aafa:	461a      	mov	r2, r3
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	b10b      	cbz	r3, 800ab04 <_free_r+0x4c>
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	d9fa      	bls.n	800aafa <_free_r+0x42>
 800ab04:	6811      	ldr	r1, [r2, #0]
 800ab06:	1850      	adds	r0, r2, r1
 800ab08:	42a0      	cmp	r0, r4
 800ab0a:	d10b      	bne.n	800ab24 <_free_r+0x6c>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	4401      	add	r1, r0
 800ab10:	1850      	adds	r0, r2, r1
 800ab12:	4283      	cmp	r3, r0
 800ab14:	6011      	str	r1, [r2, #0]
 800ab16:	d1e0      	bne.n	800aada <_free_r+0x22>
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	6053      	str	r3, [r2, #4]
 800ab1e:	4408      	add	r0, r1
 800ab20:	6010      	str	r0, [r2, #0]
 800ab22:	e7da      	b.n	800aada <_free_r+0x22>
 800ab24:	d902      	bls.n	800ab2c <_free_r+0x74>
 800ab26:	230c      	movs	r3, #12
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	e7d6      	b.n	800aada <_free_r+0x22>
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	1821      	adds	r1, r4, r0
 800ab30:	428b      	cmp	r3, r1
 800ab32:	bf04      	itt	eq
 800ab34:	6819      	ldreq	r1, [r3, #0]
 800ab36:	685b      	ldreq	r3, [r3, #4]
 800ab38:	6063      	str	r3, [r4, #4]
 800ab3a:	bf04      	itt	eq
 800ab3c:	1809      	addeq	r1, r1, r0
 800ab3e:	6021      	streq	r1, [r4, #0]
 800ab40:	6054      	str	r4, [r2, #4]
 800ab42:	e7ca      	b.n	800aada <_free_r+0x22>
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	20001f68 	.word	0x20001f68

0800ab4c <sbrk_aligned>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ab8c <sbrk_aligned+0x40>)
 800ab50:	460c      	mov	r4, r1
 800ab52:	6831      	ldr	r1, [r6, #0]
 800ab54:	4605      	mov	r5, r0
 800ab56:	b911      	cbnz	r1, 800ab5e <sbrk_aligned+0x12>
 800ab58:	f000 fcb4 	bl	800b4c4 <_sbrk_r>
 800ab5c:	6030      	str	r0, [r6, #0]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	f000 fcaf 	bl	800b4c4 <_sbrk_r>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d103      	bne.n	800ab72 <sbrk_aligned+0x26>
 800ab6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ab6e:	4620      	mov	r0, r4
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
 800ab72:	1cc4      	adds	r4, r0, #3
 800ab74:	f024 0403 	bic.w	r4, r4, #3
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d0f8      	beq.n	800ab6e <sbrk_aligned+0x22>
 800ab7c:	1a21      	subs	r1, r4, r0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 fca0 	bl	800b4c4 <_sbrk_r>
 800ab84:	3001      	adds	r0, #1
 800ab86:	d1f2      	bne.n	800ab6e <sbrk_aligned+0x22>
 800ab88:	e7ef      	b.n	800ab6a <sbrk_aligned+0x1e>
 800ab8a:	bf00      	nop
 800ab8c:	20001f64 	.word	0x20001f64

0800ab90 <_malloc_r>:
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	1ccd      	adds	r5, r1, #3
 800ab96:	f025 0503 	bic.w	r5, r5, #3
 800ab9a:	3508      	adds	r5, #8
 800ab9c:	2d0c      	cmp	r5, #12
 800ab9e:	bf38      	it	cc
 800aba0:	250c      	movcc	r5, #12
 800aba2:	2d00      	cmp	r5, #0
 800aba4:	4606      	mov	r6, r0
 800aba6:	db01      	blt.n	800abac <_malloc_r+0x1c>
 800aba8:	42a9      	cmp	r1, r5
 800abaa:	d904      	bls.n	800abb6 <_malloc_r+0x26>
 800abac:	230c      	movs	r3, #12
 800abae:	6033      	str	r3, [r6, #0]
 800abb0:	2000      	movs	r0, #0
 800abb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac8c <_malloc_r+0xfc>
 800abba:	f000 f869 	bl	800ac90 <__malloc_lock>
 800abbe:	f8d8 3000 	ldr.w	r3, [r8]
 800abc2:	461c      	mov	r4, r3
 800abc4:	bb44      	cbnz	r4, 800ac18 <_malloc_r+0x88>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff ffbf 	bl	800ab4c <sbrk_aligned>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	4604      	mov	r4, r0
 800abd2:	d158      	bne.n	800ac86 <_malloc_r+0xf6>
 800abd4:	f8d8 4000 	ldr.w	r4, [r8]
 800abd8:	4627      	mov	r7, r4
 800abda:	2f00      	cmp	r7, #0
 800abdc:	d143      	bne.n	800ac66 <_malloc_r+0xd6>
 800abde:	2c00      	cmp	r4, #0
 800abe0:	d04b      	beq.n	800ac7a <_malloc_r+0xea>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	4639      	mov	r1, r7
 800abe6:	4630      	mov	r0, r6
 800abe8:	eb04 0903 	add.w	r9, r4, r3
 800abec:	f000 fc6a 	bl	800b4c4 <_sbrk_r>
 800abf0:	4581      	cmp	r9, r0
 800abf2:	d142      	bne.n	800ac7a <_malloc_r+0xea>
 800abf4:	6821      	ldr	r1, [r4, #0]
 800abf6:	1a6d      	subs	r5, r5, r1
 800abf8:	4629      	mov	r1, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7ff ffa6 	bl	800ab4c <sbrk_aligned>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d03a      	beq.n	800ac7a <_malloc_r+0xea>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	442b      	add	r3, r5
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	bb62      	cbnz	r2, 800ac6c <_malloc_r+0xdc>
 800ac12:	f8c8 7000 	str.w	r7, [r8]
 800ac16:	e00f      	b.n	800ac38 <_malloc_r+0xa8>
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	1b52      	subs	r2, r2, r5
 800ac1c:	d420      	bmi.n	800ac60 <_malloc_r+0xd0>
 800ac1e:	2a0b      	cmp	r2, #11
 800ac20:	d917      	bls.n	800ac52 <_malloc_r+0xc2>
 800ac22:	1961      	adds	r1, r4, r5
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	6025      	str	r5, [r4, #0]
 800ac28:	bf18      	it	ne
 800ac2a:	6059      	strne	r1, [r3, #4]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	bf08      	it	eq
 800ac30:	f8c8 1000 	streq.w	r1, [r8]
 800ac34:	5162      	str	r2, [r4, r5]
 800ac36:	604b      	str	r3, [r1, #4]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f82f 	bl	800ac9c <__malloc_unlock>
 800ac3e:	f104 000b 	add.w	r0, r4, #11
 800ac42:	1d23      	adds	r3, r4, #4
 800ac44:	f020 0007 	bic.w	r0, r0, #7
 800ac48:	1ac2      	subs	r2, r0, r3
 800ac4a:	bf1c      	itt	ne
 800ac4c:	1a1b      	subne	r3, r3, r0
 800ac4e:	50a3      	strne	r3, [r4, r2]
 800ac50:	e7af      	b.n	800abb2 <_malloc_r+0x22>
 800ac52:	6862      	ldr	r2, [r4, #4]
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	bf0c      	ite	eq
 800ac58:	f8c8 2000 	streq.w	r2, [r8]
 800ac5c:	605a      	strne	r2, [r3, #4]
 800ac5e:	e7eb      	b.n	800ac38 <_malloc_r+0xa8>
 800ac60:	4623      	mov	r3, r4
 800ac62:	6864      	ldr	r4, [r4, #4]
 800ac64:	e7ae      	b.n	800abc4 <_malloc_r+0x34>
 800ac66:	463c      	mov	r4, r7
 800ac68:	687f      	ldr	r7, [r7, #4]
 800ac6a:	e7b6      	b.n	800abda <_malloc_r+0x4a>
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	d1fb      	bne.n	800ac6c <_malloc_r+0xdc>
 800ac74:	2300      	movs	r3, #0
 800ac76:	6053      	str	r3, [r2, #4]
 800ac78:	e7de      	b.n	800ac38 <_malloc_r+0xa8>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	6033      	str	r3, [r6, #0]
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f000 f80c 	bl	800ac9c <__malloc_unlock>
 800ac84:	e794      	b.n	800abb0 <_malloc_r+0x20>
 800ac86:	6005      	str	r5, [r0, #0]
 800ac88:	e7d6      	b.n	800ac38 <_malloc_r+0xa8>
 800ac8a:	bf00      	nop
 800ac8c:	20001f68 	.word	0x20001f68

0800ac90 <__malloc_lock>:
 800ac90:	4801      	ldr	r0, [pc, #4]	@ (800ac98 <__malloc_lock+0x8>)
 800ac92:	f7ff bf0e 	b.w	800aab2 <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	20001f60 	.word	0x20001f60

0800ac9c <__malloc_unlock>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	@ (800aca4 <__malloc_unlock+0x8>)
 800ac9e:	f7ff bf09 	b.w	800aab4 <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	20001f60 	.word	0x20001f60

0800aca8 <__sfputc_r>:
 800aca8:	6893      	ldr	r3, [r2, #8]
 800acaa:	3b01      	subs	r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	b410      	push	{r4}
 800acb0:	6093      	str	r3, [r2, #8]
 800acb2:	da08      	bge.n	800acc6 <__sfputc_r+0x1e>
 800acb4:	6994      	ldr	r4, [r2, #24]
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	db01      	blt.n	800acbe <__sfputc_r+0x16>
 800acba:	290a      	cmp	r1, #10
 800acbc:	d103      	bne.n	800acc6 <__sfputc_r+0x1e>
 800acbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc2:	f000 bb6b 	b.w	800b39c <__swbuf_r>
 800acc6:	6813      	ldr	r3, [r2, #0]
 800acc8:	1c58      	adds	r0, r3, #1
 800acca:	6010      	str	r0, [r2, #0]
 800accc:	7019      	strb	r1, [r3, #0]
 800acce:	4608      	mov	r0, r1
 800acd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <__sfputs_r>:
 800acd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4614      	mov	r4, r2
 800acde:	18d5      	adds	r5, r2, r3
 800ace0:	42ac      	cmp	r4, r5
 800ace2:	d101      	bne.n	800ace8 <__sfputs_r+0x12>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e007      	b.n	800acf8 <__sfputs_r+0x22>
 800ace8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acec:	463a      	mov	r2, r7
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ffda 	bl	800aca8 <__sfputc_r>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d1f3      	bne.n	800ace0 <__sfputs_r+0xa>
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acfc <_vfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	460d      	mov	r5, r1
 800ad02:	b09d      	sub	sp, #116	@ 0x74
 800ad04:	4614      	mov	r4, r2
 800ad06:	4698      	mov	r8, r3
 800ad08:	4606      	mov	r6, r0
 800ad0a:	b118      	cbz	r0, 800ad14 <_vfiprintf_r+0x18>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <_vfiprintf_r+0x18>
 800ad10:	f7ff fdca 	bl	800a8a8 <__sinit>
 800ad14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d405      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	059a      	lsls	r2, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad22:	f7ff fec6 	bl	800aab2 <__retarget_lock_acquire_recursive>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	071b      	lsls	r3, r3, #28
 800ad2a:	d501      	bpl.n	800ad30 <_vfiprintf_r+0x34>
 800ad2c:	692b      	ldr	r3, [r5, #16]
 800ad2e:	b99b      	cbnz	r3, 800ad58 <_vfiprintf_r+0x5c>
 800ad30:	4629      	mov	r1, r5
 800ad32:	4630      	mov	r0, r6
 800ad34:	f000 fb70 	bl	800b418 <__swsetup_r>
 800ad38:	b170      	cbz	r0, 800ad58 <_vfiprintf_r+0x5c>
 800ad3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad3c:	07dc      	lsls	r4, r3, #31
 800ad3e:	d504      	bpl.n	800ad4a <_vfiprintf_r+0x4e>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad44:	b01d      	add	sp, #116	@ 0x74
 800ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4a:	89ab      	ldrh	r3, [r5, #12]
 800ad4c:	0598      	lsls	r0, r3, #22
 800ad4e:	d4f7      	bmi.n	800ad40 <_vfiprintf_r+0x44>
 800ad50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad52:	f7ff feaf 	bl	800aab4 <__retarget_lock_release_recursive>
 800ad56:	e7f3      	b.n	800ad40 <_vfiprintf_r+0x44>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5c:	2320      	movs	r3, #32
 800ad5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad66:	2330      	movs	r3, #48	@ 0x30
 800ad68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af18 <_vfiprintf_r+0x21c>
 800ad6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad70:	f04f 0901 	mov.w	r9, #1
 800ad74:	4623      	mov	r3, r4
 800ad76:	469a      	mov	sl, r3
 800ad78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7c:	b10a      	cbz	r2, 800ad82 <_vfiprintf_r+0x86>
 800ad7e:	2a25      	cmp	r2, #37	@ 0x25
 800ad80:	d1f9      	bne.n	800ad76 <_vfiprintf_r+0x7a>
 800ad82:	ebba 0b04 	subs.w	fp, sl, r4
 800ad86:	d00b      	beq.n	800ada0 <_vfiprintf_r+0xa4>
 800ad88:	465b      	mov	r3, fp
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ffa1 	bl	800acd6 <__sfputs_r>
 800ad94:	3001      	adds	r0, #1
 800ad96:	f000 80a7 	beq.w	800aee8 <_vfiprintf_r+0x1ec>
 800ad9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad9c:	445a      	add	r2, fp
 800ad9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada0:	f89a 3000 	ldrb.w	r3, [sl]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 809f 	beq.w	800aee8 <_vfiprintf_r+0x1ec>
 800adaa:	2300      	movs	r3, #0
 800adac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb4:	f10a 0a01 	add.w	sl, sl, #1
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc2:	4654      	mov	r4, sl
 800adc4:	2205      	movs	r2, #5
 800adc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adca:	4853      	ldr	r0, [pc, #332]	@ (800af18 <_vfiprintf_r+0x21c>)
 800adcc:	f7f5 fa28 	bl	8000220 <memchr>
 800add0:	9a04      	ldr	r2, [sp, #16]
 800add2:	b9d8      	cbnz	r0, 800ae0c <_vfiprintf_r+0x110>
 800add4:	06d1      	lsls	r1, r2, #27
 800add6:	bf44      	itt	mi
 800add8:	2320      	movmi	r3, #32
 800adda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adde:	0713      	lsls	r3, r2, #28
 800ade0:	bf44      	itt	mi
 800ade2:	232b      	movmi	r3, #43	@ 0x2b
 800ade4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade8:	f89a 3000 	ldrb.w	r3, [sl]
 800adec:	2b2a      	cmp	r3, #42	@ 0x2a
 800adee:	d015      	beq.n	800ae1c <_vfiprintf_r+0x120>
 800adf0:	9a07      	ldr	r2, [sp, #28]
 800adf2:	4654      	mov	r4, sl
 800adf4:	2000      	movs	r0, #0
 800adf6:	f04f 0c0a 	mov.w	ip, #10
 800adfa:	4621      	mov	r1, r4
 800adfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae00:	3b30      	subs	r3, #48	@ 0x30
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d94b      	bls.n	800ae9e <_vfiprintf_r+0x1a2>
 800ae06:	b1b0      	cbz	r0, 800ae36 <_vfiprintf_r+0x13a>
 800ae08:	9207      	str	r2, [sp, #28]
 800ae0a:	e014      	b.n	800ae36 <_vfiprintf_r+0x13a>
 800ae0c:	eba0 0308 	sub.w	r3, r0, r8
 800ae10:	fa09 f303 	lsl.w	r3, r9, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	46a2      	mov	sl, r4
 800ae1a:	e7d2      	b.n	800adc2 <_vfiprintf_r+0xc6>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	1d19      	adds	r1, r3, #4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	9103      	str	r1, [sp, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bfbb      	ittet	lt
 800ae28:	425b      	neglt	r3, r3
 800ae2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae2e:	9307      	strge	r3, [sp, #28]
 800ae30:	9307      	strlt	r3, [sp, #28]
 800ae32:	bfb8      	it	lt
 800ae34:	9204      	strlt	r2, [sp, #16]
 800ae36:	7823      	ldrb	r3, [r4, #0]
 800ae38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3a:	d10a      	bne.n	800ae52 <_vfiprintf_r+0x156>
 800ae3c:	7863      	ldrb	r3, [r4, #1]
 800ae3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae40:	d132      	bne.n	800aea8 <_vfiprintf_r+0x1ac>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	1d1a      	adds	r2, r3, #4
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	9203      	str	r2, [sp, #12]
 800ae4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae4e:	3402      	adds	r4, #2
 800ae50:	9305      	str	r3, [sp, #20]
 800ae52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af28 <_vfiprintf_r+0x22c>
 800ae56:	7821      	ldrb	r1, [r4, #0]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	f7f5 f9e0 	bl	8000220 <memchr>
 800ae60:	b138      	cbz	r0, 800ae72 <_vfiprintf_r+0x176>
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	eba0 000a 	sub.w	r0, r0, sl
 800ae68:	2240      	movs	r2, #64	@ 0x40
 800ae6a:	4082      	lsls	r2, r0
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	3401      	adds	r4, #1
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae76:	4829      	ldr	r0, [pc, #164]	@ (800af1c <_vfiprintf_r+0x220>)
 800ae78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	f7f5 f9cf 	bl	8000220 <memchr>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d03f      	beq.n	800af06 <_vfiprintf_r+0x20a>
 800ae86:	4b26      	ldr	r3, [pc, #152]	@ (800af20 <_vfiprintf_r+0x224>)
 800ae88:	bb1b      	cbnz	r3, 800aed2 <_vfiprintf_r+0x1d6>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	3307      	adds	r3, #7
 800ae8e:	f023 0307 	bic.w	r3, r3, #7
 800ae92:	3308      	adds	r3, #8
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae98:	443b      	add	r3, r7
 800ae9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9c:	e76a      	b.n	800ad74 <_vfiprintf_r+0x78>
 800ae9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea2:	460c      	mov	r4, r1
 800aea4:	2001      	movs	r0, #1
 800aea6:	e7a8      	b.n	800adfa <_vfiprintf_r+0xfe>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	3401      	adds	r4, #1
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	f04f 0c0a 	mov.w	ip, #10
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeba:	3a30      	subs	r2, #48	@ 0x30
 800aebc:	2a09      	cmp	r2, #9
 800aebe:	d903      	bls.n	800aec8 <_vfiprintf_r+0x1cc>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0c6      	beq.n	800ae52 <_vfiprintf_r+0x156>
 800aec4:	9105      	str	r1, [sp, #20]
 800aec6:	e7c4      	b.n	800ae52 <_vfiprintf_r+0x156>
 800aec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aecc:	4604      	mov	r4, r0
 800aece:	2301      	movs	r3, #1
 800aed0:	e7f0      	b.n	800aeb4 <_vfiprintf_r+0x1b8>
 800aed2:	ab03      	add	r3, sp, #12
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	462a      	mov	r2, r5
 800aed8:	4b12      	ldr	r3, [pc, #72]	@ (800af24 <_vfiprintf_r+0x228>)
 800aeda:	a904      	add	r1, sp, #16
 800aedc:	4630      	mov	r0, r6
 800aede:	f3af 8000 	nop.w
 800aee2:	4607      	mov	r7, r0
 800aee4:	1c78      	adds	r0, r7, #1
 800aee6:	d1d6      	bne.n	800ae96 <_vfiprintf_r+0x19a>
 800aee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeea:	07d9      	lsls	r1, r3, #31
 800aeec:	d405      	bmi.n	800aefa <_vfiprintf_r+0x1fe>
 800aeee:	89ab      	ldrh	r3, [r5, #12]
 800aef0:	059a      	lsls	r2, r3, #22
 800aef2:	d402      	bmi.n	800aefa <_vfiprintf_r+0x1fe>
 800aef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aef6:	f7ff fddd 	bl	800aab4 <__retarget_lock_release_recursive>
 800aefa:	89ab      	ldrh	r3, [r5, #12]
 800aefc:	065b      	lsls	r3, r3, #25
 800aefe:	f53f af1f 	bmi.w	800ad40 <_vfiprintf_r+0x44>
 800af02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af04:	e71e      	b.n	800ad44 <_vfiprintf_r+0x48>
 800af06:	ab03      	add	r3, sp, #12
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	462a      	mov	r2, r5
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <_vfiprintf_r+0x228>)
 800af0e:	a904      	add	r1, sp, #16
 800af10:	4630      	mov	r0, r6
 800af12:	f000 f879 	bl	800b008 <_printf_i>
 800af16:	e7e4      	b.n	800aee2 <_vfiprintf_r+0x1e6>
 800af18:	0800b710 	.word	0x0800b710
 800af1c:	0800b71a 	.word	0x0800b71a
 800af20:	00000000 	.word	0x00000000
 800af24:	0800acd7 	.word	0x0800acd7
 800af28:	0800b716 	.word	0x0800b716

0800af2c <_printf_common>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	4616      	mov	r6, r2
 800af32:	4698      	mov	r8, r3
 800af34:	688a      	ldr	r2, [r1, #8]
 800af36:	690b      	ldr	r3, [r1, #16]
 800af38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af3c:	4293      	cmp	r3, r2
 800af3e:	bfb8      	it	lt
 800af40:	4613      	movlt	r3, r2
 800af42:	6033      	str	r3, [r6, #0]
 800af44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af48:	4607      	mov	r7, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	b10a      	cbz	r2, 800af52 <_printf_common+0x26>
 800af4e:	3301      	adds	r3, #1
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	0699      	lsls	r1, r3, #26
 800af56:	bf42      	ittt	mi
 800af58:	6833      	ldrmi	r3, [r6, #0]
 800af5a:	3302      	addmi	r3, #2
 800af5c:	6033      	strmi	r3, [r6, #0]
 800af5e:	6825      	ldr	r5, [r4, #0]
 800af60:	f015 0506 	ands.w	r5, r5, #6
 800af64:	d106      	bne.n	800af74 <_printf_common+0x48>
 800af66:	f104 0a19 	add.w	sl, r4, #25
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	6832      	ldr	r2, [r6, #0]
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	42ab      	cmp	r3, r5
 800af72:	dc26      	bgt.n	800afc2 <_printf_common+0x96>
 800af74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af78:	6822      	ldr	r2, [r4, #0]
 800af7a:	3b00      	subs	r3, #0
 800af7c:	bf18      	it	ne
 800af7e:	2301      	movne	r3, #1
 800af80:	0692      	lsls	r2, r2, #26
 800af82:	d42b      	bmi.n	800afdc <_printf_common+0xb0>
 800af84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af88:	4641      	mov	r1, r8
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c8      	blx	r9
 800af8e:	3001      	adds	r0, #1
 800af90:	d01e      	beq.n	800afd0 <_printf_common+0xa4>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	f003 0306 	and.w	r3, r3, #6
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	bf02      	ittt	eq
 800af9e:	68e5      	ldreq	r5, [r4, #12]
 800afa0:	6833      	ldreq	r3, [r6, #0]
 800afa2:	1aed      	subeq	r5, r5, r3
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	bf0c      	ite	eq
 800afa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afac:	2500      	movne	r5, #0
 800afae:	4293      	cmp	r3, r2
 800afb0:	bfc4      	itt	gt
 800afb2:	1a9b      	subgt	r3, r3, r2
 800afb4:	18ed      	addgt	r5, r5, r3
 800afb6:	2600      	movs	r6, #0
 800afb8:	341a      	adds	r4, #26
 800afba:	42b5      	cmp	r5, r6
 800afbc:	d11a      	bne.n	800aff4 <_printf_common+0xc8>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e008      	b.n	800afd4 <_printf_common+0xa8>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4652      	mov	r2, sl
 800afc6:	4641      	mov	r1, r8
 800afc8:	4638      	mov	r0, r7
 800afca:	47c8      	blx	r9
 800afcc:	3001      	adds	r0, #1
 800afce:	d103      	bne.n	800afd8 <_printf_common+0xac>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd8:	3501      	adds	r5, #1
 800afda:	e7c6      	b.n	800af6a <_printf_common+0x3e>
 800afdc:	18e1      	adds	r1, r4, r3
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	2030      	movs	r0, #48	@ 0x30
 800afe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afe6:	4422      	add	r2, r4
 800afe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aff0:	3302      	adds	r3, #2
 800aff2:	e7c7      	b.n	800af84 <_printf_common+0x58>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4622      	mov	r2, r4
 800aff8:	4641      	mov	r1, r8
 800affa:	4638      	mov	r0, r7
 800affc:	47c8      	blx	r9
 800affe:	3001      	adds	r0, #1
 800b000:	d0e6      	beq.n	800afd0 <_printf_common+0xa4>
 800b002:	3601      	adds	r6, #1
 800b004:	e7d9      	b.n	800afba <_printf_common+0x8e>
	...

0800b008 <_printf_i>:
 800b008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	7e0f      	ldrb	r7, [r1, #24]
 800b00e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b010:	2f78      	cmp	r7, #120	@ 0x78
 800b012:	4691      	mov	r9, r2
 800b014:	4680      	mov	r8, r0
 800b016:	460c      	mov	r4, r1
 800b018:	469a      	mov	sl, r3
 800b01a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b01e:	d807      	bhi.n	800b030 <_printf_i+0x28>
 800b020:	2f62      	cmp	r7, #98	@ 0x62
 800b022:	d80a      	bhi.n	800b03a <_printf_i+0x32>
 800b024:	2f00      	cmp	r7, #0
 800b026:	f000 80d1 	beq.w	800b1cc <_printf_i+0x1c4>
 800b02a:	2f58      	cmp	r7, #88	@ 0x58
 800b02c:	f000 80b8 	beq.w	800b1a0 <_printf_i+0x198>
 800b030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b038:	e03a      	b.n	800b0b0 <_printf_i+0xa8>
 800b03a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b03e:	2b15      	cmp	r3, #21
 800b040:	d8f6      	bhi.n	800b030 <_printf_i+0x28>
 800b042:	a101      	add	r1, pc, #4	@ (adr r1, 800b048 <_printf_i+0x40>)
 800b044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b048:	0800b0a1 	.word	0x0800b0a1
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b031 	.word	0x0800b031
 800b054:	0800b031 	.word	0x0800b031
 800b058:	0800b031 	.word	0x0800b031
 800b05c:	0800b031 	.word	0x0800b031
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b031 	.word	0x0800b031
 800b068:	0800b031 	.word	0x0800b031
 800b06c:	0800b031 	.word	0x0800b031
 800b070:	0800b031 	.word	0x0800b031
 800b074:	0800b1b3 	.word	0x0800b1b3
 800b078:	0800b0df 	.word	0x0800b0df
 800b07c:	0800b16d 	.word	0x0800b16d
 800b080:	0800b031 	.word	0x0800b031
 800b084:	0800b031 	.word	0x0800b031
 800b088:	0800b1d5 	.word	0x0800b1d5
 800b08c:	0800b031 	.word	0x0800b031
 800b090:	0800b0df 	.word	0x0800b0df
 800b094:	0800b031 	.word	0x0800b031
 800b098:	0800b031 	.word	0x0800b031
 800b09c:	0800b175 	.word	0x0800b175
 800b0a0:	6833      	ldr	r3, [r6, #0]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6032      	str	r2, [r6, #0]
 800b0a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e09c      	b.n	800b1ee <_printf_i+0x1e6>
 800b0b4:	6833      	ldr	r3, [r6, #0]
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	1d19      	adds	r1, r3, #4
 800b0ba:	6031      	str	r1, [r6, #0]
 800b0bc:	0606      	lsls	r6, r0, #24
 800b0be:	d501      	bpl.n	800b0c4 <_printf_i+0xbc>
 800b0c0:	681d      	ldr	r5, [r3, #0]
 800b0c2:	e003      	b.n	800b0cc <_printf_i+0xc4>
 800b0c4:	0645      	lsls	r5, r0, #25
 800b0c6:	d5fb      	bpl.n	800b0c0 <_printf_i+0xb8>
 800b0c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	da03      	bge.n	800b0d8 <_printf_i+0xd0>
 800b0d0:	232d      	movs	r3, #45	@ 0x2d
 800b0d2:	426d      	negs	r5, r5
 800b0d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0d8:	4858      	ldr	r0, [pc, #352]	@ (800b23c <_printf_i+0x234>)
 800b0da:	230a      	movs	r3, #10
 800b0dc:	e011      	b.n	800b102 <_printf_i+0xfa>
 800b0de:	6821      	ldr	r1, [r4, #0]
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	0608      	lsls	r0, r1, #24
 800b0e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0e8:	d402      	bmi.n	800b0f0 <_printf_i+0xe8>
 800b0ea:	0649      	lsls	r1, r1, #25
 800b0ec:	bf48      	it	mi
 800b0ee:	b2ad      	uxthmi	r5, r5
 800b0f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0f2:	4852      	ldr	r0, [pc, #328]	@ (800b23c <_printf_i+0x234>)
 800b0f4:	6033      	str	r3, [r6, #0]
 800b0f6:	bf14      	ite	ne
 800b0f8:	230a      	movne	r3, #10
 800b0fa:	2308      	moveq	r3, #8
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b102:	6866      	ldr	r6, [r4, #4]
 800b104:	60a6      	str	r6, [r4, #8]
 800b106:	2e00      	cmp	r6, #0
 800b108:	db05      	blt.n	800b116 <_printf_i+0x10e>
 800b10a:	6821      	ldr	r1, [r4, #0]
 800b10c:	432e      	orrs	r6, r5
 800b10e:	f021 0104 	bic.w	r1, r1, #4
 800b112:	6021      	str	r1, [r4, #0]
 800b114:	d04b      	beq.n	800b1ae <_printf_i+0x1a6>
 800b116:	4616      	mov	r6, r2
 800b118:	fbb5 f1f3 	udiv	r1, r5, r3
 800b11c:	fb03 5711 	mls	r7, r3, r1, r5
 800b120:	5dc7      	ldrb	r7, [r0, r7]
 800b122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b126:	462f      	mov	r7, r5
 800b128:	42bb      	cmp	r3, r7
 800b12a:	460d      	mov	r5, r1
 800b12c:	d9f4      	bls.n	800b118 <_printf_i+0x110>
 800b12e:	2b08      	cmp	r3, #8
 800b130:	d10b      	bne.n	800b14a <_printf_i+0x142>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	07df      	lsls	r7, r3, #31
 800b136:	d508      	bpl.n	800b14a <_printf_i+0x142>
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	6861      	ldr	r1, [r4, #4]
 800b13c:	4299      	cmp	r1, r3
 800b13e:	bfde      	ittt	le
 800b140:	2330      	movle	r3, #48	@ 0x30
 800b142:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b146:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b14a:	1b92      	subs	r2, r2, r6
 800b14c:	6122      	str	r2, [r4, #16]
 800b14e:	f8cd a000 	str.w	sl, [sp]
 800b152:	464b      	mov	r3, r9
 800b154:	aa03      	add	r2, sp, #12
 800b156:	4621      	mov	r1, r4
 800b158:	4640      	mov	r0, r8
 800b15a:	f7ff fee7 	bl	800af2c <_printf_common>
 800b15e:	3001      	adds	r0, #1
 800b160:	d14a      	bne.n	800b1f8 <_printf_i+0x1f0>
 800b162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b166:	b004      	add	sp, #16
 800b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	f043 0320 	orr.w	r3, r3, #32
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	4832      	ldr	r0, [pc, #200]	@ (800b240 <_printf_i+0x238>)
 800b176:	2778      	movs	r7, #120	@ 0x78
 800b178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	6831      	ldr	r1, [r6, #0]
 800b180:	061f      	lsls	r7, r3, #24
 800b182:	f851 5b04 	ldr.w	r5, [r1], #4
 800b186:	d402      	bmi.n	800b18e <_printf_i+0x186>
 800b188:	065f      	lsls	r7, r3, #25
 800b18a:	bf48      	it	mi
 800b18c:	b2ad      	uxthmi	r5, r5
 800b18e:	6031      	str	r1, [r6, #0]
 800b190:	07d9      	lsls	r1, r3, #31
 800b192:	bf44      	itt	mi
 800b194:	f043 0320 	orrmi.w	r3, r3, #32
 800b198:	6023      	strmi	r3, [r4, #0]
 800b19a:	b11d      	cbz	r5, 800b1a4 <_printf_i+0x19c>
 800b19c:	2310      	movs	r3, #16
 800b19e:	e7ad      	b.n	800b0fc <_printf_i+0xf4>
 800b1a0:	4826      	ldr	r0, [pc, #152]	@ (800b23c <_printf_i+0x234>)
 800b1a2:	e7e9      	b.n	800b178 <_printf_i+0x170>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	f023 0320 	bic.w	r3, r3, #32
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	e7f6      	b.n	800b19c <_printf_i+0x194>
 800b1ae:	4616      	mov	r6, r2
 800b1b0:	e7bd      	b.n	800b12e <_printf_i+0x126>
 800b1b2:	6833      	ldr	r3, [r6, #0]
 800b1b4:	6825      	ldr	r5, [r4, #0]
 800b1b6:	6961      	ldr	r1, [r4, #20]
 800b1b8:	1d18      	adds	r0, r3, #4
 800b1ba:	6030      	str	r0, [r6, #0]
 800b1bc:	062e      	lsls	r6, r5, #24
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	d501      	bpl.n	800b1c6 <_printf_i+0x1be>
 800b1c2:	6019      	str	r1, [r3, #0]
 800b1c4:	e002      	b.n	800b1cc <_printf_i+0x1c4>
 800b1c6:	0668      	lsls	r0, r5, #25
 800b1c8:	d5fb      	bpl.n	800b1c2 <_printf_i+0x1ba>
 800b1ca:	8019      	strh	r1, [r3, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6123      	str	r3, [r4, #16]
 800b1d0:	4616      	mov	r6, r2
 800b1d2:	e7bc      	b.n	800b14e <_printf_i+0x146>
 800b1d4:	6833      	ldr	r3, [r6, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	6032      	str	r2, [r6, #0]
 800b1da:	681e      	ldr	r6, [r3, #0]
 800b1dc:	6862      	ldr	r2, [r4, #4]
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7f5 f81d 	bl	8000220 <memchr>
 800b1e6:	b108      	cbz	r0, 800b1ec <_printf_i+0x1e4>
 800b1e8:	1b80      	subs	r0, r0, r6
 800b1ea:	6060      	str	r0, [r4, #4]
 800b1ec:	6863      	ldr	r3, [r4, #4]
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1f6:	e7aa      	b.n	800b14e <_printf_i+0x146>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4640      	mov	r0, r8
 800b200:	47d0      	blx	sl
 800b202:	3001      	adds	r0, #1
 800b204:	d0ad      	beq.n	800b162 <_printf_i+0x15a>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	079b      	lsls	r3, r3, #30
 800b20a:	d413      	bmi.n	800b234 <_printf_i+0x22c>
 800b20c:	68e0      	ldr	r0, [r4, #12]
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	4298      	cmp	r0, r3
 800b212:	bfb8      	it	lt
 800b214:	4618      	movlt	r0, r3
 800b216:	e7a6      	b.n	800b166 <_printf_i+0x15e>
 800b218:	2301      	movs	r3, #1
 800b21a:	4632      	mov	r2, r6
 800b21c:	4649      	mov	r1, r9
 800b21e:	4640      	mov	r0, r8
 800b220:	47d0      	blx	sl
 800b222:	3001      	adds	r0, #1
 800b224:	d09d      	beq.n	800b162 <_printf_i+0x15a>
 800b226:	3501      	adds	r5, #1
 800b228:	68e3      	ldr	r3, [r4, #12]
 800b22a:	9903      	ldr	r1, [sp, #12]
 800b22c:	1a5b      	subs	r3, r3, r1
 800b22e:	42ab      	cmp	r3, r5
 800b230:	dcf2      	bgt.n	800b218 <_printf_i+0x210>
 800b232:	e7eb      	b.n	800b20c <_printf_i+0x204>
 800b234:	2500      	movs	r5, #0
 800b236:	f104 0619 	add.w	r6, r4, #25
 800b23a:	e7f5      	b.n	800b228 <_printf_i+0x220>
 800b23c:	0800b721 	.word	0x0800b721
 800b240:	0800b732 	.word	0x0800b732

0800b244 <__sflush_r>:
 800b244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24c:	0716      	lsls	r6, r2, #28
 800b24e:	4605      	mov	r5, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d454      	bmi.n	800b2fe <__sflush_r+0xba>
 800b254:	684b      	ldr	r3, [r1, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dc02      	bgt.n	800b260 <__sflush_r+0x1c>
 800b25a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd48      	ble.n	800b2f2 <__sflush_r+0xae>
 800b260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b262:	2e00      	cmp	r6, #0
 800b264:	d045      	beq.n	800b2f2 <__sflush_r+0xae>
 800b266:	2300      	movs	r3, #0
 800b268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b26c:	682f      	ldr	r7, [r5, #0]
 800b26e:	6a21      	ldr	r1, [r4, #32]
 800b270:	602b      	str	r3, [r5, #0]
 800b272:	d030      	beq.n	800b2d6 <__sflush_r+0x92>
 800b274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	0759      	lsls	r1, r3, #29
 800b27a:	d505      	bpl.n	800b288 <__sflush_r+0x44>
 800b27c:	6863      	ldr	r3, [r4, #4]
 800b27e:	1ad2      	subs	r2, r2, r3
 800b280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b282:	b10b      	cbz	r3, 800b288 <__sflush_r+0x44>
 800b284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b286:	1ad2      	subs	r2, r2, r3
 800b288:	2300      	movs	r3, #0
 800b28a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b28c:	6a21      	ldr	r1, [r4, #32]
 800b28e:	4628      	mov	r0, r5
 800b290:	47b0      	blx	r6
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	d106      	bne.n	800b2a6 <__sflush_r+0x62>
 800b298:	6829      	ldr	r1, [r5, #0]
 800b29a:	291d      	cmp	r1, #29
 800b29c:	d82b      	bhi.n	800b2f6 <__sflush_r+0xb2>
 800b29e:	4a2a      	ldr	r2, [pc, #168]	@ (800b348 <__sflush_r+0x104>)
 800b2a0:	40ca      	lsrs	r2, r1
 800b2a2:	07d6      	lsls	r6, r2, #31
 800b2a4:	d527      	bpl.n	800b2f6 <__sflush_r+0xb2>
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	6062      	str	r2, [r4, #4]
 800b2aa:	04d9      	lsls	r1, r3, #19
 800b2ac:	6922      	ldr	r2, [r4, #16]
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	d504      	bpl.n	800b2bc <__sflush_r+0x78>
 800b2b2:	1c42      	adds	r2, r0, #1
 800b2b4:	d101      	bne.n	800b2ba <__sflush_r+0x76>
 800b2b6:	682b      	ldr	r3, [r5, #0]
 800b2b8:	b903      	cbnz	r3, 800b2bc <__sflush_r+0x78>
 800b2ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2be:	602f      	str	r7, [r5, #0]
 800b2c0:	b1b9      	cbz	r1, 800b2f2 <__sflush_r+0xae>
 800b2c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2c6:	4299      	cmp	r1, r3
 800b2c8:	d002      	beq.n	800b2d0 <__sflush_r+0x8c>
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f7ff fbf4 	bl	800aab8 <_free_r>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2d4:	e00d      	b.n	800b2f2 <__sflush_r+0xae>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4628      	mov	r0, r5
 800b2da:	47b0      	blx	r6
 800b2dc:	4602      	mov	r2, r0
 800b2de:	1c50      	adds	r0, r2, #1
 800b2e0:	d1c9      	bne.n	800b276 <__sflush_r+0x32>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0c6      	beq.n	800b276 <__sflush_r+0x32>
 800b2e8:	2b1d      	cmp	r3, #29
 800b2ea:	d001      	beq.n	800b2f0 <__sflush_r+0xac>
 800b2ec:	2b16      	cmp	r3, #22
 800b2ee:	d11e      	bne.n	800b32e <__sflush_r+0xea>
 800b2f0:	602f      	str	r7, [r5, #0]
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e022      	b.n	800b33c <__sflush_r+0xf8>
 800b2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2fa:	b21b      	sxth	r3, r3
 800b2fc:	e01b      	b.n	800b336 <__sflush_r+0xf2>
 800b2fe:	690f      	ldr	r7, [r1, #16]
 800b300:	2f00      	cmp	r7, #0
 800b302:	d0f6      	beq.n	800b2f2 <__sflush_r+0xae>
 800b304:	0793      	lsls	r3, r2, #30
 800b306:	680e      	ldr	r6, [r1, #0]
 800b308:	bf08      	it	eq
 800b30a:	694b      	ldreq	r3, [r1, #20]
 800b30c:	600f      	str	r7, [r1, #0]
 800b30e:	bf18      	it	ne
 800b310:	2300      	movne	r3, #0
 800b312:	eba6 0807 	sub.w	r8, r6, r7
 800b316:	608b      	str	r3, [r1, #8]
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	dde9      	ble.n	800b2f2 <__sflush_r+0xae>
 800b31e:	6a21      	ldr	r1, [r4, #32]
 800b320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b322:	4643      	mov	r3, r8
 800b324:	463a      	mov	r2, r7
 800b326:	4628      	mov	r0, r5
 800b328:	47b0      	blx	r6
 800b32a:	2800      	cmp	r0, #0
 800b32c:	dc08      	bgt.n	800b340 <__sflush_r+0xfc>
 800b32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b340:	4407      	add	r7, r0
 800b342:	eba8 0800 	sub.w	r8, r8, r0
 800b346:	e7e7      	b.n	800b318 <__sflush_r+0xd4>
 800b348:	20400001 	.word	0x20400001

0800b34c <_fflush_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	690b      	ldr	r3, [r1, #16]
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	b913      	cbnz	r3, 800b35c <_fflush_r+0x10>
 800b356:	2500      	movs	r5, #0
 800b358:	4628      	mov	r0, r5
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	b118      	cbz	r0, 800b366 <_fflush_r+0x1a>
 800b35e:	6a03      	ldr	r3, [r0, #32]
 800b360:	b90b      	cbnz	r3, 800b366 <_fflush_r+0x1a>
 800b362:	f7ff faa1 	bl	800a8a8 <__sinit>
 800b366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0f3      	beq.n	800b356 <_fflush_r+0xa>
 800b36e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b370:	07d0      	lsls	r0, r2, #31
 800b372:	d404      	bmi.n	800b37e <_fflush_r+0x32>
 800b374:	0599      	lsls	r1, r3, #22
 800b376:	d402      	bmi.n	800b37e <_fflush_r+0x32>
 800b378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b37a:	f7ff fb9a 	bl	800aab2 <__retarget_lock_acquire_recursive>
 800b37e:	4628      	mov	r0, r5
 800b380:	4621      	mov	r1, r4
 800b382:	f7ff ff5f 	bl	800b244 <__sflush_r>
 800b386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b388:	07da      	lsls	r2, r3, #31
 800b38a:	4605      	mov	r5, r0
 800b38c:	d4e4      	bmi.n	800b358 <_fflush_r+0xc>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	059b      	lsls	r3, r3, #22
 800b392:	d4e1      	bmi.n	800b358 <_fflush_r+0xc>
 800b394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b396:	f7ff fb8d 	bl	800aab4 <__retarget_lock_release_recursive>
 800b39a:	e7dd      	b.n	800b358 <_fflush_r+0xc>

0800b39c <__swbuf_r>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	460e      	mov	r6, r1
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	b118      	cbz	r0, 800b3ae <__swbuf_r+0x12>
 800b3a6:	6a03      	ldr	r3, [r0, #32]
 800b3a8:	b90b      	cbnz	r3, 800b3ae <__swbuf_r+0x12>
 800b3aa:	f7ff fa7d 	bl	800a8a8 <__sinit>
 800b3ae:	69a3      	ldr	r3, [r4, #24]
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	071a      	lsls	r2, r3, #28
 800b3b6:	d501      	bpl.n	800b3bc <__swbuf_r+0x20>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	b943      	cbnz	r3, 800b3ce <__swbuf_r+0x32>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f82a 	bl	800b418 <__swsetup_r>
 800b3c4:	b118      	cbz	r0, 800b3ce <__swbuf_r+0x32>
 800b3c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	6922      	ldr	r2, [r4, #16]
 800b3d2:	1a98      	subs	r0, r3, r2
 800b3d4:	6963      	ldr	r3, [r4, #20]
 800b3d6:	b2f6      	uxtb	r6, r6
 800b3d8:	4283      	cmp	r3, r0
 800b3da:	4637      	mov	r7, r6
 800b3dc:	dc05      	bgt.n	800b3ea <__swbuf_r+0x4e>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f7ff ffb3 	bl	800b34c <_fflush_r>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d1ed      	bne.n	800b3c6 <__swbuf_r+0x2a>
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	6022      	str	r2, [r4, #0]
 800b3f6:	701e      	strb	r6, [r3, #0]
 800b3f8:	6962      	ldr	r2, [r4, #20]
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x6e>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	07db      	lsls	r3, r3, #31
 800b404:	d5e1      	bpl.n	800b3ca <__swbuf_r+0x2e>
 800b406:	2e0a      	cmp	r6, #10
 800b408:	d1df      	bne.n	800b3ca <__swbuf_r+0x2e>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f7ff ff9d 	bl	800b34c <_fflush_r>
 800b412:	2800      	cmp	r0, #0
 800b414:	d0d9      	beq.n	800b3ca <__swbuf_r+0x2e>
 800b416:	e7d6      	b.n	800b3c6 <__swbuf_r+0x2a>

0800b418 <__swsetup_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4b29      	ldr	r3, [pc, #164]	@ (800b4c0 <__swsetup_r+0xa8>)
 800b41c:	4605      	mov	r5, r0
 800b41e:	6818      	ldr	r0, [r3, #0]
 800b420:	460c      	mov	r4, r1
 800b422:	b118      	cbz	r0, 800b42c <__swsetup_r+0x14>
 800b424:	6a03      	ldr	r3, [r0, #32]
 800b426:	b90b      	cbnz	r3, 800b42c <__swsetup_r+0x14>
 800b428:	f7ff fa3e 	bl	800a8a8 <__sinit>
 800b42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b430:	0719      	lsls	r1, r3, #28
 800b432:	d422      	bmi.n	800b47a <__swsetup_r+0x62>
 800b434:	06da      	lsls	r2, r3, #27
 800b436:	d407      	bmi.n	800b448 <__swsetup_r+0x30>
 800b438:	2209      	movs	r2, #9
 800b43a:	602a      	str	r2, [r5, #0]
 800b43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b446:	e033      	b.n	800b4b0 <__swsetup_r+0x98>
 800b448:	0758      	lsls	r0, r3, #29
 800b44a:	d512      	bpl.n	800b472 <__swsetup_r+0x5a>
 800b44c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b44e:	b141      	cbz	r1, 800b462 <__swsetup_r+0x4a>
 800b450:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b454:	4299      	cmp	r1, r3
 800b456:	d002      	beq.n	800b45e <__swsetup_r+0x46>
 800b458:	4628      	mov	r0, r5
 800b45a:	f7ff fb2d 	bl	800aab8 <_free_r>
 800b45e:	2300      	movs	r3, #0
 800b460:	6363      	str	r3, [r4, #52]	@ 0x34
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	2300      	movs	r3, #0
 800b46c:	6063      	str	r3, [r4, #4]
 800b46e:	6923      	ldr	r3, [r4, #16]
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	f043 0308 	orr.w	r3, r3, #8
 800b478:	81a3      	strh	r3, [r4, #12]
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	b94b      	cbnz	r3, 800b492 <__swsetup_r+0x7a>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b488:	d003      	beq.n	800b492 <__swsetup_r+0x7a>
 800b48a:	4621      	mov	r1, r4
 800b48c:	4628      	mov	r0, r5
 800b48e:	f000 f84f 	bl	800b530 <__smakebuf_r>
 800b492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b496:	f013 0201 	ands.w	r2, r3, #1
 800b49a:	d00a      	beq.n	800b4b2 <__swsetup_r+0x9a>
 800b49c:	2200      	movs	r2, #0
 800b49e:	60a2      	str	r2, [r4, #8]
 800b4a0:	6962      	ldr	r2, [r4, #20]
 800b4a2:	4252      	negs	r2, r2
 800b4a4:	61a2      	str	r2, [r4, #24]
 800b4a6:	6922      	ldr	r2, [r4, #16]
 800b4a8:	b942      	cbnz	r2, 800b4bc <__swsetup_r+0xa4>
 800b4aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4ae:	d1c5      	bne.n	800b43c <__swsetup_r+0x24>
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	0799      	lsls	r1, r3, #30
 800b4b4:	bf58      	it	pl
 800b4b6:	6962      	ldrpl	r2, [r4, #20]
 800b4b8:	60a2      	str	r2, [r4, #8]
 800b4ba:	e7f4      	b.n	800b4a6 <__swsetup_r+0x8e>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e7f7      	b.n	800b4b0 <__swsetup_r+0x98>
 800b4c0:	20000190 	.word	0x20000190

0800b4c4 <_sbrk_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4d06      	ldr	r5, [pc, #24]	@ (800b4e0 <_sbrk_r+0x1c>)
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	602b      	str	r3, [r5, #0]
 800b4d0:	f7f5 fd22 	bl	8000f18 <_sbrk>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_sbrk_r+0x1a>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_sbrk_r+0x1a>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20001f5c 	.word	0x20001f5c

0800b4e4 <__swhatbuf_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	b096      	sub	sp, #88	@ 0x58
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	461e      	mov	r6, r3
 800b4f4:	da0d      	bge.n	800b512 <__swhatbuf_r+0x2e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	bf14      	ite	ne
 800b502:	2340      	movne	r3, #64	@ 0x40
 800b504:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b508:	2000      	movs	r0, #0
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	b016      	add	sp, #88	@ 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	466a      	mov	r2, sp
 800b514:	f000 f848 	bl	800b5a8 <_fstat_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dbec      	blt.n	800b4f6 <__swhatbuf_r+0x12>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b522:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b526:	4259      	negs	r1, r3
 800b528:	4159      	adcs	r1, r3
 800b52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b52e:	e7eb      	b.n	800b508 <__swhatbuf_r+0x24>

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b003      	add	sp, #12
 800b54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc8 	bl	800b4e4 <__swhatbuf_r>
 800b554:	9f00      	ldr	r7, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4639      	mov	r1, r7
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff fb18 	bl	800ab90 <_malloc_r>
 800b560:	b948      	cbnz	r0, 800b576 <__smakebuf_r+0x46>
 800b562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b566:	059a      	lsls	r2, r3, #22
 800b568:	d4ee      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b56a:	f023 0303 	bic.w	r3, r3, #3
 800b56e:	f043 0302 	orr.w	r3, r3, #2
 800b572:	81a3      	strh	r3, [r4, #12]
 800b574:	e7e2      	b.n	800b53c <__smakebuf_r+0xc>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	6020      	str	r0, [r4, #0]
 800b57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b586:	b15b      	cbz	r3, 800b5a0 <__smakebuf_r+0x70>
 800b588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 f81d 	bl	800b5cc <_isatty_r>
 800b592:	b128      	cbz	r0, 800b5a0 <__smakebuf_r+0x70>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f023 0303 	bic.w	r3, r3, #3
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	431d      	orrs	r5, r3
 800b5a4:	81a5      	strh	r5, [r4, #12]
 800b5a6:	e7cf      	b.n	800b548 <__smakebuf_r+0x18>

0800b5a8 <_fstat_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	@ (800b5c8 <_fstat_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f5 fc86 	bl	8000ec6 <_fstat>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_fstat_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_fstat_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20001f5c 	.word	0x20001f5c

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	@ (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f5 fc85 	bl	8000ee6 <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20001f5c 	.word	0x20001f5c

0800b5ec <_init>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_fini>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	bf00      	nop
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr
